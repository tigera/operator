// THIS IS A GENERATED FILE, PLEASE DO NOT EDIT.
package applicationlayer

var ModsecurityCoreRuleSet = map[string]string{
	"REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example":  "",
	"REQUEST-901-INITIALIZATION.conf":                      "",
	"REQUEST-903.9001-DRUPAL-EXCLUSION-RULES.conf":         "",
	"REQUEST-903.9002-WORDPRESS-EXCLUSION-RULES.conf":      "",
	"REQUEST-903.9003-NEXTCLOUD-EXCLUSION-RULES.conf":      "",
	"REQUEST-903.9004-DOKUWIKI-EXCLUSION-RULES.conf":       "",
	"REQUEST-903.9005-CPANEL-EXCLUSION-RULES.conf":         "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuMgojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgVGhlIE9XQVNQIE1vZFNlY3VyaXR5IENvcmUgUnVsZSBTZXQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIKIyBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAoQVNMKSB2ZXJzaW9uIDIKIyBQbGVhc2Ugc2VlIHRoZSBlbmNsb3NlZCBMSUNFTlNFIGZpbGUgZm9yIGZ1bGwgZGV0YWlscy4KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMgVGhlc2UgZXhjbHVzaW9ucyByZW1lZHkgZmFsc2UgcG9zaXRpdmVzIGluIGEgZGVmYXVsdCBjUGFuZWwgZW52aXJvbm1lbnQuCiMgVGhlIGV4Y2x1c2lvbnMgYXJlIG9ubHkgYWN0aXZlIGlmIGNyc19leGNsdXNpb25zX2NwYW5lbD0xIGlzIHNldC4KIyBTZWUgcnVsZSA5MDAxMzAgaW4gY3JzLXNldHVwLmNvbmYuZXhhbXBsZSBmb3IgaW5zdHJ1Y3Rpb25zLgoKClNlY1J1bGUgJlRYOmNyc19leGNsdXNpb25zX2NwYW5lbHxUWDpjcnNfZXhjbHVzaW9uc19jcGFuZWwgIkBlcSAwIiBcCiAgICAiaWQ6OTAwNTAwMCxcCiAgICBwaGFzZToxLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyxcCiAgICBza2lwQWZ0ZXI6RU5ELUNQQU5FTCIKClNlY1J1bGUgJlRYOmNyc19leGNsdXNpb25zX2NwYW5lbHxUWDpjcnNfZXhjbHVzaW9uc19jcGFuZWwgIkBlcSAwIiBcCiAgICAiaWQ6OTAwNTAwMSxcCiAgICBwaGFzZToyLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyxcCiAgICBza2lwQWZ0ZXI6RU5ELUNQQU5FTCIKCgojCiMgWyBjUGFuZWwgd2htLXNlcnZlci1zdGF0dXMgXQojCiMgQ3BhbmVsJ3MgV0hNIGF1dG8gZ2VuZXJhdGVzIHJlcXVlc3RzIHRvIC93aG0tc2VydmVyLXN0YXR1cyBmcm9tCiMgMTI3LjAuMC4xICh0cmlnZ2VycyBydWxlIDkyMDI4MCwgbm9uLWJsb2NraW5nLCBsb2cgb25seSkgT25jZSBldmVyeSA1IG1pbnV0ZXMuCiMgVGhlc2UgZmFsc2UgcG9zaXRpdmVzIGhhdmUgYSBsb3cgaW1wYWN0IChsb2dnZWQsIG5vbi1ibG9ja2luZykgdG8gYSBsYXJnZSBudW1iZXIgb2YgdXNlcnMgKGFsbCBjUGFuZWwgYWRtaW5zKS4KIwoKIwojIFJ1bGUgdG8gYWxsb3cgY1BhbmVsIHdobS1zZXJ2ZXItc3RhdHVzIHJlcXVlc3RzIGZyb20gbG9jYWxob3N0IHdpdGhvdXQgbG9nIGVudHJ5LgojClNlY1J1bGUgUkVRVUVTVF9MSU5FICJAcnggXkdFVCAvd2htLXNlcnZlci1zdGF0dXMoPzovfC9cP2F1dG8pPyBIVFRQL1sxMl1cLlswMV0kIiBcCiAgICAiaWQ6OTAwNTEwMCxcCiAgICBwaGFzZToxLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0tYXBhY2hlJyxcCiAgICB0YWc6J2F0dGFjay1nZW5lcmljJyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgY2hhaW4iCiAgICBTZWNSdWxlIFJFTU9URV9BRERSICJAaXBNYXRjaCAxMjcuMC4wLjEsOjoxIiBcCiAgICAgICAgInQ6bm9uZSxcCiAgICAgICAgY3RsOnJ1bGVSZW1vdmVCeUlkPTkyMDI4MCxcCiAgICAgICAgY3RsOnJ1bGVSZW1vdmVCeUlkPTkyMDM1MCIKCgpTZWNNYXJrZXIgIkVORC1DUEFORUwiCg==",
	"REQUEST-903.9006-XENFORO-EXCLUSION-RULES.conf":        "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuMgojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgVGhlIE9XQVNQIE1vZFNlY3VyaXR5IENvcmUgUnVsZSBTZXQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIKIyBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAoQVNMKSB2ZXJzaW9uIDIKIyBQbGVhc2Ugc2VlIHRoZSBlbmNsb3NlZCBMSUNFTlNFIGZpbGUgZm9yIGZ1bGwgZGV0YWlscy4KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMgVGhlc2UgZXhjbHVzaW9ucyByZW1lZHkgZmFsc2UgcG9zaXRpdmVzIGluIGEgZGVmYXVsdCBYZW5Gb3JvIGluc3RhbGwuCiMgVGhlIGV4Y2x1c2lvbnMgYXJlIG9ubHkgYWN0aXZlIGlmIGNyc19leGNsdXNpb25zX3hlbmZvcm89MSBpcyBzZXQuCiMgU2VlIHJ1bGUgOTAwMTMwIGluIGNycy1zZXR1cC5jb25mLmV4YW1wbGUgZm9yIGluc3RydWN0aW9ucy4KClNlY1J1bGUgJlRYOmNyc19leGNsdXNpb25zX3hlbmZvcm98VFg6Y3JzX2V4Y2x1c2lvbnNfeGVuZm9ybyAiQGVxIDAiIFwKICAgICJpZDo5MDA2MDAwLFwKICAgIHBoYXNlOjEsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInLFwKICAgIHNraXBBZnRlcjpFTkQtWEVORk9STyIKClNlY1J1bGUgJlRYOmNyc19leGNsdXNpb25zX3hlbmZvcm98VFg6Y3JzX2V4Y2x1c2lvbnNfeGVuZm9ybyAiQGVxIDAiIFwKICAgICJpZDo5MDA2MDAxLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInLFwKICAgIHNraXBBZnRlcjpFTkQtWEVORk9STyIKCgojCiMgLT1bIFhlbkZvcm8gRnJvbnQtRW5kIF09LQojCgojIFByb3h5IGZvciBpbWFnZXMgYW5kIHJlbW90ZSBjb250ZW50IGVtYmVkZGVkIGluIGZvcnVtIHBvc3RzCiMgR0VUIC94Zi9wcm94eS5waHA/aW1hZ2U9aHR0cHM6Ly9leGFtcGxlLmNvbS9zb21lLmpwZyZoYXNoPWZvbwojIEdFVCAveGYvcHJveHkucGhwP2xpbms9aHR0cHM6Ly9leGFtcGxlLmNvbSZoYXNoPWZvbwojIFBPU1QgL3hmL3Byb3h5LnBocCwgYm9keTogcmVmZXJyZXI9Li4uClNlY1J1bGUgUkVRVUVTVF9GSUxFTkFNRSAiQGVuZHNXaXRoIC9wcm94eS5waHAiIFwKICAgICJpZDo5MDA2MTAwLFwKICAgIHBoYXNlOjEsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzppbWFnZSxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5VGFnPU9XQVNQX0NSUztBUkdTOmxpbmssXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTkzMTEzMDtBUkdTOnJlZmVycmVyLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDIyMzA7QVJHUzpyZWZlcnJlcixcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMiciCgojIFN0b3JlIGRyYWZ0cyBmb3IgcHJpdmF0ZSBtZXNzYWdlLCBmb3J1bSBwb3N0LCB0aHJlYWQgcmVwbHkKIyBQT1NUIC94Zi9jb252ZXJzYXRpb25zL2RyYWZ0CiMgUE9TVCAveGYvY29udmVyc2F0aW9ucy9jb252by10aXRsZS4xMjM0NS9kcmFmdAojIFBPU1QgL3hmL2ZvcnVtcy9mb3J1bS10aXRsZS4xMjM0NS9kcmFmdAojIFBPU1QgL3hmL3RocmVhZHMvdGhyZWFkLXRpdGxlLSVFMiU5OCU4NS4xMjM0NS9kcmFmdAojCiMgYXR0YWNobWVudF9oYXNoX2NvbWJpbmVkIGV4YW1wbGU6CiMgeyJ0eXBlIjoicG9zdCIsImNvbnRleHQiOnsicG9zdF9pZCI6MTIzNDV9LCJoYXNoIjoiMDEyMzQ1Njc4OWFiY2RlZi4uLiJ9ClNlY1J1bGUgUkVRVUVTVF9GSUxFTkFNRSAiQHJ4IC8oPzpjb252ZXJzYXRpb25zfCg/OmNvbnZlcnNhdGlvbnN8Zm9ydW1zfHRocmVhZHMpLy4qKS9kcmFmdCQiIFwKICAgICJpZDo5MDA2MTEwLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTkzMTEzMDtBUkdTOmhyZWYsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzp0aXRsZSxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5VGFnPU9XQVNQX0NSUztBUkdTOm1lc3NhZ2UsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzptZXNzYWdlX2h0bWwsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjIwMDtBUkdTOmF0dGFjaG1lbnRfaGFzaF9jb21iaW5lZCxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5SWQ9OTQyMjYwO0FSR1M6YXR0YWNobWVudF9oYXNoX2NvbWJpbmVkLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDIzNDA7QVJHUzphdHRhY2htZW50X2hhc2hfY29tYmluZWQsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjM3MDtBUkdTOmF0dGFjaG1lbnRfaGFzaF9jb21iaW5lZCxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMiciCgojIFNlbmQgUE0sIGVkaXQgcG9zdCwgY3JlYXRlIHRocmVhZCwgcmVwbHkgdG8gdGhyZWFkCiMgUE9TVCAveGYvY29udmVyc2F0aW9ucy9hZGQKIyBQT1NUIC94Zi9jb252ZXJzYXRpb25zL2FkZC1wcmV2aWV3CiMgUE9TVCAveGYvY29udmVyc2F0aW9ucy9tZXNzYWdlcy8xNDYzOTQ3L2VkaXQKIyBQT1NUIC94Zi9wb3N0cy8xMjM0NS9lZGl0CiMgUE9TVCAveGYvcG9zdHMvMTIzNDUvcHJldmlldwojIFBPU1QgL3hmL2NvbnZlcnNhdGlvbnMvY29udm8tdGl0bGUuMTIzNDUvYWRkLXJlcGx5CiMgUE9TVCAveGYvdGhyZWFkcy90aHJlYWQtdGl0bGUuMTIzNDUvYWRkLXJlcGx5CiMgUE9TVCAveGYvdGhyZWFkcy90aHJlYWQtdGl0bGUuMTIzNDUvcmVwbHktcHJldmlldwojIFBPU1QgL3hmL2ZvcnVtcy9mb3J1bS10aXRsZS4xMjM0NS9wb3N0LXRocmVhZAojIFBPU1QgL3hmL2ZvcnVtcy9ibG9ncy9wb3N0LXRocmVhZAojIFBPU1QgL3hmL2ZvcnVtcy9mb3J1bS10aXRsZS4xMjM0NS90aHJlYWQtcHJldmlldwpTZWNSdWxlIFJFUVVFU1RfRklMRU5BTUUgIkByeCAvKD86Y29udmVyc2F0aW9ucy9hZGQoPzotcHJldmlldyk/fGNvbnZlcnNhdGlvbnMvbWVzc2FnZXMvXGQrL2VkaXR8cG9zdHMvXGQrLyg/OmVkaXR8cHJldmlldyl8KD86Y29udmVyc2F0aW9uc3x0aHJlYWRzKS8uKlwuXGQrLyg/OmFkZC1yZXBseXxyZXBseS1wcmV2aWV3KXxmb3J1bXMvLiovKD86cG9zdC10aHJlYWR8dGhyZWFkLXByZXZpZXcpKSQiIFwKICAgICJpZDo5MDA2MTIwLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzp0aXRsZSxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5VGFnPU9XQVNQX0NSUztBUkdTOm1lc3NhZ2UsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzptZXNzYWdlX2h0bWwsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjIwMDtBUkdTOmF0dGFjaG1lbnRfaGFzaF9jb21iaW5lZCxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5SWQ9OTQyMjYwO0FSR1M6YXR0YWNobWVudF9oYXNoX2NvbWJpbmVkLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDIzNDA7QVJHUzphdHRhY2htZW50X2hhc2hfY29tYmluZWQsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjM3MDtBUkdTOmF0dGFjaG1lbnRfaGFzaF9jb21iaW5lZCxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMiciCgojIFF1b3RlCiMgUE9TVCAveGYvcG9zdHMvMTIzNDUvcXVvdGUKU2VjUnVsZSBSRVFVRVNUX0ZJTEVOQU1FICJAcnggL3Bvc3RzL1xkKy9xdW90ZSQiIFwKICAgICJpZDo5MDA2MTMwLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzpxdW90ZUh0bWwsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInIgoKIyBNdWx0aSBxdW90ZQojIFBPU1QgL3hmL2NvbnZlcnNhdGlvbnMvY29udm8tdGl0bGUuMTIzNDUvbXVsdGktcXVvdGUKIyBQT1NUIC94Zi90aHJlYWRzL3RocmVhZC10aXRsZS4xMjM0NS9tdWx0aS1xdW90ZQojIHF1b3Rlcz17IjEyMzQ1IjpbInF1b3RlLWh0bWwiXX0KU2VjUnVsZSBSRVFVRVNUX0ZJTEVOQU1FICJAcnggLyg/OmNvbnZlcnNhdGlvbnN8dGhyZWFkcykvLipcLlxkKy9tdWx0aS1xdW90ZSQiIFwKICAgICJpZDo5MDA2MTQwLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzpxdW90ZXMsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzppbnNlcnRbMF1bdmFsdWVdLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO0FSR1M6aW5zZXJ0WzFdW3ZhbHVlXSxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5VGFnPU9XQVNQX0NSUztBUkdTOmluc2VydFsyXVt2YWx1ZV0sXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzppbnNlcnRbM11bdmFsdWVdLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO0FSR1M6aW5zZXJ0WzRdW3ZhbHVlXSxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5VGFnPU9XQVNQX0NSUztBUkdTOmluc2VydFs1XVt2YWx1ZV0sXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzppbnNlcnRbNl1bdmFsdWVdLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO0FSR1M6aW5zZXJ0WzddW3ZhbHVlXSxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5VGFnPU9XQVNQX0NSUztBUkdTOmluc2VydFs4XVt2YWx1ZV0sXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzppbnNlcnRbOV1bdmFsdWVdLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyIKCiMgRGVsZXRlIHRocmVhZAojIFBPU1QgL3hmL3RocmVhZHMvdGhyZWFkLXRpdGxlLjEyMzQ1L2RlbGV0ZQpTZWNSdWxlIFJFUVVFU1RfRklMRU5BTUUgIkByeCAvdGhyZWFkcy8uKlwuXGQrL2RlbGV0ZSQiIFwKICAgICJpZDo5MDA2MTUwLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjEzMDtBUkdTOnN0YXJ0ZXJfYWxlcnRfcmVhc29uLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyIKCiMgRmVhdHVyZSB0aHJlYWQKIyBQT1NUIC94Zi90aHJlYWRzL3RocmVhZC10aXRsZS4xMjM0NS9mZWF0dXJlLWVkaXQKU2VjUnVsZSBSRVFVRVNUX0ZJTEVOQU1FICJAcnggL3RocmVhZHMvLipcLlxkKy9mZWF0dXJlLWVkaXQkIiBcCiAgICAiaWQ6OTAwNjE1NSxcCiAgICBwaGFzZToyLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO0FSR1M6ZmVhdHVyZVtmZWF0dXJlX2V4Y2VycHRdIgoKIyBJbmxpbmUgbW9kZXJhdGUgdGhyZWFkCiMgUE9TVCAveGYvaW5saW5lLW1vZC8KU2VjUnVsZSBSRVFVRVNUX0ZJTEVOQU1FICJAZW5kc1dpdGggL2lubGluZS1tb2QvIiBcCiAgICAiaWQ6OTAwNjE2MCxcCiAgICBwaGFzZToyLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO0FSR1M6YXV0aG9yX2FsZXJ0X3JlYXNvbixcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5VGFnPU9XQVNQX0NSUztBUkdTOm1lc3NhZ2UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInIgoKIyBXYXJuIG1lbWJlcgojIFBPU1QgL3hmL21lbWJlcnMvbmFtZS4xMjM0NS93YXJuCiMgUE9TVCAveGYvcG9zdHMvMTIzNDUvd2FybgpTZWNSdWxlIFJFUVVFU1RfRklMRU5BTUUgIkByeCAvKD86bWVtYmVycy8uKlwuXGQrfHBvc3RzL1xkKykvd2FybiQiIFwKICAgICJpZDo5MDA2MTcwLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzpjb252ZXJzYXRpb25fbWVzc2FnZSxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5VGFnPU9XQVNQX0NSUztBUkdTOm5vdGVzLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyIKCiMgRWRpdG9yClNlY1J1bGUgUkVRVUVTVF9VUkkgIkBlbmRzV2l0aCAvaW5kZXgucGhwP2VkaXRvci90by1odG1sIiBcCiAgICAiaWQ6OTAwNjIwMCxcCiAgICBwaGFzZToyLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO0FSR1M6YmJfY29kZSxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5SWQ9OTQyMjAwO0FSR1M6YXR0YWNobWVudF9oYXNoX2NvbWJpbmVkLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDIyNjA7QVJHUzphdHRhY2htZW50X2hhc2hfY29tYmluZWQsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjM0MDtBUkdTOmF0dGFjaG1lbnRfaGFzaF9jb21iaW5lZCxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5SWQ9OTQyMzcwO0FSR1M6YXR0YWNobWVudF9oYXNoX2NvbWJpbmVkLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyIKCiMgRWRpdG9yClNlY1J1bGUgUkVRVUVTVF9VUkkgIkBlbmRzV2l0aCAvaW5kZXgucGhwP2VkaXRvci90by1iYi1jb2RlIiBcCiAgICAiaWQ6OTAwNjIxMCxcCiAgICBwaGFzZToyLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO0FSR1M6aHRtbCxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMiciCgojIFBvc3QgYXR0YWNobWVudAojIFBPU1QgL3hmL2FjY291bnQvYXZhdGFyCiMgUE9TVCAveGYvYXR0YWNobWVudHMvdXBsb2FkP3R5cGU9cG9zdCZjb250ZXh0W3RocmVhZF9pZF09MTIzNDUmaGFzaD1mb28KU2VjUnVsZSBSRVFVRVNUX0ZJTEVOQU1FICJAcnggLyg/OmFjY291bnQvYXZhdGFyfGF0dGFjaG1lbnRzL3VwbG9hZCkkIiBcCiAgICAiaWQ6OTAwNjIyMCxcCiAgICBwaGFzZToxLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIGN0bDpydWxlUmVtb3ZlQnlJZD0yMDAwMDMsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjIyMDtBUkdTOmZsb3dDaHVua1NpemUsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjQ0MDtBUkdTOmZsb3dJZGVudGlmaWVyLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDI0NDA7QVJHUzpmbG93RmlsZW5hbWUsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjQ0MDtBUkdTOmZsb3dSZWxhdGl2ZVBhdGgsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInIgoKIyBNZWRpYQojIFBPU1QgL3hmL2luZGV4LnBocD9lZGl0b3IvbWVkaWEKU2VjUnVsZSBSRVFVRVNUX1VSSSAiQGVuZHNXaXRoIC9pbmRleC5waHA/ZWRpdG9yL21lZGlhIiBcCiAgICAiaWQ6OTAwNjIzMCxcCiAgICBwaGFzZToyLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05MzExMzA7QVJHUzp1cmwsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjEzMDtBUkdTOnVybCxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMiciCgojIEVtb2ppCiMgR0VUIC94Zi9pbmRleC5waHA/bWlzYy9maW5kLWVtb2ppJnE9KCUwQSUwQQpTZWNSdWxlIFJFUVVFU1RfVVJJICJAcnggL2luZGV4XC5waHBcP21pc2MvZmluZC1lbW9qaSZxPSIgXAogICAgImlkOjkwMDYyNDAsXAogICAgcGhhc2U6MSxcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5SWQ9OTIxMTUxO0FSR1M6cSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMiciCgojIExvZ2luCiMgUE9TVCAveGYvbG9naW4vbG9naW4KU2VjUnVsZSBSRVFVRVNUX0ZJTEVOQU1FICJAZW5kc1dpdGggL2xvZ2luL2xvZ2luIiBcCiAgICAiaWQ6OTAwNjMwMCxcCiAgICBwaGFzZToyLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO0FSR1M6cGFzc3dvcmQsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInIgoKIyBSZWdpc3RlciBhY2NvdW50CiMgUE9TVCAveGYvcmVnaXN0ZXIvcmVnaXN0ZXIKIyBUaGUgcGFzc3dvcmQgaXMgcGFzc2VkIGluIGEgdmFyaWFibGUtbmFtZSBmb3JtIHBhcmFtZXRlci4gV2UgZG9uJ3QKIyB3YW50IHRvIGV4Y2x1ZGUgYWxsIHBhcmFtZXRlcnMgY29tcGxldGVseSBhcyB0aGlzIHdvdWxkIGNhdXNlIGFuCiMgdW5hY2NlcHRhYmxlIGJ5cGFzcy4gU28sIHdlIGV4Y2x1ZGUgb25seSBjb21tb25seSBoaXQgcnVsZXMuClNlY1J1bGUgUkVRVUVTVF9GSUxFTkFNRSAiQGVuZHNXaXRoIC9yZWdpc3Rlci9yZWdpc3RlciIgXAogICAgImlkOjkwMDYzMTAsXAogICAgcGhhc2U6MixcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5SWQ9OTQyMTMwO0FSR1MsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzpyZWdfa2V5LFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyIKCiMgQ29uZmlybSBhY2NvdW50CiMgR0VUIC94Zi9hY2NvdW50LWNvbmZpcm1hdGlvbi9uYW1lLjEyMzQ1L2VtYWlsP2M9Zm9vClNlY1J1bGUgUkVRVUVTVF9GSUxFTkFNRSAiQHJ4IC9hY2NvdW50LWNvbmZpcm1hdGlvbi8uKlwuXGQrL2VtYWlsJCIgXAogICAgImlkOjkwMDYzMTUsXAogICAgcGhhc2U6MixcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5VGFnPU9XQVNQX0NSUztBUkdTOmMiCgojIEVkaXQgYWNjb3VudAojIFBPU1QgL3hmL2FjY291bnQvYWNjb3VudC1kZXRhaWxzClNlY1J1bGUgUkVRVUVTVF9GSUxFTkFNRSAiQGVuZHNXaXRoIC9hY2NvdW50L2FjY291bnQtZGV0YWlscyIgXAogICAgImlkOjkwMDYzMjAsXAogICAgcGhhc2U6MixcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5SWQ9OTMxMTMwO0FSR1M6Y3VzdG9tX2ZpZWxkc1twaWN0dXJlXSxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5VGFnPU9XQVNQX0NSUztBUkdTOmFib3V0X2h0bWwsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInIgoKIyBMb3N0IHBhc3N3b3JkCiMgUE9TVCAveGYvbG9zdC1wYXNzd29yZC91c2VyLW5hbWUuMTIzNDUvY29uZmlybT9jPWZvbwpTZWNSdWxlIFJFUVVFU1RfRklMRU5BTUUgIkByeCAvbG9zdC1wYXNzd29yZC8uKlwuXGQrL2NvbmZpcm0kIiBcCiAgICAiaWQ6OTAwNjMzMCxcCiAgICBwaGFzZToyLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO0FSR1M6YyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMiciCgojIFNldCBmb3J1bSBzaWduYXR1cmUKIyBQT1NUIC94Zi9hY2NvdW50L3NpZ25hdHVyZQpTZWNSdWxlIFJFUVVFU1RfRklMRU5BTUUgIkBlbmRzV2l0aCAvYWNjb3VudC9zaWduYXR1cmUiIFwKICAgICJpZDo5MDA2MzQwLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzpzaWduYXR1cmVfaHRtbCxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMiciCgojIFNlYXJjaAojIFBPU1QgL3hmL3NlYXJjaC9zZWFyY2gKU2VjUnVsZSBSRVFVRVNUX0ZJTEVOQU1FICJAZW5kc1dpdGggL3NlYXJjaC9zZWFyY2giIFwKICAgICJpZDo5MDA2NDAwLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzprZXl3b3JkcyxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5SWQ9OTQyMjAwO0FSR1M6Y29uc3RyYWludHMsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjI2MDtBUkdTOmNvbnN0cmFpbnRzLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDIzNDA7QVJHUzpjb25zdHJhaW50cyxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5SWQ9OTQyMzcwO0FSR1M6Y29uc3RyYWludHMsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInIgoKIyBTZWFyY2ggd2l0aGluIHRocmVhZAojIEdFVCAveGYvdGhyZWFkcy9mb28uMTIzNDUvcGFnZTEyP2hpZ2hsaWdodD1mb28KU2VjUnVsZSBSRVFVRVNUX0ZJTEVOQU1FICJAcnggL3RocmVhZHMvLipcLlxkKy8oPzpwYWdlXGQrKT8kIiBcCiAgICAiaWQ6OTAwNjQxMCxcCiAgICBwaGFzZToxLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO0FSR1M6aGlnaGxpZ2h0LFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyIKCiMgU2VhcmNoIHdpdGhpbiBzZWFyY2ggcmVzdWx0CiMgR0VUIC94Zi9zZWFyY2gvMTIzNDUvP3E9Zm9vClNlY1J1bGUgUkVRVUVTVF9GSUxFTkFNRSAiQHJ4IC9zZWFyY2gvXGQrLyQiIFwKICAgICJpZDo5MDA2NDIwLFwKICAgIHBoYXNlOjEsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzpxLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyIKCiMgQ29udGFjdCBmb3JtCiMgUE9TVCAveGYvbWlzYy9jb250YWN0ClNlY1J1bGUgUkVRVUVTVF9GSUxFTkFNRSAiQGVuZHNXaXRoIC9taXNjL2NvbnRhY3QiIFwKICAgICJpZDo5MDA2NTAwLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzptZXNzYWdlLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO0FSR1M6c3ViamVjdCxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMiciCgojIFJlcG9ydCBwb3N0CiMgUE9TVCAveGYvcG9zdHMvMTIzNDUvcmVwb3J0ClNlY1J1bGUgUkVRVUVTVF9GSUxFTkFNRSAiQHJ4IC9wb3N0cy9cZCsvcmVwb3J0JCIgXAogICAgImlkOjkwMDY1MTAsXAogICAgcGhhc2U6MixcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5VGFnPU9XQVNQX0NSUztBUkdTOm1lc3NhZ2UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInIgoKIyBBbHRlcm5hdGUgdGhyZWFkIHZpZXcgcm91dGUKIyAveGYvaW5kZXgucGhwP3RocmVhZHMvdGl0bGUtaGF2aW5nLXNvbWUtc3FsLjEyMzQ1LwojCiMgRXNwZWNpYWxseSB0aHJlYWRzIHdpdGggdGhlIEhBVklORyBzcWwga2V5d29yZCBhcmUgRlAgcHJvbmUuCiMgVGhpcyBydWxlIGhhcyBzb21lIGNoYWlucyB0byBuYXJyb3cgZG93biB0aGUgZXhjbHVzaW9uLAojIG1ha2luZyBpdCBoYXJkZXIgZm9yIGFuIGF0dGFja2VyIHRvIGFidXNlIHRoZSBBUkdTX05BTUVTCiMgZXhjbHVzaW9uIG9uIG90aGVyIGVuZHBvaW50cy4KU2VjUnVsZSBSRVFVRVNUX0ZJTEVOQU1FICJAZW5kc1dpdGggL2luZGV4LnBocCIgXAogICAgImlkOjkwMDY2MDAsXAogICAgcGhhc2U6MSxcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgY2hhaW4iCiAgICBTZWNSdWxlIFJFUVVFU1RfTUVUSE9EICJAc3RyZXEgR0VUIiBcCiAgICAgICAgInQ6bm9uZSxcCiAgICAgICAgY2hhaW4iCiAgICAgICAgU2VjUnVsZSAmQVJHUyAiQGVxIDEiIFwKICAgICAgICAgICAgInQ6bm9uZSxcCiAgICAgICAgICAgIGNoYWluIgogICAgICAgICAgICBTZWNSdWxlIFJFUVVFU1RfVVJJICJAcnggL2luZGV4XC5waHBcP3RocmVhZHMvLipcLlxkKy8kIiBcCiAgICAgICAgICAgICAgICAidDpub25lLFwKICAgICAgICAgICAgICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDIxMDA7QVJHU19OQU1FUyxcCiAgICAgICAgICAgICAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5SWQ9OTQyMjMwO0FSR1NfTkFNRVMiCgojIEJyb3dzZXIgZmluZ2VycHJpbnQgKERCVGVjaCBzZWN1cml0eSBleHRlbnNpb24pCiMgTWF5IENvbnRhaW4gdmFyaW91cyBqYXZhc2NyaXB0L1hTUyBmYWxzZSBwb3NpdGl2ZXMKU2VjUnVsZSBSRVFVRVNUX1VSSSAiQGVuZHNXaXRoIC9pbmRleC5waHA/ZGJ0ZWNoLXNlY3VyaXR5L2ZpbmdlcnByaW50IiBcCiAgICAiaWQ6OTAwNjcwMCxcCiAgICBwaGFzZToyLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO0FSR1M6Y29tcG9uZW50c1sxNF1bdmFsdWVdLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO0FSR1M6Y29tcG9uZW50c1sxNV1bdmFsdWVdLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO0FSR1M6Y29tcG9uZW50c1sxNl1bdmFsdWVdLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyIKCiMgR2V0IGxvY2F0aW9uIGluZm8KU2VjUnVsZSBSRVFVRVNUX0ZJTEVOQU1FICJAZW5kc1dpdGggL21pc2MvbG9jYXRpb24taW5mbyIgXAogICAgImlkOjkwMDY3MTAsXAogICAgcGhhc2U6MixcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5VGFnPU9XQVNQX0NSUztBUkdTOmxvY2F0aW9uLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyIKCiMKIyAtPVsgWGVuRm9ybyBHbG9iYWwgRXhjbHVzaW9ucyBdPS0KIwoKIyBfeGZSZWRpcmVjdCwgX3hmUmVxdWVzdFVyaSBjYW4gYXBwZWFyIG9uIHZhcmlvdXMgZW5kcG9pbnRzLgojIENvb2tpZXMgY2FuIGFwcGVhciBvbiBhbGwgZW5kcG9pbnRzLgoKU2VjQWN0aW9uIFwKICAgICJpZDo5MDA2ODAwLFwKICAgIHBoYXNlOjEsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTkzMTEyMDtBUkdTOl94ZlJlZGlyZWN0LFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDExNTA7QVJHUzpfeGZSZWRpcmVjdCxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5SWQ9OTQyMjMwO0FSR1M6X3hmUmVkaXJlY3QsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjI2MDtBUkdTOl94ZlJlZGlyZWN0LFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05MzExMjA7QVJHUzpfeGZSZXF1ZXN0VXJpLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDExNTA7QVJHUzpfeGZSZXF1ZXN0VXJpLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDIxMzA7QVJHUzpfeGZSZXF1ZXN0VXJpLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDIyMzA7QVJHUzpfeGZSZXF1ZXN0VXJpLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDIyNjA7QVJHUzpfeGZSZXF1ZXN0VXJpLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDIxMDA7UkVRVUVTVF9DT09LSUVTOnhmX2NzcmYsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjIxMDtSRVFVRVNUX0NPT0tJRVM6eGZfY3NyZixcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5SWQ9OTQyNDQwO1JFUVVFU1RfQ09PS0lFUzp4Zl9jc3JmLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDIxMDA7UkVRVUVTVF9DT09LSUVTOnhmX2Vtb2ppX3VzYWdlLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDIxNTA7UkVRVUVTVF9DT09LSUVTOnhmX2Vtb2ppX3VzYWdlLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDI0MTA7UkVRVUVTVF9DT09LSUVTOnhmX2Vtb2ppX3VzYWdlLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO1JFUVVFU1RfQ09PS0lFUzp4Zl9scyxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5SWQ9OTQyMTAwO1JFUVVFU1RfQ09PS0lFUzp4Zl9zZXNzaW9uLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDIxMDA7UkVRVUVTVF9DT09LSUVTOnhmX3VzZXIsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInIgoKIwojIC09WyBYZW5Gb3JvIEFkbWluaXN0cmF0aW9uIEJhY2stRW5kIF09LQojCgojIFNraXAgdGhpcyBzZWN0aW9uIGZvciBwZXJmb3JtYW5jZSB1bmxlc3MgcmVxdWVzdGVkIGZpbGUgaXMgYWRtaW4ucGhwCgpTZWNSdWxlIFJFUVVFU1RfRklMRU5BTUUgIiFAZW5kc1dpdGggL2FkbWluLnBocCIgXAogICAgImlkOjkwMDY5MDAsXAogICAgcGhhc2U6MSxcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgc2tpcEFmdGVyOkVORC1YRU5GT1JPLUFETUlOIgoKU2VjUnVsZSBSRVFVRVNUX0ZJTEVOQU1FICIhQGVuZHNXaXRoIC9hZG1pbi5waHAiIFwKICAgICJpZDo5MDA2OTAxLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInLFwKICAgIHNraXBBZnRlcjpFTkQtWEVORk9STy1BRE1JTiIKCiMgQWRtaW4gZWRpdCB1c2VyCiMgUE9TVCAveGYvYWRtaW4ucGhwP3VzZXJzL3RoZS11c2VyLW5hbWUuMTIzNDUvZWRpdApTZWNSdWxlIFJFUVVFU1RfVVJJICJAcnggL2FkbWluXC5waHBcP3VzZXJzLy4qXC5cZCsvZWRpdCQiIFwKICAgICJpZDo5MDA2OTEwLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzpwcm9maWxlW2Fib3V0XSxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5SWQ9OTMxMTMwO0FSR1M6cHJvZmlsZVt3ZWJzaXRlXSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMiciCgojIEFkbWluIHNhdmUgdXNlcgojIFBPU1QgL3hmL2FkbWluLnBocD91c2Vycy90aGUtdXNlci1uYW1lLjEyMzQ1L3NhdmUKIyBSdW5zIGluIHBoYXNlIDEgdG8gYmUgYWJsZSB0byByZW1vdmUgcnVsZSAyMDAwMDMuClNlY1J1bGUgUkVRVUVTVF9VUkkgIkByeCAvYWRtaW5cLnBocFw/dXNlcnMvLipcLlxkKy9zYXZlJCIgXAogICAgImlkOjkwMDY5MjAsXAogICAgcGhhc2U6MSxcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICBjdGw6cnVsZVJlbW92ZUJ5SWQ9MjAwMDAzLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO0FSR1M6Y3VzdG9tX2ZpZWxkc1tvY2N1cGF0aW9uXSxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5VGFnPU9XQVNQX0NSUztBUkdTOmN1c3RvbV9maWVsZHNbcGVyc29uYWxfcXVvdGVdLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO0FSR1M6cHJvZmlsZVthYm91dF0sXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzpwcm9maWxlW3NpZ25hdHVyZV0sXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzpjdXN0b21fZmllbGRzW3NleHVhbGl0eV0sXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTkzMTEzMDtBUkdTOmN1c3RvbV9maWVsZHNbcGljdHVyZV0sXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTkzMTEzMDtBUkdTOnByb2ZpbGVbd2Vic2l0ZV0sXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInIgoKCiMgQWRtaW4gZWRpdCBmb3J1bSBub3RpY2UKIyBQT1NUIC94Zi9hZG1pbi5waHA/bm90aWNlcy8wL3NhdmUKIyBQT1NUIC94Zi9hZG1pbi5waHA/bm90aWNlcy9mb3J1bS1uYW1lLjEyMzQ1L3NhdmUKU2VjUnVsZSBSRVFVRVNUX1VSSSAiQHJ4IC9hZG1pblwucGhwXD9ub3RpY2VzLyg/Oi4qXC4pP1xkKy9zYXZlJCIgXAogICAgImlkOjkwMDY5MzAsXAogICAgcGhhc2U6MixcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5VGFnPU9XQVNQX0NSUztBUkdTOm1lc3NhZ2UsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzp0aXRsZSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMiciCgojIEFkbWluIGJhdGNoIHRocmVhZCB1cGRhdGUKIyBQT1NUIC94Zi9hZG1pbi5waHA/dGhyZWFkcy9iYXRjaC11cGRhdGUvYWN0aW9uClNlY1J1bGUgUkVRVUVTVF9VUkkgIkByeCAvYWRtaW5cLnBocFw/KD86dGhyZWFkc3x1c2VycykvYmF0Y2gtdXBkYXRlL2FjdGlvbiQiIFwKICAgICJpZDo5MDA2OTQwLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjIwMDtBUkdTOmNyaXRlcmlhLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDIyNjA7QVJHUzpjcml0ZXJpYSxcCiAgICBjdGw6cnVsZVJlbW92ZVRhcmdldEJ5SWQ9OTQyMzMwO0FSR1M6Y3JpdGVyaWEsXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjM0MDtBUkdTOmNyaXRlcmlhLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlJZD05NDIzNzA7QVJHUzpjcml0ZXJpYSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMiciCgojIEVkaXQgZm9ydW0gdGhlbWUKIyBQT1NUIC94Zi9hZG1pbi5waHA/c3R5bGVzL3RpdGxlLjEyMzQvc3R5bGUtcHJvcGVydGllcy9ncm91cCZncm91cD1iYXNpYwpTZWNSdWxlIFJFUVVFU1RfVVJJICJAcnggL2FkbWluXC5waHBcP3N0eWxlcy8iIFwKICAgICJpZDo5MDA2OTUwLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjIwMDtBUkdTOmpzb24sXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjI2MDtBUkdTOmpzb24sXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjMwMDtBUkdTOmpzb24sXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjMzMDtBUkdTOmpzb24sXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjM0MDtBUkdTOmpzb24sXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjM3MDtBUkdTOmpzb24sXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeUlkPTk0MjQ0MDtBUkdTOmpzb24sXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInIgoKIyBTZXQgZm9ydW0gb3B0aW9ucwojIFBPU1QgL3hmL2FkbWluLnBocD9vcHRpb25zL3VwZGF0ZQpTZWNSdWxlIFJFUVVFU1RfVVJJICJAcnggL2FkbWluXC5waHBcP29wdGlvbnMvdXBkYXRlIiBcCiAgICAiaWQ6OTAwNjk2MCxcCiAgICBwaGFzZToyLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIGN0bDpydWxlUmVtb3ZlVGFyZ2V0QnlUYWc9T1dBU1BfQ1JTO0FSR1M6b3B0aW9uc1tib2FyZEluYWN0aXZlTWVzc2FnZV0sXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInIgoKIyBFZGl0IHBhZ2VzL3RlbXBsYXRlcwojIFBPU1QgL3hmL2FkbWluLnBocD9wYWdlcy8wL3NhdmUKIyBQT1NUIC94Zi9hZG1pbi5waHA/cGFnZXMvZm9vLjEyMzQ1L3NhdmUKIyBQT1NUIC94Zi9hZG1pbi5waHA/dGVtcGxhdGVzL2Zvby4xMjM0L3NhdmUKU2VjUnVsZSBSRVFVRVNUX1VSSSAiQHJ4IC9hZG1pblwucGhwXD8oPzpwYWdlc3x0ZW1wbGF0ZXMpLy4qL3NhdmUiIFwKICAgICJpZDo5MDA2OTcwLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgY3RsOnJ1bGVSZW1vdmVUYXJnZXRCeVRhZz1PV0FTUF9DUlM7QVJHUzp0ZW1wbGF0ZSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMiciCgpTZWNNYXJrZXIgIkVORC1YRU5GT1JPLUFETUlOIgoKU2VjTWFya2VyICJFTkQtWEVORk9STyIK",
	"REQUEST-905-COMMON-EXCEPTIONS.conf":                   "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuMgojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgVGhlIE9XQVNQIE1vZFNlY3VyaXR5IENvcmUgUnVsZSBTZXQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIKIyBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAoQVNMKSB2ZXJzaW9uIDIKIyBQbGVhc2Ugc2VlIHRoZSBlbmNsb3NlZCBMSUNFTlNFIGZpbGUgZm9yIGZ1bGwgZGV0YWlscy4KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgojIFRoaXMgZmlsZSBpcyB1c2VkIGFzIGFuIGV4Y2VwdGlvbiBtZWNoYW5pc20gdG8gcmVtb3ZlIGNvbW1vbiBmYWxzZSBwb3NpdGl2ZXMKIyB0aGF0IG1heSBiZSBlbmNvdW50ZXJlZC4KIwojIEV4Y2VwdGlvbiBmb3IgQXBhY2hlIFNTTCBwaW5nZXIKIwpTZWNSdWxlIFJFUVVFU1RfTElORSAiQHN0cmVxIEdFVCAvIiBcCiAgICAiaWQ6OTA1MTAwLFwKICAgIHBoYXNlOjEsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1hcGFjaGUnLFwKICAgIHRhZzonYXR0YWNrLWdlbmVyaWMnLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyxcCiAgICBjaGFpbiIKICAgIFNlY1J1bGUgUkVNT1RFX0FERFIgIkBpcE1hdGNoIDEyNy4wLjAuMSw6OjEiIFwKICAgICAgICAidDpub25lLFwKICAgICAgICBjdGw6cnVsZUVuZ2luZT1PZmYsXAogICAgICAgIGN0bDphdWRpdEVuZ2luZT1PZmYiCgojCiMgRXhjZXB0aW9uIGZvciBBcGFjaGUgaW50ZXJuYWwgZHVtbXkgY29ubmVjdGlvbgojClNlY1J1bGUgUkVNT1RFX0FERFIgIkBpcE1hdGNoIDEyNy4wLjAuMSw6OjEiIFwKICAgICJpZDo5MDUxMTAsXAogICAgcGhhc2U6MSxcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLWFwYWNoZScsXAogICAgdGFnOidhdHRhY2stZ2VuZXJpYycsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInLFwKICAgIGNoYWluIgogICAgU2VjUnVsZSBSRVFVRVNUX0hFQURFUlM6VXNlci1BZ2VudCAiQGVuZHNXaXRoIChpbnRlcm5hbCBkdW1teSBjb25uZWN0aW9uKSIgXAogICAgICAgICJ0Om5vbmUsXAogICAgICAgIGNoYWluIgogICAgICAgIFNlY1J1bGUgUkVRVUVTVF9MSU5FICJAcnggXig/OkdFVCAvfE9QVElPTlMgXCopIEhUVFAvWzEyXVwuWzAxXSQiIFwKICAgICAgICAgICAgInQ6bm9uZSxcCiAgICAgICAgICAgIGN0bDpydWxlRW5naW5lPU9mZixcCiAgICAgICAgICAgIGN0bDphdWRpdEVuZ2luZT1PZmYiCg==",
	"REQUEST-910-IP-REPUTATION.conf":                       "",
	"REQUEST-911-METHOD-ENFORCEMENT.conf":                  "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuMgojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgVGhlIE9XQVNQIE1vZFNlY3VyaXR5IENvcmUgUnVsZSBTZXQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIKIyBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAoQVNMKSB2ZXJzaW9uIDIKIyBQbGVhc2Ugc2VlIHRoZSBlbmNsb3NlZCBMSUNFTlNFIGZpbGUgZm9yIGZ1bGwgZGV0YWlscy4KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAwIChlbXB0eSkgPS0gKGFwcGx5IHVuY29uZGl0aW9uYWxseSkKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDEiICJpZDo5MTEwMTEscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MTEtTUVUSE9ELUVORk9SQ0VNRU5UIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDEiICJpZDo5MTEwMTIscGhhc2U6MixwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MTEtTUVUSE9ELUVORk9SQ0VNRU5UIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMSAoZGVmYXVsdCkgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDEgb3IgaGlnaGVyKQojCgojCiMgLT1bIEFsbG93ZWQgUmVxdWVzdCBNZXRob2RzIF09LQojCiMgdHguYWxsb3dlZF9tZXRob2RzIGlzIGRlZmluZWQgaW4gdGhlIGNycy1zZXR1cC5jb25mIGZpbGUKIwpTZWNSdWxlIFJFUVVFU1RfTUVUSE9EICIhQHdpdGhpbiAle3R4LmFsbG93ZWRfbWV0aG9kc30iIFwKICAgICJpZDo5MTExMDAsXAogICAgcGhhc2U6MixcCiAgICBibG9jayxcCiAgICBtc2c6J01ldGhvZCBpcyBub3QgYWxsb3dlZCBieSBwb2xpY3knLFwKICAgIGxvZ2RhdGE6JyV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1nZW5lcmljJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzEnLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMjEwLzI3Mi8yMjAvMjc0JyxcCiAgICB0YWc6J1BDSS8xMi4xJyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgc2V2ZXJpdHk6J0NSSVRJQ0FMJyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyIKCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMiIgImlkOjkxMTAxMyxwaGFzZToxLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTkxMS1NRVRIT0QtRU5GT1JDRU1FTlQiClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMiIgImlkOjkxMTAxNCxwaGFzZToyLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTkxMS1NRVRIT0QtRU5GT1JDRU1FTlQiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAyID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAyIG9yIGhpZ2hlcikKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5MTEwMTUscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MTEtTUVUSE9ELUVORk9SQ0VNRU5UIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5MTEwMTYscGhhc2U6MixwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MTEtTUVUSE9ELUVORk9SQ0VNRU5UIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMyA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMyBvciBoaWdoZXIpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTExMDE3LHBoYXNlOjEscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTExLU1FVEhPRC1FTkZPUkNFTUVOVCIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTExMDE4LHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTExLU1FVEhPRC1FTkZPUkNFTUVOVCIKIwojIC09IFBhcmFub2lhIExldmVsIDQgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDQgb3IgaGlnaGVyKQojCgoKCiMKIyAtPSBQYXJhbm9pYSBMZXZlbHMgRmluaXNoZWQgPS0KIwpTZWNNYXJrZXIgIkVORC1SRVFVRVNULTkxMS1NRVRIT0QtRU5GT1JDRU1FTlQiCg==",
	"REQUEST-912-DOS-PROTECTION.conf":                      "",
	"REQUEST-913-SCANNER-DETECTION.conf":                   "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuMgojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgVGhlIE9XQVNQIE1vZFNlY3VyaXR5IENvcmUgUnVsZSBTZXQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIKIyBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAoQVNMKSB2ZXJzaW9uIDIKIyBQbGVhc2Ugc2VlIHRoZSBlbmNsb3NlZCBMSUNFTlNFIGZpbGUgZm9yIGZ1bGwgZGV0YWlscy4KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAwIChlbXB0eSkgPS0gKGFwcGx5IHVuY29uZGl0aW9uYWxseSkKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDEiICJpZDo5MTMwMTEscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MTMtU0NBTk5FUi1ERVRFQ1RJT04iClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMSIgImlkOjkxMzAxMixwaGFzZToyLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTkxMy1TQ0FOTkVSLURFVEVDVElPTiIKIwojIC09IFBhcmFub2lhIExldmVsIDEgKGRlZmF1bHQpID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAxIG9yIGhpZ2hlcikKIwoKIwojIC09WyBWdWxuZXJhYmlsaXR5IFNjYW5uZXIgQ2hlY2tzIF09LQojCiMgVGhlc2UgcnVsZXMgaW5zcGVjdCB0aGUgZGVmYXVsdCBVc2VyLUFnZW50IGFuZCBIZWFkZXIgdmFsdWVzIHNlbnQgYnkKIyB2YXJpb3VzIGNvbW1lcmNpYWwgYW5kIG9wZW4gc291cmNlIHZ1bG4gc2Nhbm5lcnMuCiMKIyBUaGUgZm9sbG93aW5nIHJ1bGVzIGNvbnRhaW4gVXNlci1BZ2VudCBsaXN0czoKIyA5MTMxMDAgLSBzZWN1cml0eSBzY2FubmVycyAoZGF0YSBmaWxlIHNjYW5uZXJzLXVzZXItYWdlbnRzLmRhdGEpCiMgOTEzMTAxIC0gc2NyaXB0aW5nL2dlbmVyaWMgSFRUUCBjbGllbnRzIChkYXRhIGZpbGUgc2NyaXB0aW5nLXVzZXItYWdlbnRzLmRhdGEpCiMgOTEzMTAyIC0gd2ViIGNyYXdsZXJzL2JvdHMgKGRhdGEgZmlsZSBjcmF3bGVycy11c2VyLWFnZW50cy5kYXRhKQojClNlY1J1bGUgUkVRVUVTVF9IRUFERVJTOlVzZXItQWdlbnQgIkBwbUZyb21GaWxlIHNjYW5uZXJzLXVzZXItYWdlbnRzLmRhdGEiIFwKICAgICJpZDo5MTMxMDAsXAogICAgcGhhc2U6MixcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSx0Omxvd2VyY2FzZSxcCiAgICBtc2c6J0ZvdW5kIFVzZXItQWdlbnQgYXNzb2NpYXRlZCB3aXRoIHNlY3VyaXR5IHNjYW5uZXInLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4wfSBmb3VuZCB3aXRoaW4gJXtNQVRDSEVEX1ZBUl9OQU1FfTogJXtNQVRDSEVEX1ZBUn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0tbXVsdGknLFwKICAgIHRhZzonYXR0YWNrLXJlcHV0YXRpb24tc2Nhbm5lcicsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8yMjQvNTQxLzMxMCcsXAogICAgdGFnOidQQ0kvNi41LjEwJyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgc2V2ZXJpdHk6J0NSSVRJQ0FMJyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICBzZXR2YXI6J2lwLnJlcHV0X2Jsb2NrX2ZsYWc9MScsXAogICAgc2V0dmFyOidpcC5yZXB1dF9ibG9ja19yZWFzb249JXtydWxlLm1zZ30nLFwKICAgIGV4cGlyZXZhcjonaXAucmVwdXRfYmxvY2tfZmxhZz0le3R4LnJlcHV0X2Jsb2NrX2R1cmF0aW9ufSciCgpTZWNSdWxlIFJFUVVFU1RfSEVBREVSU19OQU1FU3xSRVFVRVNUX0hFQURFUlMgIkBwbUZyb21GaWxlIHNjYW5uZXJzLWhlYWRlcnMuZGF0YSIgXAogICAgImlkOjkxMzExMCxcCiAgICBwaGFzZToyLFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLHQ6bG93ZXJjYXNlLFwKICAgIG1zZzonRm91bmQgcmVxdWVzdCBoZWFkZXIgYXNzb2NpYXRlZCB3aXRoIHNlY3VyaXR5IHNjYW5uZXInLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4wfSBmb3VuZCB3aXRoaW4gJXtNQVRDSEVEX1ZBUl9OQU1FfTogJXtNQVRDSEVEX1ZBUn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0tbXVsdGknLFwKICAgIHRhZzonYXR0YWNrLXJlcHV0YXRpb24tc2Nhbm5lcicsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8yMjQvNTQxLzMxMCcsXAogICAgdGFnOidQQ0kvNi41LjEwJyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgc2V2ZXJpdHk6J0NSSVRJQ0FMJyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICBzZXR2YXI6J2lwLnJlcHV0X2Jsb2NrX2ZsYWc9MScsXAogICAgc2V0dmFyOidpcC5yZXB1dF9ibG9ja19yZWFzb249JXtydWxlLm1zZ30nLFwKICAgIGV4cGlyZXZhcjonaXAucmVwdXRfYmxvY2tfZmxhZz0le3R4LnJlcHV0X2Jsb2NrX2R1cmF0aW9ufSciCgoKClNlY1J1bGUgUkVRVUVTVF9GSUxFTkFNRXxBUkdTICJAcG1Gcm9tRmlsZSBzY2FubmVycy11cmxzLmRhdGEiIFwKICAgICJpZDo5MTMxMjAsXAogICAgcGhhc2U6MixcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSx0Omxvd2VyY2FzZSxcCiAgICBtc2c6J0ZvdW5kIHJlcXVlc3QgZmlsZW5hbWUvYXJndW1lbnQgYXNzb2NpYXRlZCB3aXRoIHNlY3VyaXR5IHNjYW5uZXInLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4wfSBmb3VuZCB3aXRoaW4gJXtNQVRDSEVEX1ZBUl9OQU1FfTogJXtNQVRDSEVEX1ZBUn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0tbXVsdGknLFwKICAgIHRhZzonYXR0YWNrLXJlcHV0YXRpb24tc2Nhbm5lcicsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8yMjQvNTQxLzMxMCcsXAogICAgdGFnOidQQ0kvNi41LjEwJyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgc2V2ZXJpdHk6J0NSSVRJQ0FMJyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICBzZXR2YXI6J2lwLnJlcHV0X2Jsb2NrX2ZsYWc9MScsXAogICAgc2V0dmFyOidpcC5yZXB1dF9ibG9ja19yZWFzb249JXtydWxlLm1zZ30nLFwKICAgIGV4cGlyZXZhcjonaXAucmVwdXRfYmxvY2tfZmxhZz0le3R4LnJlcHV0X2Jsb2NrX2R1cmF0aW9ufSciCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAyIiAiaWQ6OTEzMDEzLHBoYXNlOjEscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTEzLVNDQU5ORVItREVURUNUSU9OIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5MTMwMTQscGhhc2U6MixwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MTMtU0NBTk5FUi1ERVRFQ1RJT04iCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAyID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAyIG9yIGhpZ2hlcikKIwoKCiMKIyAtPVsgU2NyaXB0aW5nL0dlbmVyaWMgVXNlci1BZ2VudHMgXT0tCiMKIyBUaGlzIHJ1bGUgZGV0ZWN0cyB1c2VyLWFnZW50cyBhc3NvY2lhdGVkIHdpdGggdmFyaW91cyBIVFRQIGNsaWVudCBsaWJyYXJpZXMKIyBhbmQgc2NyaXB0aW5nIGxhbmd1YWdlcy4gRGV0ZWN0aW9uIHN1Z2dlc3RzIGF0dGVtcHRlZCBhY2Nlc3MgYnkgc29tZQojIGF1dG9tYXRlZCB0b29sLgojCiMgVGhpcyBydWxlIGlzIGEgc2libGluZyBvZiBydWxlIDkxMzEwMC4KIwpTZWNSdWxlIFJFUVVFU1RfSEVBREVSUzpVc2VyLUFnZW50ICJAcG1Gcm9tRmlsZSBzY3JpcHRpbmctdXNlci1hZ2VudHMuZGF0YSIgXAogICAgImlkOjkxMzEwMSxcCiAgICBwaGFzZToyLFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLHQ6bG93ZXJjYXNlLFwKICAgIG1zZzonRm91bmQgVXNlci1BZ2VudCBhc3NvY2lhdGVkIHdpdGggc2NyaXB0aW5nL2dlbmVyaWMgSFRUUCBjbGllbnQnLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4wfSBmb3VuZCB3aXRoaW4gJXtNQVRDSEVEX1ZBUl9OQU1FfTogJXtNQVRDSEVEX1ZBUn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0tbXVsdGknLFwKICAgIHRhZzonYXR0YWNrLXJlcHV0YXRpb24tc2NyaXB0aW5nJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8yMjQvNTQxLzMxMCcsXAogICAgdGFnOidQQ0kvNi41LjEwJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzInLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDI9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgIHNldHZhcjonaXAucmVwdXRfYmxvY2tfZmxhZz0xJyxcCiAgICBzZXR2YXI6J2lwLnJlcHV0X2Jsb2NrX3JlYXNvbj0le3J1bGUubXNnfScsXAogICAgZXhwaXJldmFyOidpcC5yZXB1dF9ibG9ja19mbGFnPSV7dHgucmVwdXRfYmxvY2tfZHVyYXRpb259JyIKCgoKIwojIC09WyBDcmF3bGVyIFVzZXItQWdlbnRzIF09LQojCiMgVGhpcyBydWxlIGRldGVjdHMgdXNlci1hZ2VudHMgYXNzb2NpYXRlZCB3aXRoIHZhcmlvdXMgY3Jhd2xlcnMsIFNFTyB0b29scywKIyBhbmQgYm90cywgd2hpY2ggaGF2ZSBiZWVuIHJlcG9ydGVkIHRvIHBvdGVudGlhbGx5IG1pc2JlaGF2ZS4KIyBUaGVzZSBjcmF3bGVycyBjYW4gaGF2ZSBsZWdpdGltYXRlIHVzZXMgd2hlbiB1c2VkIHdpdGggYXV0aG9yaXphdGlvbi4KIwojIFRoaXMgcnVsZSBpcyBhIHNpYmxpbmcgb2YgcnVsZSA5MTMxMDAuCiMKU2VjUnVsZSBSRVFVRVNUX0hFQURFUlM6VXNlci1BZ2VudCAiQHBtRnJvbUZpbGUgY3Jhd2xlcnMtdXNlci1hZ2VudHMuZGF0YSIgXAogICAgImlkOjkxMzEwMixcCiAgICBwaGFzZToyLFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLHQ6bG93ZXJjYXNlLFwKICAgIG1zZzonRm91bmQgVXNlci1BZ2VudCBhc3NvY2lhdGVkIHdpdGggd2ViIGNyYXdsZXIvYm90JyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1yZXB1dGF0aW9uLWNyYXdsZXInLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMTE4LzIyNC81NDEvMzEwJyxcCiAgICB0YWc6J1BDSS82LjUuMTAnLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMicsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInLFwKICAgIHNldmVyaXR5OidDUklUSUNBTCcsXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMj0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgc2V0dmFyOidpcC5yZXB1dF9ibG9ja19mbGFnPTEnLFwKICAgIHNldHZhcjonaXAucmVwdXRfYmxvY2tfcmVhc29uPSV7cnVsZS5tc2d9JyxcCiAgICBleHBpcmV2YXI6J2lwLnJlcHV0X2Jsb2NrX2ZsYWc9JXt0eC5yZXB1dF9ibG9ja19kdXJhdGlvbn0nIgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMyIgImlkOjkxMzAxNSxwaGFzZToxLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTkxMy1TQ0FOTkVSLURFVEVDVElPTiIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAzIiAiaWQ6OTEzMDE2LHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTEzLVNDQU5ORVItREVURUNUSU9OIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMyA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMyBvciBoaWdoZXIpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTEzMDE3LHBoYXNlOjEscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTEzLVNDQU5ORVItREVURUNUSU9OIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDQiICJpZDo5MTMwMTgscGhhc2U6MixwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MTMtU0NBTk5FUi1ERVRFQ1RJT04iCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCA0ID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiA0IG9yIGhpZ2hlcikKIwoKCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWxzIEZpbmlzaGVkID0tCiMKU2VjTWFya2VyICJFTkQtUkVRVUVTVC05MTMtU0NBTk5FUi1ERVRFQ1RJT04iCg==",
	"REQUEST-920-PROTOCOL-ENFORCEMENT.conf":                "",
	"REQUEST-921-PROTOCOL-ATTACK.conf":                     "",
	"REQUEST-930-APPLICATION-ATTACK-LFI.conf":              "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuMgojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgVGhlIE9XQVNQIE1vZFNlY3VyaXR5IENvcmUgUnVsZSBTZXQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIKIyBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAoQVNMKSB2ZXJzaW9uIDIKIyBQbGVhc2Ugc2VlIHRoZSBlbmNsb3NlZCBMSUNFTlNFIGZpbGUgZm9yIGZ1bGwgZGV0YWlscy4KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAwIChlbXB0eSkgPS0gKGFwcGx5IHVuY29uZGl0aW9uYWxseSkKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDEiICJpZDo5MzAwMTEscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MzAtQVBQTElDQVRJT04tQVRUQUNLLUxGSSIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTMwMDEyLHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTMwLUFQUExJQ0FUSU9OLUFUVEFDSy1MRkkiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAxIChkZWZhdWx0KSA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMSBvciBoaWdoZXIpCiMKCiMKIyAtPVsgRGlyZWN0b3J5IFRyYXZlcnNhbCBBdHRhY2tzIF09LQojCiMgUmVmOiBodHRwczovL2dpdGh1Yi5jb20vd2lyZWdob3VsL2RvdGRvdHB3bgojCiMgWyBFbmNvZGVkIC8uLi8gUGF5bG9hZHMgXQojClNlY1J1bGUgUkVRVUVTVF9VUklfUkFXfEFSR1N8UkVRVUVTVF9IRUFERVJTfCFSRVFVRVNUX0hFQURFUlM6UmVmZXJlcnxYTUw6LyogIkByeCAoP2kpKD86XHg1Y3woPzolKD86Yyg/OjAlKD86WzJhcV1mfDVjfDl2KXwxJSg/OlsxOXBdY3w4c3xhZikpfDIoPzo1KD86Yyg/OjAlMjVhZnwxJTI1OWMpfDJmfDVjKXwlNDZ8Zil8KD86KD86Zig/OjglOCk/MCU4fGUpMCU4MCVhfGJnJXEpZnwlMyg/OjIoPzolKD86JTZ8NCk2fEYpfDUlJTYzKXx1KD86MjIxWzU2XXwwMDJmfEVGQzh8RjAyNSl8MXV8NWMpfDB4KD86MmZ8NWMpfFwvKSkoPzolKD86KD86Zig/Oig/OmMlODB8OCklOCk/MCU4fGUpMCU4MCVhZXwyKD86KD86NSg/OmMwJTI1YXwyKSk/ZXwlNDUpfHUoPzooPzowMDJ8ZmYwKWV8MjAyNCl8JTMyKD86JSg/OiU2fDQpNXxFKXxjMCg/OiVbMjU2YWVmXWV8XC4pKXxcLig/OiUwWzAxXXxcPyk/fFw/XC4/fDB4MmUpezJ9KD86XHg1Y3woPzolKD86Yyg/OjAlKD86WzJhcV1mfDVjfDl2KXwxJSg/OlsxOXBdY3w4c3xhZikpfDIoPzo1KD86Yyg/OjAlMjVhZnwxJTI1OWMpfDJmfDVjKXwlNDZ8Zil8KD86KD86Zig/OjglOCk/MCU4fGUpMCU4MCVhfGJnJXEpZnwlMyg/OjIoPzolKD86JTZ8NCk2fEYpfDUlJTYzKXx1KD86MjIxWzU2XXwwMDJmfEVGQzh8RjAyNSl8MXV8NWMpfDB4KD86MmZ8NWMpfFwvKSkiIFwKICAgICJpZDo5MzAxMDAsXAogICAgcGhhc2U6MixcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J1BhdGggVHJhdmVyc2FsIEF0dGFjayAoLy4uLyknLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4wfSBmb3VuZCB3aXRoaW4gJXtNQVRDSEVEX1ZBUl9OQU1FfTogJXtNQVRDSEVEX1ZBUn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0tbXVsdGknLFwKICAgIHRhZzonYXR0YWNrLWxmaScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzI1NS8xNTMvMTI2JyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgc2V2ZXJpdHk6J0NSSVRJQ0FMJyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICBzZXR2YXI6J3R4LmxmaV9zY29yZT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfSciCgojCiMgWyBEZWNvZGVkIC8uLi8gUGF5bG9hZHMgXQojClNlY1J1bGUgUkVRVUVTVF9VUkl8QVJHU3xSRVFVRVNUX0hFQURFUlN8IVJFUVVFU1RfSEVBREVSUzpSZWZlcmVyfFhNTDovKiAiQHJ4ICg/Ol58W1xcL10pXC5cLig/OltcXC9dfCQpIiBcCiAgICAiaWQ6OTMwMTEwLFwKICAgIHBoYXNlOjIsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsdDp1dGY4dG9Vbmljb2RlLHQ6dXJsRGVjb2RlVW5pLHQ6cmVtb3ZlTnVsbHMsdDpjbWRMaW5lLFwKICAgIG1zZzonUGF0aCBUcmF2ZXJzYWwgQXR0YWNrICgvLi4vKScsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1tdWx0aScsXAogICAgdGFnOidhdHRhY2stbGZpJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzEnLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMjU1LzE1My8xMjYnLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIG11bHRpTWF0Y2gsXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgc2V0dmFyOid0eC5sZmlfc2NvcmU9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nIgoKIwojIC09WyBPUyBGaWxlIEFjY2VzcyBdPS0KIwojIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL2xpZ2h0b3MvUGFub3B0aWMvYmxvYi9tYXN0ZXIvY2FzZXMueG1sCiMKU2VjUnVsZSBSRVFVRVNUX0NPT0tJRVN8IVJFUVVFU1RfQ09PS0lFUzovX191dG0vfFJFUVVFU1RfQ09PS0lFU19OQU1FU3xBUkdTX05BTUVTfEFSR1N8WE1MOi8qICJAcG1Gcm9tRmlsZSBsZmktb3MtZmlsZXMuZGF0YSIgXAogICAgImlkOjkzMDEyMCxcCiAgICBwaGFzZToyLFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLHQ6dXRmOHRvVW5pY29kZSx0OnVybERlY29kZVVuaSx0Om5vcm1hbGl6ZVBhdGhXaW4sdDpsb3dlcmNhc2UsXAogICAgbXNnOidPUyBGaWxlIEFjY2VzcyBBdHRlbXB0JyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1sZmknLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8yNTUvMTUzLzEyNicsXAogICAgdGFnOidQQ0kvNi41LjQnLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIHNldHZhcjondHgubGZpX3Njb3JlPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyIKCiMKIyAtPVsgUmVzdHJpY3RlZCBGaWxlIEFjY2VzcyBdPS0KIwojIERldGVjdHMgYXR0ZW1wdHMgdG8gcmV0cmlldmUgYXBwbGljYXRpb24gc291cmNlIGNvZGUsIG1ldGFkYXRhLAojIGNyZWRlbnRpYWxzIGFuZCB2ZXJzaW9uIGNvbnRyb2wgaGlzdG9yeSBwb3NzaWJseSByZWFjaGFibGUgaW4gYSB3ZWIgcm9vdC4KIwpTZWNSdWxlIFJFUVVFU1RfRklMRU5BTUUgIkBwbUZyb21GaWxlIHJlc3RyaWN0ZWQtZmlsZXMuZGF0YSIgXAogICAgImlkOjkzMDEzMCxcCiAgICBwaGFzZToyLFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLHQ6dXRmOHRvVW5pY29kZSx0OnVybERlY29kZVVuaSx0Om5vcm1hbGl6ZVBhdGhXaW4sdDpsb3dlcmNhc2UsXAogICAgbXNnOidSZXN0cmljdGVkIEZpbGUgQWNjZXNzIEF0dGVtcHQnLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4wfSBmb3VuZCB3aXRoaW4gJXtNQVRDSEVEX1ZBUl9OQU1FfTogJXtNQVRDSEVEX1ZBUn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0tbXVsdGknLFwKICAgIHRhZzonYXR0YWNrLWxmaScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzI1NS8xNTMvMTI2JyxcCiAgICB0YWc6J1BDSS82LjUuNCcsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInLFwKICAgIHNldmVyaXR5OidDUklUSUNBTCcsXAogICAgc2V0dmFyOid0eC5sZmlfc2NvcmU9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nIgoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5MzAwMTMscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MzAtQVBQTElDQVRJT04tQVRUQUNLLUxGSSIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAyIiAiaWQ6OTMwMDE0LHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTMwLUFQUExJQ0FUSU9OLUFUVEFDSy1MRkkiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAyID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAyIG9yIGhpZ2hlcikKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5MzAwMTUscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MzAtQVBQTElDQVRJT04tQVRUQUNLLUxGSSIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAzIiAiaWQ6OTMwMDE2LHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTMwLUFQUExJQ0FUSU9OLUFUVEFDSy1MRkkiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAzID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAzIG9yIGhpZ2hlcikKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDQiICJpZDo5MzAwMTcscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MzAtQVBQTElDQVRJT04tQVRUQUNLLUxGSSIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTMwMDE4LHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTMwLUFQUExJQ0FUSU9OLUFUVEFDSy1MRkkiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCA0ID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiA0IG9yIGhpZ2hlcikKIwoKCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWxzIEZpbmlzaGVkID0tCiMKU2VjTWFya2VyICJFTkQtUkVRVUVTVC05MzAtQVBQTElDQVRJT04tQVRUQUNLLUxGSSIK",
	"REQUEST-931-APPLICATION-ATTACK-RFI.conf":              "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuMgojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgVGhlIE9XQVNQIE1vZFNlY3VyaXR5IENvcmUgUnVsZSBTZXQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIKIyBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAoQVNMKSB2ZXJzaW9uIDIKIyBQbGVhc2Ugc2VlIHRoZSBlbmNsb3NlZCBMSUNFTlNFIGZpbGUgZm9yIGZ1bGwgZGV0YWlscy4KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIwojIFJGSSBBdHRhY2tzCiMKCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAwIChlbXB0eSkgPS0gKGFwcGx5IHVuY29uZGl0aW9uYWxseSkKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDEiICJpZDo5MzEwMTEscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MzEtQVBQTElDQVRJT04tQVRUQUNLLVJGSSIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTMxMDEyLHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTMxLUFQUExJQ0FUSU9OLUFUVEFDSy1SRkkiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAxIChkZWZhdWx0KSA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMSBvciBoaWdoZXIpCiMKCiMgLT1bIFJ1bGUgTG9naWMgXT0tCiMgVGhlc2UgcnVsZXMgbG9vayBmb3IgY29tbW9uIHR5cGVzIG9mIFJlbW90ZSBGaWxlIEluY2x1c2lvbiAoUkZJKSBhdHRhY2sgbWV0aG9kcy4KIwktIFVSTCBDb250YWlucyBhbiBJUCBBZGRyZXNzCiMJLSBUaGUgUEhQICJpbmNsdWRlKCkiIEZ1bmN0aW9uCiMJLSBSRkkgRGF0YSBFbmRzIHdpdGggUXVlc3Rpb24gTWFyayhzKSAoPykKIwktIFJGSSBIb3N0IERvZXNuJ3QgTWF0Y2ggTG9jYWwgSG9zdAojCiMgLT1bIFJlZmVyZW5jZXMgXT0tCiMgaHR0cDovL3Byb2plY3RzLndlYmFwcHNlYy5vcmcvUmVtb3RlLUZpbGUtSW5jbHVzaW9uCiMgaHR0cDovL3RhY3RpY2Fsd2ViYXBwc2VjLmJsb2dzcG90LmNvbS8yMDA5LzA2L2dlbmVyaWMtcmVtb3RlLWZpbGUtaW5jbHVzaW9uLWF0dGFjay5odG1sCiMKU2VjUnVsZSBBUkdTICJAcnggXig/aTpmaWxlfGZ0cHM/fGh0dHBzPyk6XC9cLyg/OlxkezEsM31cLlxkezEsM31cLlxkezEsM31cLlxkezEsM30pIiBcCiAgICAiaWQ6OTMxMTAwLFwKICAgIHBoYXNlOjIsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidQb3NzaWJsZSBSZW1vdGUgRmlsZSBJbmNsdXNpb24gKFJGSSkgQXR0YWNrOiBVUkwgUGFyYW1ldGVyIHVzaW5nIElQIEFkZHJlc3MnLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4wfSBmb3VuZCB3aXRoaW4gJXtNQVRDSEVEX1ZBUl9OQU1FfTogJXtNQVRDSEVEX1ZBUn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0tbXVsdGknLFwKICAgIHRhZzonYXR0YWNrLXJmaScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzE1Mi8xNzUvMjUzJyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgc2V2ZXJpdHk6J0NSSVRJQ0FMJyxcCiAgICBzZXR2YXI6J3R4LnJmaV9zY29yZT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfSciCgpTZWNSdWxlIFFVRVJZX1NUUklOR3xSRVFVRVNUX0JPRFkgIkByeCAoP2kpKD86XGJpbmNsdWRlXHMqXChbXildKnxtb3NDb25maWdfYWJzb2x1dGVfcGF0aHxfQ09ORlxbcGF0aFxdfF9TRVJWRVJcW0RPQ1VNRU5UX1JPT1RcXXxHQUxMRVJZX0JBU0VESVJ8cGF0aFxbZG9jcm9vdFxdfGFwcHNlcnZfcm9vdHxjb25maWdcW3Jvb3RfZGlyXF0pPSg/OmZpbGV8ZnRwcz98aHR0cHM/KTpcL1wvIiBcCiAgICAiaWQ6OTMxMTEwLFwKICAgIHBoYXNlOjIsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsdDp1cmxEZWNvZGVVbmksXAogICAgbXNnOidQb3NzaWJsZSBSZW1vdGUgRmlsZSBJbmNsdXNpb24gKFJGSSkgQXR0YWNrOiBDb21tb24gUkZJIFZ1bG5lcmFibGUgUGFyYW1ldGVyIE5hbWUgdXNlZCB3L1VSTCBQYXlsb2FkJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1yZmknLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8xNTIvMTc1LzI1MycsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInLFwKICAgIHNldmVyaXR5OidDUklUSUNBTCcsXAogICAgc2V0dmFyOid0eC5yZmlfc2NvcmU9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nIgoKU2VjUnVsZSBBUkdTICJAcnggXig/aTpmaWxlfGZ0cHM/fGh0dHBzPykuKj9cPyskIiBcCiAgICAiaWQ6OTMxMTIwLFwKICAgIHBoYXNlOjIsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidQb3NzaWJsZSBSZW1vdGUgRmlsZSBJbmNsdXNpb24gKFJGSSkgQXR0YWNrOiBVUkwgUGF5bG9hZCBVc2VkIHcvVHJhaWxpbmcgUXVlc3Rpb24gTWFyayBDaGFyYWN0ZXIgKD8pJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1yZmknLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8xNTIvMTc1LzI1MycsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInLFwKICAgIHNldmVyaXR5OidDUklUSUNBTCcsXAogICAgc2V0dmFyOid0eC5yZmlfc2NvcmU9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nIgoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5MzEwMTMscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MzEtQVBQTElDQVRJT04tQVRUQUNLLVJGSSIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAyIiAiaWQ6OTMxMDE0LHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTMxLUFQUExJQ0FUSU9OLUFUVEFDSy1SRkkiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAyID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAyIG9yIGhpZ2hlcikKIwoKU2VjUnVsZSBBUkdTICJAcnggXig/aTpmaWxlfGZ0cHM/fGh0dHBzPyk6Ly8oW14vXSopLiokIiBcCiAgICAiaWQ6OTMxMTMwLFwKICAgIHBoYXNlOjIsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidQb3NzaWJsZSBSZW1vdGUgRmlsZSBJbmNsdXNpb24gKFJGSSkgQXR0YWNrOiBPZmYtRG9tYWluIFJlZmVyZW5jZS9MaW5rJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1yZmknLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMTUyLzE3NS8yNTMnLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMicsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInLFwKICAgIHNldmVyaXR5OidDUklUSUNBTCcsXAogICAgc2V0dmFyOid0eC5yZmlfcGFyYW1ldGVyXyV7TUFUQ0hFRF9WQVJfTkFNRX09LiV7dHguMX0nLFwKICAgIGNoYWluIgogICAgU2VjUnVsZSBUWDovcmZpX3BhcmFtZXRlcl8uKi8gIiFAZW5kc1dpdGggLiV7cmVxdWVzdF9oZWFkZXJzLmhvc3R9IiBcCiAgICAgICAgInNldHZhcjondHgucmZpX3Njb3JlPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICAgICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMj0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfSciCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMyIgImlkOjkzMTAxNSxwaGFzZToxLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTkzMS1BUFBMSUNBVElPTi1BVFRBQ0stUkZJIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5MzEwMTYscGhhc2U6MixwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MzEtQVBQTElDQVRJT04tQVRUQUNLLVJGSSIKIwojIC09IFBhcmFub2lhIExldmVsIDMgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDMgb3IgaGlnaGVyKQojCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgNCIgImlkOjkzMTAxNyxwaGFzZToxLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTkzMS1BUFBMSUNBVElPTi1BVFRBQ0stUkZJIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDQiICJpZDo5MzEwMTgscGhhc2U6MixwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MzEtQVBQTElDQVRJT04tQVRUQUNLLVJGSSIKIwojIC09IFBhcmFub2lhIExldmVsIDQgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDQgb3IgaGlnaGVyKQojCgoKCiMKIyAtPSBQYXJhbm9pYSBMZXZlbHMgRmluaXNoZWQgPS0KIwpTZWNNYXJrZXIgIkVORC1SRVFVRVNULTkzMS1BUFBMSUNBVElPTi1BVFRBQ0stUkZJIgo=",
	"REQUEST-932-APPLICATION-ATTACK-RCE.conf":              "",
	"REQUEST-933-APPLICATION-ATTACK-PHP.conf":              "",
	"REQUEST-934-APPLICATION-ATTACK-NODEJS.conf":           "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuMgojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgVGhlIE9XQVNQIE1vZFNlY3VyaXR5IENvcmUgUnVsZSBTZXQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIKIyBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAoQVNMKSB2ZXJzaW9uIDIKIyBQbGVhc2Ugc2VlIHRoZSBlbmNsb3NlZCBMSUNFTlNFIGZpbGUgZm9yIGZ1bGwgZGV0YWlscy4KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAwIChlbXB0eSkgPS0gKGFwcGx5IHVuY29uZGl0aW9uYWxseSkKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDEiICJpZDo5MzQwMTEscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MzQtQVBQTElDQVRJT04tQVRUQUNLLU5PREVKUyIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTM0MDEyLHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTM0LUFQUExJQ0FUSU9OLUFUVEFDSy1OT0RFSlMiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAxIChkZWZhdWx0KSA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMSBvciBoaWdoZXIpCiMKCgojIFsgSW5zZWN1cmUgdW5zZXJpYWxpemF0aW9uIC8gZ2VuZXJpYyBSQ0Ugc2lnbmF0dXJlcyBdCiMKIyBMaWJyYXJpZXMgcGVyZm9ybWluZyBpbnNlY3VyZSB1bnNlcmlhbGl6YXRpb246CiMgLSBub2RlLXNlcmlhbGl6ZTogXyQkTkRfRlVOQyQkXyAoQ1ZFLTIwMTctNTk0MSkKIyAtIGZ1bmNzdGVyOiBfX2pzX2Z1bmN0aW9uCiMKIyBTZWU6CiMgaHR0cHM6Ly9vcHNlY3guY29tL2luZGV4LnBocC8yMDE3LzAyLzA4L2V4cGxvaXRpbmctbm9kZS1qcy1kZXNlcmlhbGl6YXRpb24tYnVnLWZvci1yZW1vdGUtY29kZS1leGVjdXRpb24vCiMgaHR0cHM6Ly93d3cuYWN1bmV0aXguY29tL2Jsb2cvd2ViLXNlY3VyaXR5LXpvbmUvZGVzZXJpYWxpemF0aW9uLXZ1bG5lcmFiaWxpdGllcy1hdHRhY2tpbmctZGVzZXJpYWxpemF0aW9uLWluLWpzLwojCiMgU29tZSBnZW5lcmljIHNuaXBwZXRzIHVzZWQ6CiMgLSBmdW5jdGlvbigpIHsKIyAtIG5ldyBGdW5jdGlvbigKIyAtIGV2YWwoCiMgLSBTdHJpbmcuZnJvbUNoYXJDb2RlKAojCiMgTGFzdCB0d28gYXJlIHVzZWQgYnkgbm9kZWpzc2hlbGwucHksCiMgaHR0cHM6Ly9naXRodWIuY29tL2FqaW5hYnJhaGFtL05vZGUuSnMtU2VjdXJpdHktQ291cnNlL2Jsb2IvbWFzdGVyL25vZGVqc3NoZWxsLnB5CiMKIyBBcyBiYXNlNjQgaXMgc29tZXRpbWVzIChidXQgbm90IGFsd2F5cykgdXNlZCB0byBlbmNvZGUgc2VyaWFsaXplZCB2YWx1ZXMsCiMgdXNlIG11bHRpTWF0Y2ggYW5kIHQ6YmFzZTY0ZGVjb2RlLgojCiMgUmVnZXhwIGdlbmVyYXRlZCBmcm9tIHV0aWwvcmVnZXhwLWFzc2VtYmxlL3JlZ2V4cC05MzQxMDAuZGF0YSB1c2luZyBSZWdleHA6OkFzc2VtYmxlLgojIFNlZSBodHRwczovL2NvcmVydWxlc2V0Lm9yZy8yMDE5MDgyNi9vcHRpbWl6aW5nLXJlZ3VsYXItZXhwcmVzc2lvbnMvIGZvciB1c2FnZS4KClNlY1J1bGUgUkVRVUVTVF9DT09LSUVTfCFSRVFVRVNUX0NPT0tJRVM6L19fdXRtL3xSRVFVRVNUX0NPT0tJRVNfTkFNRVN8QVJHU19OQU1FU3xBUkdTfFhNTDovKiAiQHJ4ICg/Oig/Ol8oPzpcJFwkTkRfRlVOQ1wkXCRffF9qc19mdW5jdGlvbil8KD86bmV3XHMrRnVuY3Rpb258XGJldmFsKVxzKlwofFN0cmluZ1xzKlwuXHMqZnJvbUNoYXJDb2RlfGZ1bmN0aW9uXHMqXChccypcKVxzKnt8dGhpc1wuY29uc3RydWN0b3IpfG1vZHVsZVwuZXhwb3J0c1xzKj0pIiBcCiAgICAiaWQ6OTM0MTAwLFwKICAgIHBoYXNlOjIsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsdDp1cmxEZWNvZGVVbmksdDpiYXNlNjREZWNvZGUsXAogICAgbXNnOidOb2RlLmpzIEluamVjdGlvbiBBdHRhY2snLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4wfSBmb3VuZCB3aXRoaW4gJXtNQVRDSEVEX1ZBUl9OQU1FfTogJXtNQVRDSEVEX1ZBUn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtamF2YXNjcmlwdCcsXAogICAgdGFnOidwbGF0Zm9ybS1tdWx0aScsXAogICAgdGFnOidhdHRhY2stcmNlJyxcCiAgICB0YWc6J2F0dGFjay1pbmplY3Rpb24tbm9kZWpzJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzEnLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMTUyLzI0MicsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInLFwKICAgIHNldmVyaXR5OidDUklUSUNBTCcsXAogICAgbXVsdGlNYXRjaCxcCiAgICBzZXR2YXI6J3R4LnJjZV9zY29yZT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfSciCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAyIiAiaWQ6OTM0MDEzLHBoYXNlOjEscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTM0LUFQUExJQ0FUSU9OLUFUVEFDSy1OT0RFSlMiClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMiIgImlkOjkzNDAxNCxwaGFzZToyLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTkzNC1BUFBMSUNBVElPTi1BVFRBQ0stTk9ERUpTIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMiA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMiBvciBoaWdoZXIpCiMKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMyIgImlkOjkzNDAxNSxwaGFzZToxLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTkzNC1BUFBMSUNBVElPTi1BVFRBQ0stTk9ERUpTIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5MzQwMTYscGhhc2U6MixwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MzQtQVBQTElDQVRJT04tQVRUQUNLLU5PREVKUyIKIwojIC09IFBhcmFub2lhIExldmVsIDMgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDMgb3IgaGlnaGVyKQojCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDQiICJpZDo5MzQwMTcscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MzQtQVBQTElDQVRJT04tQVRUQUNLLU5PREVKUyIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTM0MDE4LHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTM0LUFQUExJQ0FUSU9OLUFUVEFDSy1OT0RFSlMiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCA0ID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiA0IG9yIGhpZ2hlcikKIwoKCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWxzIEZpbmlzaGVkID0tCiMKU2VjTWFya2VyICJFTkQtUkVRVUVTVC05MzQtQVBQTElDQVRJT04tQVRUQUNLLU5PREVKUyIK",
	"REQUEST-941-APPLICATION-ATTACK-XSS.conf":              "",
	"REQUEST-942-APPLICATION-ATTACK-SQLI.conf":             "",
	"REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION.conf": "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuMgojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgVGhlIE9XQVNQIE1vZFNlY3VyaXR5IENvcmUgUnVsZSBTZXQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIKIyBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAoQVNMKSB2ZXJzaW9uIDIKIyBQbGVhc2Ugc2VlIHRoZSBlbmNsb3NlZCBMSUNFTlNFIGZpbGUgZm9yIGZ1bGwgZGV0YWlscy4KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAwIChlbXB0eSkgPS0gKGFwcGx5IHVuY29uZGl0aW9uYWxseSkKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDEiICJpZDo5NDMwMTEscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05NDMtQVBQTElDQVRJT04tQVRUQUNLLVNFU1NJT04tRklYQVRJT04iClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMSIgImlkOjk0MzAxMixwaGFzZToyLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTk0My1BUFBMSUNBVElPTi1BVFRBQ0stU0VTU0lPTi1GSVhBVElPTiIKIwojIC09IFBhcmFub2lhIExldmVsIDEgKGRlZmF1bHQpID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAxIG9yIGhpZ2hlcikKIwoKIwojIFNlc3Npb24gZml4YXRpb24KIwojIC09WyBSZWZlcmVuY2VzIF09LQojIGh0dHA6Ly9wcm9qZWN0cy53ZWJhcHBzZWMub3JnL1Nlc3Npb24tRml4YXRpb24KIyBodHRwOi8vcHJvamVjdHMud2ViYXBwc2VjLm9yZy93L3BhZ2UvMTMyNDY5NjAvU2Vzc2lvbiUyMEZpeGF0aW9uCiMgaHR0cDovL2NhcGVjLm1pdHJlLm9yZy9kYXRhL2RlZmluaXRpb25zLzYxLmh0bWwKIwpTZWNSdWxlIFJFUVVFU1RfQ09PS0lFU3whUkVRVUVTVF9DT09LSUVTOi9fX3V0bS98UkVRVUVTVF9DT09LSUVTX05BTUVTfEFSR1NfTkFNRVN8QVJHU3xYTUw6LyogIkByeCAoP2k6XC5jb29raWVcYi4qPztcVyo/KD86ZXhwaXJlc3xkb21haW4pXFcqPz18XGJodHRwLWVxdWl2XFcrc2V0LWNvb2tpZVxiKSIgXAogICAgImlkOjk0MzEwMCxcCiAgICBwaGFzZToyLFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLHQ6dXJsRGVjb2RlVW5pLFwKICAgIG1zZzonUG9zc2libGUgU2Vzc2lvbiBGaXhhdGlvbiBBdHRhY2s6IFNldHRpbmcgQ29va2llIFZhbHVlcyBpbiBIVE1MJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1maXhhdGlvbicsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzIyNS8yMS81OTMvNjEnLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIHNldHZhcjondHguc2Vzc2lvbl9maXhhdGlvbl9zY29yZT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfSciCgoKU2VjUnVsZSBBUkdTX05BTUVTICJAcnggXig/OmpzZXNzaW9uaWR8YXNwc2Vzc2lvbmlkfGFzcFwubmV0X3Nlc3Npb25pZHxwaHBzZXNzaW9ufHBocHNlc3NpZHx3ZWJsb2dpY3Nlc3Npb258c2Vzc2lvbl9pZHxzZXNzaW9uLWlkfGNmaWR8Y2Z0b2tlbnxjZnNpZHxqc2VydnNlc3Npb258andzZXNzaW9uKSQiIFwKICAgICJpZDo5NDMxMTAsXAogICAgcGhhc2U6MixcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSx0OnVybERlY29kZVVuaSx0Omxvd2VyY2FzZSxcCiAgICBtc2c6J1Bvc3NpYmxlIFNlc3Npb24gRml4YXRpb24gQXR0YWNrOiBTZXNzaW9uSUQgUGFyYW1ldGVyIE5hbWUgd2l0aCBPZmYtRG9tYWluIFJlZmVyZXInLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4wfSBmb3VuZCB3aXRoaW4gJXtNQVRDSEVEX1ZBUl9OQU1FfTogJXtNQVRDSEVEX1ZBUn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0tbXVsdGknLFwKICAgIHRhZzonYXR0YWNrLWZpeGF0aW9uJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzEnLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMjI1LzIxLzU5My82MScsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInLFwKICAgIHNldmVyaXR5OidDUklUSUNBTCcsXAogICAgY2hhaW4iCiAgICBTZWNSdWxlIFJFUVVFU1RfSEVBREVSUzpSZWZlcmVyICJAcnggXig/Omh0fGYpdHBzPzovLyguKj8pXC8iIFwKICAgICAgICAiY2FwdHVyZSxcCiAgICAgICAgY2hhaW4iCiAgICAgICAgU2VjUnVsZSBUWDoxICIhQGVuZHNXaXRoICV7cmVxdWVzdF9oZWFkZXJzLmhvc3R9IiBcCiAgICAgICAgICAgICJzZXR2YXI6J3R4LnNlc3Npb25fZml4YXRpb25fc2NvcmU9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgICAgICAgICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfSciCgoKU2VjUnVsZSBBUkdTX05BTUVTICJAcnggXig/OmpzZXNzaW9uaWR8YXNwc2Vzc2lvbmlkfGFzcFwubmV0X3Nlc3Npb25pZHxwaHBzZXNzaW9ufHBocHNlc3NpZHx3ZWJsb2dpY3Nlc3Npb258c2Vzc2lvbl9pZHxzZXNzaW9uLWlkfGNmaWR8Y2Z0b2tlbnxjZnNpZHxqc2VydnNlc3Npb258andzZXNzaW9uKSQiIFwKICAgICJpZDo5NDMxMjAsXAogICAgcGhhc2U6MixcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSx0OnVybERlY29kZVVuaSx0Omxvd2VyY2FzZSxcCiAgICBtc2c6J1Bvc3NpYmxlIFNlc3Npb24gRml4YXRpb24gQXR0YWNrOiBTZXNzaW9uSUQgUGFyYW1ldGVyIE5hbWUgd2l0aCBObyBSZWZlcmVyJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1maXhhdGlvbicsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzIyNS8yMS81OTMvNjEnLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIGNoYWluIgogICAgU2VjUnVsZSAmUkVRVUVTVF9IRUFERVJTOlJlZmVyZXIgIkBlcSAwIiBcCiAgICAgICAgInNldHZhcjondHguc2Vzc2lvbl9maXhhdGlvbl9zY29yZT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nIgoKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAyIiAiaWQ6OTQzMDEzLHBoYXNlOjEscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTQzLUFQUExJQ0FUSU9OLUFUVEFDSy1TRVNTSU9OLUZJWEFUSU9OIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5NDMwMTQscGhhc2U6MixwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05NDMtQVBQTElDQVRJT04tQVRUQUNLLVNFU1NJT04tRklYQVRJT04iCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAyID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAyIG9yIGhpZ2hlcikKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5NDMwMTUscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05NDMtQVBQTElDQVRJT04tQVRUQUNLLVNFU1NJT04tRklYQVRJT04iClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMyIgImlkOjk0MzAxNixwaGFzZToyLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTk0My1BUFBMSUNBVElPTi1BVFRBQ0stU0VTU0lPTi1GSVhBVElPTiIKIwojIC09IFBhcmFub2lhIExldmVsIDMgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDMgb3IgaGlnaGVyKQojCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgNCIgImlkOjk0MzAxNyxwaGFzZToxLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTk0My1BUFBMSUNBVElPTi1BVFRBQ0stU0VTU0lPTi1GSVhBVElPTiIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTQzMDE4LHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTQzLUFQUExJQ0FUSU9OLUFUVEFDSy1TRVNTSU9OLUZJWEFUSU9OIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgNCA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogNCBvciBoaWdoZXIpCiMKCgoKIwojIC09IFBhcmFub2lhIExldmVscyBGaW5pc2hlZCA9LQojClNlY01hcmtlciAiRU5ELVJFUVVFU1QtOTQzLUFQUExJQ0FUSU9OLUFUVEFDSy1TRVNTSU9OLUZJWEFUSU9OIgo=",
	"REQUEST-944-APPLICATION-ATTACK-JAVA.conf":             "",
	"REQUEST-949-BLOCKING-EVALUATION.conf":                 "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuMgojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgVGhlIE9XQVNQIE1vZFNlY3VyaXR5IENvcmUgUnVsZSBTZXQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIKIyBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAoQVNMKSB2ZXJzaW9uIDIKIyBQbGVhc2Ugc2VlIHRoZSBlbmNsb3NlZCBMSUNFTlNFIGZpbGUgZm9yIGZ1bGwgZGV0YWlscy4KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAwIChlbXB0eSkgPS0gKGFwcGx5IHVuY29uZGl0aW9uYWxseSkKIwoKIyBTdW1taW5nIHVwIHRoZSBhbm9tYWx5IHNjb3JlLgoKIyBOT1RFOiB0eC5hbm9tYWx5X3Njb3JlIHNob3VsZCBub3QgYmUgc2V0IGluaXRpYWxseSwgYnV0IG1hc2tpbmcgd291bGQgbGVhZCB0byBkaWZmaWN1bHQgYnVncy4KIyBTbyB3ZSBhZGQgdG8gaXQuClNlY1J1bGUgVFg6UEFSQU5PSUFfTEVWRUwgIkBnZSAxIiBcCiAgICAiaWQ6OTQ5MDYwLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlPSsle3R4LmFub21hbHlfc2NvcmVfcGwxfSciCgpTZWNSdWxlIFRYOlBBUkFOT0lBX0xFVkVMICJAZ2UgMiIgXAogICAgImlkOjk0OTA2MSxcCiAgICBwaGFzZToyLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZT0rJXt0eC5hbm9tYWx5X3Njb3JlX3BsMn0nIgoKU2VjUnVsZSBUWDpQQVJBTk9JQV9MRVZFTCAiQGdlIDMiIFwKICAgICJpZDo5NDkwNjIsXAogICAgcGhhc2U6MixcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmU9KyV7dHguYW5vbWFseV9zY29yZV9wbDN9JyIKClNlY1J1bGUgVFg6UEFSQU5PSUFfTEVWRUwgIkBnZSA0IiBcCiAgICAiaWQ6OTQ5MDYzLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlPSsle3R4LmFub21hbHlfc2NvcmVfcGw0fSciCgoKU2VjTWFya2VyICJCRUdJTi1SRVFVRVNULUJMT0NLSU5HLUVWQUwiCgojIFRoZXNlIHJ1bGVzIHVzZSB0aGUgYW5vbWFseSBzY29yZSBzZXR0aW5ncyBzcGVjaWZpZWQgaW4gdGhlIDEwIGNvbmZpZyBmaWxlLgojIFlvdSBzaG91bGQgYWxzbyBzZXQgdGhlIGRlc2lyZWQgZGlzcnVwdGl2ZSBhY3Rpb24gKGRlbnksIHJlZGlyZWN0LCBldGMuLi4pLgojCiMgLT1bIElQIFJlcHV0YXRpb24gQ2hlY2tzIF09LQojCiMgQmxvY2sgYmFzZWQgb24gdmFyaWFibGUgSVAuUkVQVVRfQkxPQ0tfRkxBRyBhbmQgVFguRE9fUkVQVVRfQkxPQ0sKIwpTZWNSdWxlIElQOlJFUFVUX0JMT0NLX0ZMQUcgIkBlcSAxIiBcCiAgICAiaWQ6OTQ5MTAwLFwKICAgIHBoYXNlOjIsXAogICAgZGVueSxcCiAgICBsb2csXAogICAgbXNnOidSZXF1ZXN0IERlbmllZCBieSBJUCBSZXB1dGF0aW9uIEVuZm9yY2VtZW50JyxcCiAgICBsb2dkYXRhOidQcmV2aW91cyBCbG9jayBSZWFzb246ICV7aXAucmVwdXRfYmxvY2tfcmVhc29ufScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1tdWx0aScsXAogICAgdGFnOidhdHRhY2stcmVwdXRhdGlvbi1pcCcsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInLFwKICAgIHNldmVyaXR5OidDUklUSUNBTCcsXAogICAgY2hhaW4iCiAgICBTZWNSdWxlIFRYOkRPX1JFUFVUX0JMT0NLICJAZXEgMSIgXAogICAgICAgICJzZXR2YXI6J3R4LmluYm91bmRfYW5vbWFseV9zY29yZT0le3R4LmFub21hbHlfc2NvcmV9JyIKCiMKIyAtPVsgQW5vbWFseSBNb2RlOiBPdmVyYWxsIFRyYW5zYWN0aW9uIEFub21hbHkgU2NvcmUgXT0tCiMKU2VjUnVsZSBUWDpBTk9NQUxZX1NDT1JFICJAZ2UgJXt0eC5pbmJvdW5kX2Fub21hbHlfc2NvcmVfdGhyZXNob2xkfSIgXAogICAgImlkOjk0OTExMCxcCiAgICBwaGFzZToyLFwKICAgIGRlbnksXAogICAgdDpub25lLFwKICAgIGxvZyxcCiAgICBtc2c6J0luYm91bmQgQW5vbWFseSBTY29yZSBFeGNlZWRlZCAoVG90YWwgU2NvcmU6ICV7VFguQU5PTUFMWV9TQ09SRX0pJyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1nZW5lcmljJyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgc2V2ZXJpdHk6J0NSSVRJQ0FMJyxcCiAgICBzZXR2YXI6J3R4LmluYm91bmRfYW5vbWFseV9zY29yZT0le3R4LmFub21hbHlfc2NvcmV9JyIKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTQ5MDExLHBoYXNlOjEscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTQ5LUJMT0NLSU5HLUVWQUxVQVRJT04iClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMSIgImlkOjk0OTAxMixwaGFzZToyLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTk0OS1CTE9DS0lORy1FVkFMVUFUSU9OIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMSAoZGVmYXVsdCkgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDEgb3IgaGlnaGVyKQojCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMiIgImlkOjk0OTAxMyxwaGFzZToxLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTk0OS1CTE9DS0lORy1FVkFMVUFUSU9OIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5NDkwMTQscGhhc2U6MixwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05NDktQkxPQ0tJTkctRVZBTFVBVElPTiIKIwojIC09IFBhcmFub2lhIExldmVsIDIgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDIgb3IgaGlnaGVyKQojCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMyIgImlkOjk0OTAxNSxwaGFzZToxLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTk0OS1CTE9DS0lORy1FVkFMVUFUSU9OIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5NDkwMTYscGhhc2U6MixwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05NDktQkxPQ0tJTkctRVZBTFVBVElPTiIKIwojIC09IFBhcmFub2lhIExldmVsIDMgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDMgb3IgaGlnaGVyKQojCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgNCIgImlkOjk0OTAxNyxwaGFzZToxLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTk0OS1CTE9DS0lORy1FVkFMVUFUSU9OIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDQiICJpZDo5NDkwMTgscGhhc2U6MixwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05NDktQkxPQ0tJTkctRVZBTFVBVElPTiIKIwojIC09IFBhcmFub2lhIExldmVsIDQgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDQgb3IgaGlnaGVyKQojCgoKCiMKIyAtPSBQYXJhbm9pYSBMZXZlbHMgRmluaXNoZWQgPS0KIwpTZWNNYXJrZXIgIkVORC1SRVFVRVNULTk0OS1CTE9DS0lORy1FVkFMVUFUSU9OIgo=",
	"RESPONSE-950-DATA-LEAKAGES.conf":                      "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuMgojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgVGhlIE9XQVNQIE1vZFNlY3VyaXR5IENvcmUgUnVsZSBTZXQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIKIyBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAoQVNMKSB2ZXJzaW9uIDIKIyBQbGVhc2Ugc2VlIHRoZSBlbmNsb3NlZCBMSUNFTlNFIGZpbGUgZm9yIGZ1bGwgZGV0YWlscy4KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMgVGhlIHBhcmFub2lhIGxldmVsIHNraXAgcnVsZXMgOTUwMDIwLCA5NTAwMjEgYW5kIDk1MDAyMiBoYXZlIG9kZAojIG51bWJlcnMgbm90IGluIHN5bmMgd2l0aCBvdGhlciBwYXJhbm9pYSBsZXZlbCBza2lwIHJ1bGVzIGluIG90aGVyCiMgZmlsZXMuIFRoaXMgaXMgZG9uZSB0byBhdm9pZCBydWxlIGlkIGNvbGxpc2lvbnMgd2l0aCBDUlN2Mi4KIyBUaGlzIGlzIGFsc28gdHJ1ZSBmb3IgcnVsZSA5NTAxMzAuCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMCAoZW1wdHkpID0tIChhcHBseSB1bmNvbmRpdGlvbmFsbHkpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTUwMDIwLHBoYXNlOjMscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1MC1EQVRBLUxFQUtBR0VTIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDEiICJpZDo5NTAwMjEscGhhc2U6NCxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUwLURBVEEtTEVBS0FHRVMiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAxIChkZWZhdWx0KSA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMSBvciBoaWdoZXIpCiMKCiMKIyAtPVsgRGlyZWN0b3J5IExpc3RpbmcgXT0tCiMKU2VjUnVsZSBSRVNQT05TRV9CT0RZICJAcnggKD86PCg/OlRJVExFPkluZGV4IG9mLio/PEh8dGl0bGU+SW5kZXggb2YuKj88aCkxPkluZGV4IG9mfD5cW1RvIFBhcmVudCBEaXJlY3RvcnlcXTxcL1tBYV0+PGJyPikiIFwKICAgICJpZDo5NTAxMzAsXAogICAgcGhhc2U6NCxcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J0RpcmVjdG9yeSBMaXN0aW5nJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1kaXNjbG9zdXJlJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzEnLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMTE4LzExNi81NC8xMjcnLFwKICAgIHRhZzonUENJLzYuNS42JyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgc2V2ZXJpdHk6J0VSUk9SJyxcCiAgICBzZXR2YXI6J3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyIKCiMKIyAtPVsgQ0dJIFNvdXJjZSBDb2RlIExlYWthZ2UgXT0tCiMKIyBBIENHSSBzY3JpcHQgYmVnaW5zIG5vcm1hbGx5IHdpdGggIyEgYW5kIHRoZSBpbnRlcnByZXRlciwKIyBmb3IgZXhhbXBsZToKIwojICMhL3Vzci9iaW4vcGVybAojICMhL3Vzci9iaW4vcHl0aG9uCiMgIyEvdXNyL2Jpbi9ydWJ5CiMKIyBJZiB0aGUgQ0dJIHNjcmlwdCBwcm9jZXNzb3JzIG9yIE1JTUUgdHlwZSBoYW5kbGVycyBhcmUgbWlzY29uZmlndXJlZCwKIyB0aGUgc2NyaXB0J3Mgc291cmNlIGNvZGUgY291bGQgYmUgZXJyb25lb3VzbHkgcmV0dXJuZWQgdG8gdGhlIGNsaWVudC4KU2VjUnVsZSBSRVNQT05TRV9CT0RZICJAcnggXiNcIVxzPy8iIFwKICAgICJpZDo5NTAxNDAsXAogICAgcGhhc2U6NCxcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J0NHSSBzb3VyY2UgY29kZSBsZWFrYWdlJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1kaXNjbG9zdXJlJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzEnLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMTE4LzExNicsXAogICAgdGFnOidQQ0kvNi41LjYnLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyxcCiAgICBzZXZlcml0eTonRVJST1InLFwKICAgIHNldHZhcjondHgub3V0Ym91bmRfYW5vbWFseV9zY29yZV9wbDE9KyV7dHguZXJyb3JfYW5vbWFseV9zY29yZX0nLFwKICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguZXJyb3JfYW5vbWFseV9zY29yZX0nIgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMiIgImlkOjk1MDAxMyxwaGFzZTozLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTAtREFUQS1MRUFLQUdFUyIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAyIiAiaWQ6OTUwMDE0LHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1MC1EQVRBLUxFQUtBR0VTIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMiA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMiBvciBoaWdoZXIpCiMKCiMKIyAtPVsgVGhlIGFwcGxpY2F0aW9uIGlzIG5vdCBhdmFpbGFibGUgLSA1eHggbGV2ZWwgc3RhdHVzIGNvZGUgXT0tCiMKU2VjUnVsZSBSRVNQT05TRV9TVEFUVVMgIkByeCBeNVxkezJ9JCIgXAogICAgImlkOjk1MDEwMCxcCiAgICBwaGFzZTo0LFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLFwKICAgIG1zZzonVGhlIEFwcGxpY2F0aW9uIFJldHVybmVkIGEgNTAwLUxldmVsIFN0YXR1cyBDb2RlJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1kaXNjbG9zdXJlJyxcCiAgICB0YWc6J1BDSS82LjUuNicsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8yJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzE1MicsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInLFwKICAgIHNldmVyaXR5OidFUlJPUicsXAogICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMj0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfScsXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMj0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfSciCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMyIgImlkOjk1MDAxNSxwaGFzZTozLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTAtREFUQS1MRUFLQUdFUyIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAzIiAiaWQ6OTUwMDE2LHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1MC1EQVRBLUxFQUtBR0VTIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMyA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMyBvciBoaWdoZXIpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTUwMDE3LHBoYXNlOjMscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1MC1EQVRBLUxFQUtBR0VTIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDQiICJpZDo5NTAwMjIscGhhc2U6NCxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUwLURBVEEtTEVBS0FHRVMiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCA0ID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiA0IG9yIGhpZ2hlcikKIwoKCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWxzIEZpbmlzaGVkID0tCiMKU2VjTWFya2VyICJFTkQtUkVTUE9OU0UtOTUwLURBVEEtTEVBS0FHRVMiCg==",
	"RESPONSE-951-DATA-LEAKAGES-SQL.conf":                  "",
	"RESPONSE-952-DATA-LEAKAGES-JAVA.conf":                 "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuMgojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgVGhlIE9XQVNQIE1vZFNlY3VyaXR5IENvcmUgUnVsZSBTZXQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIKIyBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAoQVNMKSB2ZXJzaW9uIDIKIyBQbGVhc2Ugc2VlIHRoZSBlbmNsb3NlZCBMSUNFTlNFIGZpbGUgZm9yIGZ1bGwgZGV0YWlscy4KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAwIChlbXB0eSkgPS0gKGFwcGx5IHVuY29uZGl0aW9uYWxseSkKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDEiICJpZDo5NTIwMTEscGhhc2U6MyxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUyLURBVEEtTEVBS0FHRVMtSkFWQSIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTUyMDEyLHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1Mi1EQVRBLUxFQUtBR0VTLUpBVkEiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAxIChkZWZhdWx0KSA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMSBvciBoaWdoZXIpCiMKCiMKIyAtPVsgSmF2YSBTb3VyY2UgQ29kZSBMZWFrYWdlcyBdPS0KIwpTZWNSdWxlIFJFU1BPTlNFX0JPRFkgIkBwbUZyb21GaWxlIGphdmEtY29kZS1sZWFrYWdlcy5kYXRhIiBcCiAgICAiaWQ6OTUyMTAwLFwKICAgIHBoYXNlOjQsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidKYXZhIFNvdXJjZSBDb2RlIExlYWthZ2UnLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4wfSBmb3VuZCB3aXRoaW4gJXtNQVRDSEVEX1ZBUl9OQU1FfTogJXtNQVRDSEVEX1ZBUn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtamF2YScsXAogICAgdGFnOidwbGF0Zm9ybS1tdWx0aScsXAogICAgdGFnOidhdHRhY2stZGlzY2xvc3VyZScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8xMTYnLFwKICAgIHRhZzonUENJLzYuNS42JyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgc2V2ZXJpdHk6J0VSUk9SJyxcCiAgICBzZXR2YXI6J3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyIKCiMKIyAtPVsgSmF2YSBFcnJvcnMgXT0tCiMKIyBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmRyZXNyaWFuY2hvL3czYWYvYmxvYi9tYXN0ZXIvdzNhZi9wbHVnaW5zL2dyZXAvZXJyb3JfcGFnZXMucHkKIwpTZWNSdWxlIFJFU1BPTlNFX0JPRFkgIkBwbUZyb21GaWxlIGphdmEtZXJyb3JzLmRhdGEiIFwKICAgICJpZDo5NTIxMTAsXAogICAgcGhhc2U6NCxcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J0phdmEgRXJyb3JzJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLWphdmEnLFwKICAgIHRhZzoncGxhdGZvcm0tbXVsdGknLFwKICAgIHRhZzonYXR0YWNrLWRpc2Nsb3N1cmUnLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8xMTgvMTE2JyxcCiAgICB0YWc6J1BDSS82LjUuNicsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInLFwKICAgIHNldmVyaXR5OidFUlJPUicsXAogICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfScsXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfSciCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMiIgImlkOjk1MjAxMyxwaGFzZTozLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTItREFUQS1MRUFLQUdFUy1KQVZBIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5NTIwMTQscGhhc2U6NCxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUyLURBVEEtTEVBS0FHRVMtSkFWQSIKIwojIC09IFBhcmFub2lhIExldmVsIDIgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDIgb3IgaGlnaGVyKQojCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMyIgImlkOjk1MjAxNSxwaGFzZTozLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTItREFUQS1MRUFLQUdFUy1KQVZBIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5NTIwMTYscGhhc2U6NCxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUyLURBVEEtTEVBS0FHRVMtSkFWQSIKIwojIC09IFBhcmFub2lhIExldmVsIDMgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDMgb3IgaGlnaGVyKQojCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgNCIgImlkOjk1MjAxNyxwaGFzZTozLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTItREFUQS1MRUFLQUdFUy1KQVZBIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDQiICJpZDo5NTIwMTgscGhhc2U6NCxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUyLURBVEEtTEVBS0FHRVMtSkFWQSIKIwojIC09IFBhcmFub2lhIExldmVsIDQgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDQgb3IgaGlnaGVyKQojCgoKCiMKIyAtPSBQYXJhbm9pYSBMZXZlbHMgRmluaXNoZWQgPS0KIwpTZWNNYXJrZXIgIkVORC1SRVNQT05TRS05NTItREFUQS1MRUFLQUdFUy1KQVZBIgo=",
	"RESPONSE-953-DATA-LEAKAGES-PHP.conf":                  "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuMgojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgVGhlIE9XQVNQIE1vZFNlY3VyaXR5IENvcmUgUnVsZSBTZXQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIKIyBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAoQVNMKSB2ZXJzaW9uIDIKIyBQbGVhc2Ugc2VlIHRoZSBlbmNsb3NlZCBMSUNFTlNFIGZpbGUgZm9yIGZ1bGwgZGV0YWlscy4KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAwIChlbXB0eSkgPS0gKGFwcGx5IHVuY29uZGl0aW9uYWxseSkKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDEiICJpZDo5NTMwMTEscGhhc2U6MyxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUzLURBVEEtTEVBS0FHRVMtUEhQIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDEiICJpZDo5NTMwMTIscGhhc2U6NCxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUzLURBVEEtTEVBS0FHRVMtUEhQIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMSAoZGVmYXVsdCkgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDEgb3IgaGlnaGVyKQojCgojCiMgLT1bIFBIUCBFcnJvciBNZXNzYWdlIExlYWthZ2UgXT0tCiMKU2VjUnVsZSBSRVNQT05TRV9CT0RZICJAcG1Gcm9tRmlsZSBwaHAtZXJyb3JzLmRhdGEiIFwKICAgICJpZDo5NTMxMDAsXAogICAgcGhhc2U6NCxcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J1BIUCBJbmZvcm1hdGlvbiBMZWFrYWdlJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLXBocCcsXAogICAgdGFnOidwbGF0Zm9ybS1tdWx0aScsXAogICAgdGFnOidhdHRhY2stZGlzY2xvc3VyZScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8xMTYnLFwKICAgIHRhZzonUENJLzYuNS42JyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgc2V2ZXJpdHk6J0VSUk9SJyxcCiAgICBzZXR2YXI6J3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyIKCiMKIyAtPVsgUEhQIHNvdXJjZSBjb2RlIGxlYWthZ2UgXT0tCiMKIyBEZXRlY3Qgc29tZSBjb21tb24gUEhQIGtleXdvcmRzIGluIG91dHB1dC4KIwpTZWNSdWxlIFJFU1BPTlNFX0JPRFkgIkByeCAoPzpcYig/OmYoPzp0cF8oPzpuYl8pP2Y/KD86Z2V8cHUpdHxnZXQoPzpzP3N8Yyl8c2NhbmZ8d3JpdGV8b3BlbnxyZWFkKXxneig/Oig/OmVuY29kfHdyaXQpZXxjb21wcmVzc3xvcGVufHJlYWQpfHMoPzplc3Npb25fc3RhcnR8Y2FuZGlyKXxyZWFkKD86KD86Z3opP2ZpbGV8ZGlyKXxtb3ZlX3VwbG9hZGVkX2ZpbGV8KD86cHJvY198Ynopb3BlbnxjYWxsX3VzZXJfZnVuYyl8XCRfKD86KD86cG9zfGdlKXR8c2Vzc2lvbikpXGIiIFwKICAgICJpZDo5NTMxMTAsXAogICAgcGhhc2U6NCxcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J1BIUCBzb3VyY2UgY29kZSBsZWFrYWdlJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLXBocCcsXAogICAgdGFnOidwbGF0Zm9ybS1tdWx0aScsXAogICAgdGFnOidhdHRhY2stZGlzY2xvc3VyZScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8xMTYnLFwKICAgIHRhZzonUENJLzYuNS42JyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgc2V2ZXJpdHk6J0VSUk9SJyxcCiAgICBzZXR2YXI6J3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyIKCiMgRGV0ZWN0IHRoZSBwcmVzZW5jZSBvZiB0aGUgUEhQIG9wZW4gdGFnICI8PyIgb3IgIjw/cGhwIiBpbiBvdXRwdXQuCiMKIyBUbyBwcmV2ZW50IGZhbHNlIHBvc2l0aXZlcyBkdWUgdG8gdGhlIHNob3J0ICI8PyIgc2VxdWVuY2UsIGFuIGF0dGVtcHQKIyBpcyBtYWRlIHRvIHN0b3AgYWxlcnRzIGluIGJpbmFyeSBvdXRwdXQuIFRoaXMgaXMgZG9uZSBieSBkZXRlY3RpbmcKIyBzb21lIGNvbW1vbiBiaW5hcnkgZmlsZSBmb3JtYXQgaGVhZGVycywgc3VjaCBhcyBnemlwIChceDFmXHg4Ylx4MDgpLAojIHBuZyAoSUhEUiksIG1wMyAoSUQzKSwgbW92aWUgZm9ybWF0cyBldCBjZXRlcmEuCiMKIyBOb3Qgc3VwcG9ydGVkIGJ5IHJlMiAoPyFyZSkuCiMKU2VjUnVsZSBSRVNQT05TRV9CT0RZICJAcnggPFw/KD8heG1sKSIgXAogICAgImlkOjk1MzEyMCxcCiAgICBwaGFzZTo0LFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLFwKICAgIG1zZzonUEhQIHNvdXJjZSBjb2RlIGxlYWthZ2UnLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4wfSBmb3VuZCB3aXRoaW4gJXtNQVRDSEVEX1ZBUl9OQU1FfTogJXtNQVRDSEVEX1ZBUn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtcGhwJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1kaXNjbG9zdXJlJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzEnLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMTE4LzExNicsXAogICAgdGFnOidQQ0kvNi41LjYnLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyxcCiAgICBzZXZlcml0eTonRVJST1InLFwKICAgIGNoYWluIgogICAgU2VjUnVsZSBSRVNQT05TRV9CT0RZICIhQHJ4ICg/Olx4MWZceDhiXHgwOHxcYig/Oig/OmkoPzpudGVycGxheXxoZHJ8ZDMpfG0oPzpvdml8dGhkKXxyKD86YXIhfGlmZil8KD86ZXh8amYpaWZ8Zig/Omx2fHdzKXx2YXJnfGN3cylcYnxnaWYpfEIoPzolcGRmfFwucmEpXGJ8XndPRltGMl0pIiBcCiAgICAgICAgImNhcHR1cmUsXAogICAgICAgIHQ6bm9uZSxcCiAgICAgICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfScsXAogICAgICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguZXJyb3JfYW5vbWFseV9zY29yZX0nIgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMiIgImlkOjk1MzAxMyxwaGFzZTozLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTMtREFUQS1MRUFLQUdFUy1QSFAiClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMiIgImlkOjk1MzAxNCxwaGFzZTo0LHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTMtREFUQS1MRUFLQUdFUy1QSFAiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAyID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAyIG9yIGhpZ2hlcikKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5NTMwMTUscGhhc2U6MyxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUzLURBVEEtTEVBS0FHRVMtUEhQIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5NTMwMTYscGhhc2U6NCxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUzLURBVEEtTEVBS0FHRVMtUEhQIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMyA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMyBvciBoaWdoZXIpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTUzMDE3LHBoYXNlOjMscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1My1EQVRBLUxFQUtBR0VTLVBIUCIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTUzMDE4LHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1My1EQVRBLUxFQUtBR0VTLVBIUCIKIwojIC09IFBhcmFub2lhIExldmVsIDQgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDQgb3IgaGlnaGVyKQojCgoKCiMKIyAtPSBQYXJhbm9pYSBMZXZlbHMgRmluaXNoZWQgPS0KIwpTZWNNYXJrZXIgIkVORC1SRVNQT05TRS05NTMtREFUQS1MRUFLQUdFUy1QSFAiCg==",
	"RESPONSE-954-DATA-LEAKAGES-IIS.conf":                  "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuMgojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgVGhlIE9XQVNQIE1vZFNlY3VyaXR5IENvcmUgUnVsZSBTZXQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIKIyBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAoQVNMKSB2ZXJzaW9uIDIKIyBQbGVhc2Ugc2VlIHRoZSBlbmNsb3NlZCBMSUNFTlNFIGZpbGUgZm9yIGZ1bGwgZGV0YWlscy4KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAwIChlbXB0eSkgPS0gKGFwcGx5IHVuY29uZGl0aW9uYWxseSkKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDEiICJpZDo5NTQwMTEscGhhc2U6MyxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTU0LURBVEEtTEVBS0FHRVMtSUlTIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDEiICJpZDo5NTQwMTIscGhhc2U6NCxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTU0LURBVEEtTEVBS0FHRVMtSUlTIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMSAoZGVmYXVsdCkgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDEgb3IgaGlnaGVyKQojCgojIElJUyBkZWZhdWx0IGxvY2F0aW9uClNlY1J1bGUgUkVTUE9OU0VfQk9EWSAiQHJ4IFthLXpdOlxcXFxpbmV0cHViXGIiIFwKICAgICJpZDo5NTQxMDAsXAogICAgcGhhc2U6NCxcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSx0Omxvd2VyY2FzZSxcCiAgICBtc2c6J0Rpc2Nsb3N1cmUgb2YgSUlTIGluc3RhbGwgbG9jYXRpb24nLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4wfSBmb3VuZCB3aXRoaW4gJXtNQVRDSEVEX1ZBUl9OQU1FfTogJXtNQVRDSEVEX1ZBUn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0taWlzJyxcCiAgICB0YWc6J3BsYXRmb3JtLXdpbmRvd3MnLFwKICAgIHRhZzonYXR0YWNrLWRpc2Nsb3N1cmUnLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8xMTgvMTE2JyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgc2V2ZXJpdHk6J0VSUk9SJyxcCiAgICBzZXR2YXI6J3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyIKClNlY1J1bGUgUkVTUE9OU0VfQk9EWSAiQHJ4ICg/Ok1pY3Jvc29mdCBPTEUgREIgUHJvdmlkZXIgZm9yIFNRTCBTZXJ2ZXIoPzo8XC9mb250Pi57MSwyMH0/ZXJyb3IgJzgwMCg/OjA0MDA1fDQwZTMxKScuezEsNDB9P1RpbWVvdXQgZXhwaXJlZHwgXCgweDgwMDQwZTMxXCk8YnI+VGltZW91dCBleHBpcmVkPGJyPil8PGgxPmludGVybmFsIHNlcnZlciBlcnJvcjxcL2gxPi4qPzxoMj5wYXJ0IG9mIHRoZSBzZXJ2ZXIgaGFzIGNyYXNoZWQgb3IgaXQgaGFzIGEgY29uZmlndXJhdGlvbiBlcnJvclwuPFwvaDI+fGNhbm5vdCBjb25uZWN0IHRvIHRoZSBzZXJ2ZXI6IHRpbWVkIG91dCkiIFwKICAgICJpZDo5NTQxMTAsXAogICAgcGhhc2U6NCxcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J0FwcGxpY2F0aW9uIEF2YWlsYWJpbGl0eSBFcnJvcicsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1paXMnLFwKICAgIHRhZzoncGxhdGZvcm0td2luZG93cycsXAogICAgdGFnOidhdHRhY2stZGlzY2xvc3VyZScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J1BDSS82LjUuNicsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8xMTgvMTE2JyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgc2V2ZXJpdHk6J0VSUk9SJyxcCiAgICBzZXR2YXI6J3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyIKCiMKIyBJSVMgRXJyb3JzIGxlYWthZ2UKIwpTZWNSdWxlIFJFU1BPTlNFX0JPRFkgIkByeCAoPzpcYig/OkEoPzpET0RCXC5Db21tYW5kXGIuezAsMTAwfT9cYig/OkFwcGxpY2F0aW9uIHVzZXMgYSB2YWx1ZSBvZiB0aGUgd3JvbmcgdHlwZSBmb3IgdGhlIGN1cnJlbnQgb3BlcmF0aW9uXGJ8ZXJyb3InKXwgdHJhcHBhYmxlIGVycm9yIG9jY3VycmVkIGluIGFuIGV4dGVybmFsIG9iamVjdFwuIFRoZSBzY3JpcHQgY2Fubm90IGNvbnRpbnVlIHJ1bm5pbmdcYil8TWljcm9zb2Z0IFZCU2NyaXB0ICg/OmNvbXBpbGF0aW9uICg/OlwoMHg4fGVycm9yKXxydW50aW1lICg/OkVycm9yfFwoMHg4KSlcYnxPYmplY3QgcmVxdWlyZWQ6ICd8ZXJyb3IgJzgwMCl8PGI+VmVyc2lvbiBJbmZvcm1hdGlvbjo8XC9iPig/OiZuYnNwO3xccykoPzpNaWNyb3NvZnQgXC5ORVQgRnJhbWV3b3JrfEFTUFwuTkVUKSBWZXJzaW9uOnw+ZXJyb3IgJ0FTUFxifEFuIEVycm9yIEhhcyBPY2N1cnJlZHw+U3ludGF4IGVycm9yIGluIHN0cmluZyBpbiBxdWVyeSBleHByZXNzaW9ufFwvW0VlXXJyb3JbTW1dZXNzYWdlXC5hc3B4P1w/W0VlXXJyb3JcYikiIFwKICAgICJpZDo5NTQxMjAsXAogICAgcGhhc2U6NCxcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J0lJUyBJbmZvcm1hdGlvbiBMZWFrYWdlJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLWlpcycsXAogICAgdGFnOidwbGF0Zm9ybS13aW5kb3dzJyxcCiAgICB0YWc6J2F0dGFjay1kaXNjbG9zdXJlJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzEnLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMTE4LzExNicsXAogICAgdGFnOidQQ0kvNi41LjYnLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyxcCiAgICBzZXZlcml0eTonRVJST1InLFwKICAgIHNldHZhcjondHgub3V0Ym91bmRfYW5vbWFseV9zY29yZV9wbDE9KyV7dHguZXJyb3JfYW5vbWFseV9zY29yZX0nLFwKICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguZXJyb3JfYW5vbWFseV9zY29yZX0nIgoKClNlY1J1bGUgUkVTUE9OU0VfU1RBVFVTICIhQHJ4IF40MDQkIiBcCiAgICAiaWQ6OTU0MTMwLFwKICAgIHBoYXNlOjQsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidJSVMgSW5mb3JtYXRpb24gTGVha2FnZScsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1paXMnLFwKICAgIHRhZzoncGxhdGZvcm0td2luZG93cycsXAogICAgdGFnOidhdHRhY2stZGlzY2xvc3VyZScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8xMTYnLFwKICAgIHRhZzonUENJLzYuNS42JyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgc2V2ZXJpdHk6J0VSUk9SJyxcCiAgICBjaGFpbiIKICAgIFNlY1J1bGUgUkVTUE9OU0VfQk9EWSAiQHJ4IFxiU2VydmVyIEVycm9yIGluLnswLDUwfT9cYkFwcGxpY2F0aW9uXGIiIFwKICAgICAgICAiY2FwdHVyZSxcCiAgICAgICAgdDpub25lLFwKICAgICAgICBzZXR2YXI6J3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyxcCiAgICAgICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfSciCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMiIgImlkOjk1NDAxMyxwaGFzZTozLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTQtREFUQS1MRUFLQUdFUy1JSVMiClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMiIgImlkOjk1NDAxNCxwaGFzZTo0LHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTQtREFUQS1MRUFLQUdFUy1JSVMiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAyID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAyIG9yIGhpZ2hlcikKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5NTQwMTUscGhhc2U6MyxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTU0LURBVEEtTEVBS0FHRVMtSUlTIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5NTQwMTYscGhhc2U6NCxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTU0LURBVEEtTEVBS0FHRVMtSUlTIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMyA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMyBvciBoaWdoZXIpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTU0MDE3LHBoYXNlOjMscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1NC1EQVRBLUxFQUtBR0VTLUlJUyIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTU0MDE4LHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1NC1EQVRBLUxFQUtBR0VTLUlJUyIKIwojIC09IFBhcmFub2lhIExldmVsIDQgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDQgb3IgaGlnaGVyKQojCgoKCiMKIyAtPSBQYXJhbm9pYSBMZXZlbHMgRmluaXNoZWQgPS0KIwpTZWNNYXJrZXIgIkVORC1SRVNQT05TRS05NTQtREFUQS1MRUFLQUdFUy1JSVMiCg==",
	"RESPONSE-959-BLOCKING-EVALUATION.conf":                "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuMgojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgVGhlIE9XQVNQIE1vZFNlY3VyaXR5IENvcmUgUnVsZSBTZXQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIKIyBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAoQVNMKSB2ZXJzaW9uIDIKIyBQbGVhc2Ugc2VlIHRoZSBlbmNsb3NlZCBMSUNFTlNFIGZpbGUgZm9yIGZ1bGwgZGV0YWlscy4KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMgWW91IHNob3VsZCBzZXQgdGhlIHNjb3JlIHRvIHRoZSBwcm9wZXIgdGhyZXNob2xkIHlvdSB3b3VsZCBwcmVmZXIuIElmIGtlcHQgYXQgIkBndCAwIgojIGl0IHdpbGwgd29yayBzaW1pbGFybHkgdG8gcHJldmlvdXMgTW9kIENSUyBydWxlcyBhbmQgd2lsbCBjcmVhdGUgYW4gZXZlbnQgaW4gdGhlIGVycm9yX2xvZwojIGZpbGUgaWYgdGhlcmUgYXJlIGFueSBydWxlcyB0aGF0IG1hdGNoLiAgSWYgeW91IHdvdWxkIGxpa2UgdG8gbGVzc2VuIHRoZSBudW1iZXIgb2YgZXZlbnRzCiMgZ2VuZXJhdGVkIGluIHRoZSBlcnJvcl9sb2cgZmlsZSwgeW91IHNob3VsZCBpbmNyZWFzZSB0aGUgYW5vbWFseSBzY29yZSB0aHJlc2hvbGQgdG8KIyBzb21ldGhpbmcgbGlrZSAiQGd0IDIwIi4gIFRoaXMgd291bGQgb25seSBnZW5lcmF0ZSBhbiBldmVudCBpbiB0aGUgZXJyb3JfbG9nIGZpbGUgaWYKIyB0aGVyZSBhcmUgbXVsdGlwbGUgbG93ZXIgc2V2ZXJpdHkgcnVsZSBtYXRjaGVzIG9yIGlmIGFueSAxIGhpZ2hlciBzZXZlcml0eSBpdGVtIG1hdGNoZXMuCiMKIyBZb3Ugc2hvdWxkIGFsc28gc2V0IHRoZSBkZXNpcmVkIGRpc3J1cHRpdmUgYWN0aW9uIChkZW55LCByZWRpcmVjdCwgZXRjLi4uKS4KIwoKIwojIC09IFBhcmFub2lhIExldmVsIDAgKGVtcHR5KSA9LSAoYXBwbHkgdW5jb25kaXRpb25hbGx5KQojCgojIFN1bW1pbmcgdXAgdGhlIGFub21hbHkgc2NvcmUuCgojIE5PVEU6IHR4LmFub21hbHlfc2NvcmUgc2hvdWxkIG5vdCBiZSBzZXQgaW5pdGlhbGx5LCBidXQgbWFza2luZyB3b3VsZCBsZWFkIHRvIGRpZmZpY3VsdCBidWdzLgojIFNvIHdlIGFkZCB0byBpdC4KU2VjUnVsZSBUWDpQQVJBTk9JQV9MRVZFTCAiQGdlIDEiIFwKICAgICJpZDo5NTkwNjAsXAogICAgcGhhc2U6NCxcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICBzZXR2YXI6J3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmU9KyV7dHgub3V0Ym91bmRfYW5vbWFseV9zY29yZV9wbDF9JyIKClNlY1J1bGUgVFg6UEFSQU5PSUFfTEVWRUwgIkBnZSAyIiBcCiAgICAiaWQ6OTU5MDYxLFwKICAgIHBoYXNlOjQsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlPSsle3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGwyfSciCgpTZWNSdWxlIFRYOlBBUkFOT0lBX0xFVkVMICJAZ2UgMyIgXAogICAgImlkOjk1OTA2MixcCiAgICBwaGFzZTo0LFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIHNldHZhcjondHgub3V0Ym91bmRfYW5vbWFseV9zY29yZT0rJXt0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsM30nIgoKU2VjUnVsZSBUWDpQQVJBTk9JQV9MRVZFTCAiQGdlIDQiIFwKICAgICJpZDo5NTkwNjMsXAogICAgcGhhc2U6NCxcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICBzZXR2YXI6J3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmU9KyV7dHgub3V0Ym91bmRfYW5vbWFseV9zY29yZV9wbDR9JyIKCgojIEFsZXJ0IGFuZCBCbG9jayBvbiBIaWdoIEFub21hbHkgU2NvcmVzIC0gdGhpcyB3b3VsZCBibG9jayBvdXRib3VuZCBkYXRhIGxlYWthZ2VzCiMKIyBOb3RlOiBUaGlzIHJ1bGUgYWxzbyBzZXRzIHRoZSAndHguYW5vbWFseV9zY29yZScgdmFyaWFibGUuCiMgVGhhdCB2YXJpYWJsZSBuYW1lIHdhcyBmb3JtZXJseSB1c2VkIGluIENSUywgYnV0IG5vdCBhbnkgbG9uZ2VyLgojIEhvd2V2ZXIsIEp3YWxsIEF1ZGl0Q29uc29sZSBkZXBlbmRzIG9uIHRoaXMgZXhhY3QgdmFyaWFibGUgbmFtZS4KIyBXaXRob3V0IHNldHRpbmcgaXQsIHRoZSAnT3V0Ym91bmQgU2NvcmUnIGluIHRoZSBBdWRpdENvbnNvbGUgR1VJIHdvdWxkIGFsd2F5cyBiZSAwLgoKU2VjUnVsZSBUWDpPVVRCT1VORF9BTk9NQUxZX1NDT1JFICJAZ2UgJXt0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3RocmVzaG9sZH0iIFwKICAgICJpZDo5NTkxMDAsXAogICAgcGhhc2U6NCxcCiAgICBkZW55LFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J091dGJvdW5kIEFub21hbHkgU2NvcmUgRXhjZWVkZWQgKFRvdGFsIFNjb3JlOiAle1RYLk9VVEJPVU5EX0FOT01BTFlfU0NPUkV9KScsXAogICAgdGFnOidhbm9tYWx5LWV2YWx1YXRpb24nLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmU9KyV7dHgub3V0Ym91bmRfYW5vbWFseV9zY29yZX0nIgoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDEiICJpZDo5NTkwMTEscGhhc2U6MyxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTU5LUJMT0NLSU5HLUVWQUxVQVRJT04iClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMSIgImlkOjk1OTAxMixwaGFzZTo0LHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTktQkxPQ0tJTkctRVZBTFVBVElPTiIKIwojIC09IFBhcmFub2lhIExldmVsIDEgKGRlZmF1bHQpID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAxIG9yIGhpZ2hlcikKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5NTkwMTMscGhhc2U6MyxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTU5LUJMT0NLSU5HLUVWQUxVQVRJT04iClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMiIgImlkOjk1OTAxNCxwaGFzZTo0LHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTktQkxPQ0tJTkctRVZBTFVBVElPTiIKIwojIC09IFBhcmFub2lhIExldmVsIDIgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDIgb3IgaGlnaGVyKQojCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMyIgImlkOjk1OTAxNSxwaGFzZTozLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTktQkxPQ0tJTkctRVZBTFVBVElPTiIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAzIiAiaWQ6OTU5MDE2LHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1OS1CTE9DS0lORy1FVkFMVUFUSU9OIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMyA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMyBvciBoaWdoZXIpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTU5MDE3LHBoYXNlOjMscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1OS1CTE9DS0lORy1FVkFMVUFUSU9OIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDQiICJpZDo5NTkwMTgscGhhc2U6NCxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTU5LUJMT0NLSU5HLUVWQUxVQVRJT04iCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCA0ID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiA0IG9yIGhpZ2hlcikKIwoKCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWxzIEZpbmlzaGVkID0tCiMKU2VjTWFya2VyICJFTkQtUkVTUE9OU0UtOTU5LUJMT0NLSU5HLUVWQUxVQVRJT04iCg==",
	"RESPONSE-980-CORRELATION.conf":                        "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuMgojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgVGhlIE9XQVNQIE1vZFNlY3VyaXR5IENvcmUgUnVsZSBTZXQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIKIyBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAoQVNMKSB2ZXJzaW9uIDIKIyBQbGVhc2Ugc2VlIHRoZSBlbmNsb3NlZCBMSUNFTlNFIGZpbGUgZm9yIGZ1bGwgZGV0YWlscy4KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMKIyBUaGlzIGZpbGUgaXMgdXNlZCBpbiBwb3N0IHByb2Nlc3NpbmcgYWZ0ZXIgdGhlIHJlc3BvbnNlIGhhcyBiZWVuIHNlbnQgdG8KIyB0aGUgY2xpZW50IChpbiB0aGUgbG9nZ2luZyBwaGFzZSkuICBJdHMgcHVycG9zZSBpcyB0byBwcm92aWRlIGluYm91bmQrb3V0Ym91bmQKIyBjb3JyZWxhdGlvbiBvZiBldmVudHMgdG8gcHJvdmlkZSBhIG1vcmUgaW50ZWxsaWdlbnQgZGVzaWduYXRpb24gYXMgdG8gdGhlIG91dGNvbWUKIyBvciByZXN1bHQgb2YgdGhlIHRyYW5zYWN0aW9uIC0gbWVhbmluZywgd2FzIHRoaXMgYSBzdWNjZXNzZnVsIGF0dGFjaz8KIwoKIwojIC09IFBhcmFub2lhIExldmVsIDAgKGVtcHR5KSA9LSAoYXBwbHkgdW5jb25kaXRpb25hbGx5KQojCgojCiMgLT1bIENvcnJlbGF0ZWQgU3VjY2Vzc2Z1bCBBdHRhY2sgXT0tCiMKU2VjUnVsZSAmVFg6Jy9MRUFLQUdFXFxcL0VSUk9SUy8nICJAZ2UgMSIgXAogICAgImlkOjk4MDEwMCxcCiAgICBwaGFzZTo1LFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIGxvZyxcCiAgICBtc2c6J0NvcnJlbGF0ZWQgU3VjY2Vzc2Z1bCBBdHRhY2sgSWRlbnRpZmllZDogKFRvdGFsIFNjb3JlOiAle3R4LmFub21hbHlfc2NvcmV9KSBJbmJvdW5kIEF0dGFjayAoSW5ib3VuZCBBbm9tYWx5IFNjb3JlOiAle1RYLklOQk9VTkRfQU5PTUFMWV9TQ09SRX0pICsgT3V0Ym91bmQgRGF0YSBMZWFrYWdlIChPdXRib3VuZCBBbm9tYWx5IFNjb3JlOiAle1RYLk9VVEJPVU5EX0FOT01BTFlfU0NPUkV9KScsXAogICAgdGFnOidldmVudC1jb3JyZWxhdGlvbicsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInLFwKICAgIHNldmVyaXR5OidFTUVSR0VOQ1knLFwKICAgIGNoYWluLFwKICAgIHNraXBBZnRlcjpFTkQtQ09SUkVMQVRJT04iCiAgICBTZWNSdWxlICZUWDonL1dFQl9BVFRBQ0svJyAiQGdlIDEiICJ0Om5vbmUiCgojCiMgLT1bIENvcnJlbGF0ZWQgQXR0YWNrIEF0dGVtcHQgXT0tCiMKU2VjUnVsZSAmVFg6Jy9BVkFJTEFCSUxJVFlcXFwvQVBQX05PVF9BVkFJTC8nICJAZ2UgMSIgXAogICAgImlkOjk4MDExMCxcCiAgICBwaGFzZTo1LFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIGxvZyxcCiAgICBtc2c6J0NvcnJlbGF0ZWQgQXR0YWNrIEF0dGVtcHQgSWRlbnRpZmllZDogKFRvdGFsIFNjb3JlOiAle3R4LmFub21hbHlfc2NvcmV9KSBJbmJvdW5kIEF0dGFjayAoSW5ib3VuZCBBbm9tYWx5IFNjb3JlOiAle1RYLklOQk9VTkRfQU5PTUFMWV9TQ09SRX0pICsgT3V0Ym91bmQgQXBwbGljYXRpb24gRXJyb3IgKE91dGJvdW5kIEFub21hbHkgU2NvcmU6ICV7VFguT1VUQk9VTkRfQU5PTUFMWV9TQ09SRX0pJyxcCiAgICB0YWc6J2V2ZW50LWNvcnJlbGF0aW9uJyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgc2V2ZXJpdHk6J0FMRVJUJyxcCiAgICBjaGFpbixcCiAgICBza2lwQWZ0ZXI6RU5ELUNPUlJFTEFUSU9OIgogICAgU2VjUnVsZSAmVFg6Jy9XRUJfQVRUQUNLLycgIkBnZSAxIiAidDpub25lIgoKIyBDcmVhdGluZyBhIHRvdGFsIHN1bSBvZiBhbGwgdHJpZ2dlcmVkIGluYm91bmQgcnVsZXMsIGluY2x1ZGluZyB0aGUgb25lcyBvbmx5IGJlaW5nIG1vbml0b3JlZApTZWNBY3Rpb24gXAogICAgImlkOjk4MDExNSxcCiAgICBwaGFzZTo1LFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIG5vYXVkaXRsb2csXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInLFwKICAgIHNldHZhcjondHguZXhlY3V0aW5nX2Fub21hbHlfc2NvcmU9JXt0eC5hbm9tYWx5X3Njb3JlX3BsMX0nLFwKICAgIHNldHZhcjondHguZXhlY3V0aW5nX2Fub21hbHlfc2NvcmU9KyV7dHguYW5vbWFseV9zY29yZV9wbDJ9JyxcCiAgICBzZXR2YXI6J3R4LmV4ZWN1dGluZ19hbm9tYWx5X3Njb3JlPSsle3R4LmFub21hbHlfc2NvcmVfcGwzfScsXAogICAgc2V0dmFyOid0eC5leGVjdXRpbmdfYW5vbWFseV9zY29yZT0rJXt0eC5hbm9tYWx5X3Njb3JlX3BsNH0nIgoKU2VjUnVsZSBUWDpJTkJPVU5EX0FOT01BTFlfU0NPUkUgIkBsdCAle3R4LmluYm91bmRfYW5vbWFseV9zY29yZV90aHJlc2hvbGR9IiBcCiAgICAiaWQ6OTgwMTIwLFwKICAgIHBoYXNlOjUsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbG9nLFwKICAgIG5vYXVkaXRsb2csXAogICAgbXNnOidJbmJvdW5kIEFub21hbHkgU2NvcmUgKFRvdGFsIEluYm91bmQgU2NvcmU6ICV7VFguSU5CT1VORF9BTk9NQUxZX1NDT1JFfSAtIFNRTEk9JXt0eC5zcWxfaW5qZWN0aW9uX3Njb3JlfSxYU1M9JXt0eC54c3Nfc2NvcmV9LFJGST0le3R4LnJmaV9zY29yZX0sTEZJPSV7dHgubGZpX3Njb3JlfSxSQ0U9JXt0eC5yY2Vfc2NvcmV9LFBIUEk9JXt0eC5waHBfaW5qZWN0aW9uX3Njb3JlfSxIVFRQPSV7dHguaHR0cF92aW9sYXRpb25fc2NvcmV9LFNFU1M9JXt0eC5zZXNzaW9uX2ZpeGF0aW9uX3Njb3JlfSk6IGluZGl2aWR1YWwgcGFyYW5vaWEgbGV2ZWwgc2NvcmVzOiAle1RYLkFOT01BTFlfU0NPUkVfUEwxfSwgJXtUWC5BTk9NQUxZX1NDT1JFX1BMMn0sICV7VFguQU5PTUFMWV9TQ09SRV9QTDN9LCAle1RYLkFOT01BTFlfU0NPUkVfUEw0fScsXAogICAgdGFnOidldmVudC1jb3JyZWxhdGlvbicsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInLFwKICAgIGNoYWluIgogICAgU2VjUnVsZSBUWDpNT05JVE9SX0FOT01BTFlfU0NPUkUgIkBndCAxIgoKU2VjUnVsZSBUWDpJTkJPVU5EX0FOT01BTFlfU0NPUkUgIkBnZSAle3R4LmluYm91bmRfYW5vbWFseV9zY29yZV90aHJlc2hvbGR9IiBcCiAgICAiaWQ6OTgwMTMwLFwKICAgIHBoYXNlOjUsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbG9nLFwKICAgIG5vYXVkaXRsb2csXAogICAgbXNnOidJbmJvdW5kIEFub21hbHkgU2NvcmUgRXhjZWVkZWQgKFRvdGFsIEluYm91bmQgU2NvcmU6ICV7VFguSU5CT1VORF9BTk9NQUxZX1NDT1JFfSAtIFNRTEk9JXt0eC5zcWxfaW5qZWN0aW9uX3Njb3JlfSxYU1M9JXt0eC54c3Nfc2NvcmV9LFJGST0le3R4LnJmaV9zY29yZX0sTEZJPSV7dHgubGZpX3Njb3JlfSxSQ0U9JXt0eC5yY2Vfc2NvcmV9LFBIUEk9JXt0eC5waHBfaW5qZWN0aW9uX3Njb3JlfSxIVFRQPSV7dHguaHR0cF92aW9sYXRpb25fc2NvcmV9LFNFU1M9JXt0eC5zZXNzaW9uX2ZpeGF0aW9uX3Njb3JlfSk6IGluZGl2aWR1YWwgcGFyYW5vaWEgbGV2ZWwgc2NvcmVzOiAle1RYLkFOT01BTFlfU0NPUkVfUEwxfSwgJXtUWC5BTk9NQUxZX1NDT1JFX1BMMn0sICV7VFguQU5PTUFMWV9TQ09SRV9QTDN9LCAle1RYLkFOT01BTFlfU0NPUkVfUEw0fScsXAogICAgdGFnOidldmVudC1jb3JyZWxhdGlvbicsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjInIgoKU2VjUnVsZSBUWDpPVVRCT1VORF9BTk9NQUxZX1NDT1JFICJAZ2UgJXt0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3RocmVzaG9sZH0iIFwKICAgICJpZDo5ODAxNDAsXAogICAgcGhhc2U6NSxcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBsb2csXAogICAgbm9hdWRpdGxvZyxcCiAgICBtc2c6J091dGJvdW5kIEFub21hbHkgU2NvcmUgRXhjZWVkZWQgKHNjb3JlICV7VFguT1VUQk9VTkRfQU5PTUFMWV9TQ09SRX0pOiBpbmRpdmlkdWFsIHBhcmFub2lhIGxldmVsIHNjb3JlczogJXtUWC5PVVRCT1VORF9BTk9NQUxZX1NDT1JFX1BMMX0sICV7VFguT1VUQk9VTkRfQU5PTUFMWV9TQ09SRV9QTDJ9LCAle1RYLk9VVEJPVU5EX0FOT01BTFlfU0NPUkVfUEwzfSwgJXtUWC5PVVRCT1VORF9BTk9NQUxZX1NDT1JFX1BMNH0nLFwKICAgIHRhZzonZXZlbnQtY29ycmVsYXRpb24nLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyIKCiMgQ3JlYXRpbmcgYSB0b3RhbCBzdW0gb2YgYWxsIHRyaWdnZXJlZCBvdXRib3VuZCBydWxlcywgaW5jbHVkaW5nIHRoZSBvbmVzIG9ubHkgYmVpbmcgbW9uaXRvcmVkClNlY0FjdGlvbiBcCiAgICAiaWQ6OTgwMTQ1LFwKICAgIHBoYXNlOjUsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgbm9hdWRpdGxvZyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuMicsXAogICAgc2V0dmFyOid0eC5leGVjdXRpbmdfYW5vbWFseV9zY29yZT0le3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGwxfScsXAogICAgc2V0dmFyOid0eC5leGVjdXRpbmdfYW5vbWFseV9zY29yZT0rJXt0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMn0nLFwKICAgIHNldHZhcjondHguZXhlY3V0aW5nX2Fub21hbHlfc2NvcmU9KyV7dHgub3V0Ym91bmRfYW5vbWFseV9zY29yZV9wbDN9JyxcCiAgICBzZXR2YXI6J3R4LmV4ZWN1dGluZ19hbm9tYWx5X3Njb3JlPSsle3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGw0fSciCgpTZWNSdWxlIFRYOk9VVEJPVU5EX0FOT01BTFlfU0NPUkUgIkBsdCAle3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfdGhyZXNob2xkfSIgXAogICAgImlkOjk4MDE1MCxcCiAgICBwaGFzZTo1LFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIGxvZyxcCiAgICBub2F1ZGl0bG9nLFwKICAgIG1zZzonT3V0Ym91bmQgQW5vbWFseSBTY29yZSAoVG90YWwgT3V0Ym91bmQgU2NvcmU6ICV7VFguT1VUQk9VTkRfQU5PTUFMWV9TQ09SRX0pOiBpbmRpdmlkdWFsIHBhcmFub2lhIGxldmVsIHNjb3JlczogJXtUWC5PVVRCT1VORF9BTk9NQUxZX1NDT1JFX1BMMX0sICV7VFguT1VUQk9VTkRfQU5PTUFMWV9TQ09SRV9QTDJ9LCAle1RYLk9VVEJPVU5EX0FOT01BTFlfU0NPUkVfUEwzfSwgJXtUWC5PVVRCT1VORF9BTk9NQUxZX1NDT1JFX1BMNH0nLFwKICAgIHRhZzonZXZlbnQtY29ycmVsYXRpb24nLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy4yJyxcCiAgICBjaGFpbiIKICAgIFNlY1J1bGUgVFg6TU9OSVRPUl9BTk9NQUxZX1NDT1JFICJAZ3QgMSIKClNlY01hcmtlciAiRU5ELUNPUlJFTEFUSU9OIgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMSIgImlkOjk4MDAxMSxwaGFzZToxLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05ODAtQ09SUkVMQVRJT04iClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMSIgImlkOjk4MDAxMixwaGFzZToyLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05ODAtQ09SUkVMQVRJT04iCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAxIChkZWZhdWx0KSA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMSBvciBoaWdoZXIpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAyIiAiaWQ6OTgwMDEzLHBoYXNlOjEscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk4MC1DT1JSRUxBVElPTiIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAyIiAiaWQ6OTgwMDE0LHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk4MC1DT1JSRUxBVElPTiIKIwojIC09IFBhcmFub2lhIExldmVsIDIgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDIgb3IgaGlnaGVyKQojCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMyIgImlkOjk4MDAxNSxwaGFzZToxLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05ODAtQ09SUkVMQVRJT04iClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMyIgImlkOjk4MDAxNixwaGFzZToyLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05ODAtQ09SUkVMQVRJT04iCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAzID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAzIG9yIGhpZ2hlcikKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDQiICJpZDo5ODAwMTcscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTgwLUNPUlJFTEFUSU9OIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDQiICJpZDo5ODAwMTgscGhhc2U6MixwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTgwLUNPUlJFTEFUSU9OIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgNCA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogNCBvciBoaWdoZXIpCiMKCgoKIwojIC09IFBhcmFub2lhIExldmVscyBGaW5pc2hlZCA9LQojClNlY01hcmtlciAiRU5ELVJFU1BPTlNFLTk4MC1DT1JSRUxBVElPTiIK",
	"RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example":  "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuMgojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgVGhlIE9XQVNQIE1vZFNlY3VyaXR5IENvcmUgUnVsZSBTZXQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIKIyBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAoQVNMKSB2ZXJzaW9uIDIKIyBQbGVhc2Ugc2VlIHRoZSBlbmNsb3NlZCBMSUNFTlNFIGZpbGUgZm9yIGZ1bGwgZGV0YWlscy4KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMKIyBUaGUgcHVycG9zZSBvZiB0aGlzIGZpbGUgaXMgdG8gaG9sZCBMT0NBTCBleGNlcHRpb25zIGZvciB5b3VyIHNpdGUuCiMgVGhlIHR5cGVzIG9mIHJ1bGVzIHRoYXQgd291bGQgZ28gaW50byB0aGlzIGZpbGUgYXJlIG9uZSB3aGVyZSB5b3Ugd2FudAojIHRvIHVuY29uZGl0aW9uYWxseSBkaXNhYmxlIHJ1bGVzIG9yIG1vZGlmeSB0aGVpciBhY3Rpb25zIGR1cmluZyBzdGFydHVwLgojCiMgUGxlYXNlIHNlZSB0aGUgZmlsZSBSRVFVRVNULTkwMC1FWENMVVNJT04tUlVMRVMtQkVGT1JFLUNSUy5jb25mLmV4YW1wbGUKIyBmb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgcnVsZSBleGNsdXNpb25zIG1lY2hhbmlzbSBhbmQgdGhlIGNvcnJlY3QKIyB1c2Ugb2YgdGhpcyBmaWxlLgojCgojCiMgRXhhbXBsZSBFeGNsdXNpb24gUnVsZTogVG8gdW5jb25kaXRpb25hbGx5IGRpc2FibGUgYSBydWxlIElECiMKIyBNb2RTZWN1cml0eSBSdWxlIEV4Y2x1c2lvbjogOTQyMTAwIFNRTCBJbmplY3Rpb24gRGV0ZWN0ZWQgdmlhIGxpYmluamVjdGlvbgojIFNlY1J1bGVSZW1vdmVCeUlkIDk0MjEwMAoKIyBFeGFtcGxlIEV4Y2x1c2lvbiBSdWxlOiBSZW1vdmUgYSBncm91cCBvZiBydWxlcwojCiMgTW9kU2VjdXJpdHkgUnVsZSBFeGNsdXNpb246IERpc2FibGUgUEhQIGluamVjdGlvbiBydWxlcwojIFNlY1J1bGVSZW1vdmVCeVRhZyAiYXR0YWNrLWluamVjdGlvbi1waHAiCgojCiMgRXhhbXBsZSBFeGNsdXNpb24gUnVsZTogVG8gdW5jb25kaXRpb25hbGx5IHJlbW92ZSBwYXJhbWV0ZXIgImZvbyIgZnJvbQojICAgICAgICAgICAgICAgICAgICAgICAgIGluc3BlY3Rpb24gZm9yIFNRTGkgcnVsZXMKIwojIE1vZFNlY3VyaXR5IFJ1bGUgRXhjbHVzaW9uOiBkaXNhYmxlIHNxbGkgcnVsZXMgZm9yIHBhcmFtZXRlciBmb28uCiMgU2VjUnVsZVVwZGF0ZVRhcmdldEJ5VGFnICJhdHRhY2stc3FsaSIgIiFBUkdTOmZvbyIKCgojIC0tIFtbIENoYW5naW5nIHRoZSBEaXNydXB0aXZlIEFjdGlvbiBmb3IgQW5vbWFseSBNb2RlIF1dIC0tCiMKIyBJbiBBbm9tYWx5IE1vZGUgKGRlZmF1bHQgaW4gQ1JTMyksIHRoZSBydWxlcyBpbiBSRVFVRVNULTk0OS1CTE9DS0lORy1FVkFMVUFUSU9OLmNvbmYKIyBhbmQgUkVTUE9OU0UtOTU5LUJMT0NLSU5HLUVWQUxVQVRJT04uY29uZiBjaGVjayB0aGUgYWNjdW11bGF0ZWQgYXR0YWNrIHNjb3JlcwojIGFnYWluc3QgeW91ciBwb2xpY3kuIFRvIGFwcGx5IGEgZGlzcnVwdGl2ZSBhY3Rpb24sIHRoZXkgb3ZlcndyaXRlIHRoZSBkZWZhdWx0CiMgYWN0aW9ucyBzcGVjaWZpZWQgaW4gU2VjRGVmYXVsdEFjdGlvbiAoc2V0dXAuY29uZikgd2l0aCBhICdkZW55JyBhY3Rpb24uCiMgVGhpcyAnZGVueScgaXMgYnkgZGVmYXVsdCBwYWlyZWQgd2l0aCBhICdzdGF0dXM6NDAzJyBhY3Rpb24uCiMKIyBJbiBvcmRlciB0byBjaGFuZ2UgdGhlIGRpc3J1cHRpdmUgYWN0aW9uIGZyb20gJ2RlbnknIHRvIHNvbWV0aGluZyBlbHNlLAojIHlvdSBtdXN0IHVzZSBTZWNSdWxlVXBkYXRlQWN0aW9uQnlJRCBkaXJlY3RpdmVzIEFGVEVSIHRoZSBDUlMgcnVsZXMKIyBhcmUgY29uZmlndXJlZCwgZm9yIGluc3RhbmNlIGluIHRoZSBSRVNQT05TRS05OTktRVhDTFVTSU9OLVJVTEVTLUFGVEVSLUNSUy5jb25mIGZpbGUuCiMKIyBUaGVzZSBhY3Rpb25zIG9ubHkgYXBwbHkgd2hlbiB1c2luZyBBbm9tYWx5IE1vZGUuCiMKIyBEZWZhdWx0IGFjdGlvbjogYmxvY2sgd2l0aCBlcnJvciA0MDMKIyAoTm8gY29uZmlndXJhdGlvbiBuZWVkZWQgaW4gdGhpcyBmaWxlIGlmIHlvdSB3YW50IHRoZSBkZWZhdWx0IGJlaGF2aW9yLikKIwoKIyBFeGFtcGxlOiByZWRpcmVjdCBiYWNrIHRvIHRoZSBob21lcGFnZSBvbiBibG9ja2luZwojCiMgU2VjUnVsZVVwZGF0ZUFjdGlvbkJ5SWQgOTQ5MTEwICJ0Om5vbmUscmVkaXJlY3Q6J2h0dHA6Ly8le3JlcXVlc3RfaGVhZGVycy5ob3N0fS8nIgojIFNlY1J1bGVVcGRhdGVBY3Rpb25CeUlkIDk1OTEwMCAidDpub25lLHJlZGlyZWN0OidodHRwOi8vJXtyZXF1ZXN0X2hlYWRlcnMuaG9zdH0vJyIKCiMgRXhhbXBsZTogcmVkaXJlY3QgdG8gYW5vdGhlciBVUkwgb24gYmxvY2tpbmcKIwojIFNlY1J1bGVVcGRhdGVBY3Rpb25CeUlkIDk0OTExMCAidDpub25lLHJlZGlyZWN0OidodHRwOi8vZXhhbXBsZS5jb20vcmVwb3J0X3Byb2JsZW0nIgojIFNlY1J1bGVVcGRhdGVBY3Rpb25CeUlkIDk1OTEwMCAidDpub25lLHJlZGlyZWN0OidodHRwOi8vZXhhbXBsZS5jb20vcmVwb3J0X3Byb2JsZW0nIgoKIyBFeGFtcGxlOiBzZW5kIGFuIGVycm9yIDQwNAojCiMgU2VjUnVsZVVwZGF0ZUFjdGlvbkJ5SWQgOTQ5MTEwICJ0Om5vbmUsZGVueSxzdGF0dXM6NDA0IgojIFNlY1J1bGVVcGRhdGVBY3Rpb25CeUlkIDk1OTEwMCAidDpub25lLGRlbnksc3RhdHVzOjQwNCIKCiMgRXhhbXBsZTogZHJvcCB0aGUgY29ubmVjdGlvbiAoYmVzdCBmb3IgRG9TIGF0dGFja3MpCiMKIyBTZWNSdWxlVXBkYXRlQWN0aW9uQnlJZCA5NDkxMTAgInQ6bm9uZSxkcm9wIgojIFNlY1J1bGVVcGRhdGVBY3Rpb25CeUlkIDk1OTEwMCAidDpub25lLGRyb3AiCg==",
	"crawlers-user-agents.data":                            "IyBTZWFyY2ggZW5naW5lIGNyYXdsZXJzIGFuZCBvdGhlciBib3RzCiMgY3Jhd2xlcgojIGh0dHBzOi8vODBsZWdzLmNvbS8KODBsZWdzCiMgc2l0ZSByaXBwZXIKIyBodHRwOi8vd3d3LnNvZnRieXRlbGFicy5jb20vZW4vQmxhY2tXaWRvdy8KYmxhY2sgd2lkb3cKYmxhY2t3aWRvdwojIGNyYXdsZXIKIyAyMDA2CnByb3dlYndhbGtlcgojIGdlbmVyaWMgY3Jhd2xlcgpweW1pbGxzLXNwaWRlci8KIyBTRU8KIyBodHRwczovL2FocmVmcy5jb20vcm9ib3QKQWhyZWZzQm90CiMgcGVvcGxlIGRhdGFiYXNlCiMgaHR0cHM6Ly9waXBsLmNvbS9ib3QvClBpcGxCb3QKIyBhZHZlcnRpc2luZyB0YXJnZXRpbmcKIyBodHRwczovL3d3dy5ncmFwZXNob3QuY29tL2NyYXdsZXIvCkdyYXBlc2hvdENyYXdsZXIvMi4wCmdyYXBlRlgKIyBTRU8KIyBodHRwOi8vd3d3LnNlYXJjaG1ldHJpY3MuY29tL3NlYXJjaG1ldHJpY3Nib3QvClNlYXJjaG1ldHJpY3NCb3QKIyBTRU8KIyBodHRwczovL3d3dy5zZW1ydXNoLmNvbS9ib3QvClNlbXJ1c2hCb3QKIyBTRU8KIyBodHRwczovL21vei5jb20vaGVscC9ndWlkZXMvbW96LXByb2NlZHVyZXMvd2hhdC1pcy1yb2dlcmJvdApyb2dlcmJvdAojIFNFTwojIGh0dHA6Ly93d3cubWFqZXN0aWMxMi5jby51ay9wcm9qZWN0cy9kc2VhcmNoL21qMTJib3QucGhwCk1KMTJib3QKIyBuZXdzIHNlcnZpY2UKT3dsaW4gYm90CiMgbWlzYmVoYXZpbmcgc3BpZGVyCkxpbmdld291ZC01NTAtU3B5ZGVyCiMgaHR0cHM6Ly93d3cud2FwcGFseXplci5jb20vCldhcHBhbHl6ZXIK",
	"crs-setup.conf":                                       "",
	"iis-errors.data":                                      "PGgyIHN0eWxlPSJmb250OjhwdC8xMXB0IHZlcmRhbmE7IGNvbG9yOjAwMDAwMCI+SFRUUCA0MDMuNiAtIEZvcmJpZGRlbjogSVAgYWRkcmVzcyByZWplY3RlZDxicj4KPFRJVExFPjUwMCBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3I8L1RJVExFPgpNaWNyb3NvZnQgVkJTY3JpcHQgcnVudGltZSAoMHg4CmVycm9yICc4MDAKQXBwbGljYXRpb24gdXNlcyBhIHZhbHVlIG9mIHRoZSB3cm9uZyB0eXBlIGZvciB0aGUgY3VycmVudCBvcGVyYXRpb24KTWljcm9zb2Z0IFZCU2NyaXB0IGNvbXBpbGF0aW9uICgweDgKTWljcm9zb2Z0IFZCU2NyaXB0IGNvbXBpbGF0aW9uIGVycm9yCk1pY3Jvc29mdCAuTkVUIEZyYW1ld29yayBWZXJzaW9uOgpBIHRyYXBwYWJsZSBlcnJvciBvY2N1cnJlZCBpbiBhbiBleHRlcm5hbCBvYmplY3QuIFRoZSBzY3JpcHQgY2Fubm90IGNvbnRpbnVlIHJ1bm5pbmcKTWljcm9zb2Z0IFZCU2NyaXB0IHJ1bnRpbWUgRXJyb3IKPlN5bnRheCBlcnJvciBpbiBzdHJpbmcgaW4gcXVlcnkgZXhwcmVzc2lvbgpBRE9EQi5Db21tYW5kCk9iamVjdCByZXF1aXJlZDogJwo=",
	"java-classes.data":                                    "Y29tLm9wZW5zeW1waG9ueS54d29yazIKY29tLnN1bi5vcmcuYXBhY2hlCmphdmEuaW8uQnVmZmVyZWRJbnB1dFN0cmVhbQpqYXZhLmlvLkJ1ZmZlcmVkUmVhZGVyCmphdmEuaW8uQnl0ZUFycmF5SW5wdXRTdHJlYW0KamF2YS5pby5CeXRlQXJyYXlPdXRwdXRTdHJlYW0KamF2YS5pby5DaGFyQXJyYXlSZWFkZXIKamF2YS5pby5EYXRhSW5wdXRTdHJlYW0KamF2YS5pby5GaWxlCmphdmEuaW8uRmlsZU91dHB1dFN0cmVhbQpqYXZhLmlvLkZpbGVQZXJtaXNzaW9uCmphdmEuaW8uRmlsZVdyaXRlcgpqYXZhLmlvLkZpbHRlcklucHV0U3RyZWFtCmphdmEuaW8uRmlsdGVyT3V0cHV0U3RyZWFtCmphdmEuaW8uRmlsdGVyUmVhZGVyCmphdmEuaW8uSW5wdXRTdHJlYW0KamF2YS5pby5JbnB1dFN0cmVhbVJlYWRlcgpqYXZhLmlvLkxpbmVOdW1iZXJSZWFkZXIKamF2YS5pby5PYmplY3RPdXRwdXRTdHJlYW0KamF2YS5pby5PdXRwdXRTdHJlYW0KamF2YS5pby5QaXBlZE91dHB1dFN0cmVhbQpqYXZhLmlvLlBpcGVkUmVhZGVyCmphdmEuaW8uUHJpbnRTdHJlYW0KamF2YS5pby5QdXNoYmFja0lucHV0U3RyZWFtCmphdmEuaW8uUmVhZGVyCmphdmEuaW8uU3RyaW5nUmVhZGVyCmphdmEubGFuZy5DbGFzcwpqYXZhLmxhbmcuSW50ZWdlcgpqYXZhLmxhbmcuTnVtYmVyCmphdmEubGFuZy5PYmplY3QKamF2YS5sYW5nLlByb2Nlc3MKamF2YS5sYW5nLlByb2Nlc3NCdWlsZGVyCmphdmEubGFuZy5yZWZsZWN0CmphdmEubGFuZy5SdW50aW1lCmphdmEubGFuZy5TdHJpbmcKamF2YS5sYW5nLlN0cmluZ0J1aWxkZXIKamF2YS5sYW5nLlN5c3RlbQpqYXZheC5zY3JpcHQuU2NyaXB0RW5naW5lTWFuYWdlcgpvcmcuYXBhY2hlLmNvbW1vbnMKb3JnLmFwYWNoZS5zdHJ1dHMKb3JnLmFwYWNoZS5zdHJ1dHMyCm9yZy5vbWcuQ09SQkEKamF2YS5iZWFucy5YTUxEZWNvZGUK",
	"java-code-leakages.data":                              "PGpzcDoKamF2YXguc2VydmxldAouYWRkaGVhZGVyCi5jcmVhdGV0ZXh0ZmlsZQouZ2V0ZmlsZQoubG9hZGZyb21maWxlCnJlc3BvbnNlLmJpbmFyeXdyaXRlCnJlc3BvbnNlLndyaXRlCnNjcmlwdGluZy5maWxlc3lzdGVtb2JqZWN0CnNlcnZlci5jcmVhdGVvYmplY3QKc2VydmVyLmV4ZWN1dGUKc2VydmVyLmh0bWxlbmNvZGUKc2VydmVyLm1hcHBhdGgKc2VydmVyLnVybGVuY29kZQp2YnNjcmlwdC5lbmNvZGUKd3NjcmlwdC5uZXR3b3JrCndzY3JpcHQuc2hlbGwK",
	"java-errors.data":                                     "W2phdmEubGFuZy4KY2xhc3MgamF2YS5sYW5nLgpqYXZhLmxhbmcuTnVsbFBvaW50ZXJFeGNlcHRpb24KamF2YS5ybWkuU2VydmVyRXhjZXB0aW9uCmF0IGphdmEubGFuZy4Kb25jbGljaz0idG9nZ2xlKCdmdWxsIGV4Y2VwdGlvbiBjaGFpbiBzdGFja3RyYWNlJykiCmF0IG9yZy5hcGFjaGUuY2F0YWxpbmEKYXQgb3JnLmFwYWNoZS5jb3lvdGUuCmF0IG9yZy5hcGFjaGUudG9tY2F0LgphdCBvcmcuYXBhY2hlLmphc3Blci4K",
	"lfi-os-files.data":                                    "",
	"modsecdefault.conf":                                   "CiMgLS0gUnVsZSBlbmdpbmUgaW5pdGlhbGl6YXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKIyBFbmFibGUgTW9kU2VjdXJpdHksIGF0dGFjaGluZyBpdCB0byBldmVyeSB0cmFuc2FjdGlvbi4gVXNlIGRldGVjdGlvbgojIG9ubHkgdG8gc3RhcnQgd2l0aCwgYmVjYXVzZSB0aGF0IG1pbmltaXNlcyB0aGUgY2hhbmNlcyBvZiBwb3N0LWluc3RhbGxhdGlvbgojIGRpc3J1cHRpb24uCiMKI1NlY1J1bGVFbmdpbmUgRGV0ZWN0aW9uT25seQpTZWNSdWxlRW5naW5lIE9uCgoKIyAtLSBSZXF1ZXN0IGJvZHkgaGFuZGxpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojIEFsbG93IE1vZFNlY3VyaXR5IHRvIGFjY2VzcyByZXF1ZXN0IGJvZGllcy4gSWYgeW91IGRvbid0LCBNb2RTZWN1cml0eQojIHdvbid0IGJlIGFibGUgdG8gc2VlIGFueSBQT1NUIHBhcmFtZXRlcnMsIHdoaWNoIG9wZW5zIGEgbGFyZ2Ugc2VjdXJpdHkKIyBob2xlIGZvciBhdHRhY2tlcnMgdG8gZXhwbG9pdC4KIwpTZWNSZXF1ZXN0Qm9keUFjY2VzcyBPbgoKCiMgRW5hYmxlIFhNTCByZXF1ZXN0IGJvZHkgcGFyc2VyLgojIEluaXRpYXRlIFhNTCBQcm9jZXNzb3IgaW4gY2FzZSBvZiB4bWwgY29udGVudC10eXBlCiMKU2VjUnVsZSBSRVFVRVNUX0hFQURFUlM6Q29udGVudC1UeXBlICJ0ZXh0L3htbCIgXAogICAgICJpZDonMjAwMDAwJyxwaGFzZToxLHQ6bm9uZSx0Omxvd2VyY2FzZSxwYXNzLG5vbG9nLGN0bDpyZXF1ZXN0Qm9keVByb2Nlc3Nvcj1YTUwiCgojIEVuYWJsZSBKU09OIHJlcXVlc3QgYm9keSBwYXJzZXIuCiMgSW5pdGlhdGUgSlNPTiBQcm9jZXNzb3IgaW4gY2FzZSBvZiBKU09OIGNvbnRlbnQtdHlwZTsgY2hhbmdlIGFjY29yZGluZ2x5CiMgaWYgeW91ciBhcHBsaWNhdGlvbiBkb2VzIG5vdCB1c2UgJ2FwcGxpY2F0aW9uL2pzb24nCiMKU2VjUnVsZSBSRVFVRVNUX0hFQURFUlM6Q29udGVudC1UeXBlICJhcHBsaWNhdGlvbi9qc29uIiBcCiAgICAgImlkOicyMDAwMDEnLHBoYXNlOjEsdDpub25lLHQ6bG93ZXJjYXNlLHBhc3Msbm9sb2csY3RsOnJlcXVlc3RCb2R5UHJvY2Vzc29yPUpTT04iCgojIE1heGltdW0gcmVxdWVzdCBib2R5IHNpemUgd2Ugd2lsbCBhY2NlcHQgZm9yIGJ1ZmZlcmluZy4gSWYgeW91IHN1cHBvcnQKIyBmaWxlIHVwbG9hZHMgdGhlbiB0aGUgdmFsdWUgZ2l2ZW4gb24gdGhlIGZpcnN0IGxpbmUgaGFzIHRvIGJlIGFzIGxhcmdlCiMgYXMgdGhlIGxhcmdlc3QgZmlsZSB5b3UgYXJlIHdpbGxpbmcgdG8gYWNjZXB0LiBUaGUgc2Vjb25kIHZhbHVlIHJlZmVycwojIHRvIHRoZSBzaXplIG9mIGRhdGEsIHdpdGggZmlsZXMgZXhjbHVkZWQuIFlvdSB3YW50IHRvIGtlZXAgdGhhdCB2YWx1ZSBhcwojIGxvdyBhcyBwcmFjdGljYWwuCiMKCiMgU3RvcmUgdXAgdG8gMTI4IEtCIG9mIHJlcXVlc3QgYm9keSBkYXRhIGluIG1lbW9yeS4gV2hlbiB0aGUgbXVsdGlwYXJ0CiMgcGFyc2VyIHJlYWNoZXJzIHRoaXMgbGltaXQsIGl0IHdpbGwgc3RhcnQgdXNpbmcgeW91ciBoYXJkIGRpc2sgZm9yCiMgc3RvcmFnZS4gVGhhdCBpcyBzbG93LCBidXQgdW5hdm9pZGFibGUuCiMKCiMgV2hhdCBkbyBkbyBpZiB0aGUgcmVxdWVzdCBib2R5IHNpemUgaXMgYWJvdmUgb3VyIGNvbmZpZ3VyZWQgbGltaXQuCiMgS2VlcCBpbiBtaW5kIHRoYXQgdGhpcyBzZXR0aW5nIHdpbGwgYXV0b21hdGljYWxseSBiZSBzZXQgdG8gUHJvY2Vzc1BhcnRpYWwKIyB3aGVuIFNlY1J1bGVFbmdpbmUgaXMgc2V0IHRvIERldGVjdGlvbk9ubHkgbW9kZSBpbiBvcmRlciB0byBtaW5pbWl6ZQojIGRpc3J1cHRpb25zIHdoZW4gaW5pdGlhbGx5IGRlcGxveWluZyBNb2RTZWN1cml0eS4KIwpTZWNSZXF1ZXN0Qm9keUxpbWl0QWN0aW9uIFJlamVjdAoKIyBWZXJpZnkgdGhhdCB3ZSd2ZSBjb3JyZWN0bHkgcHJvY2Vzc2VkIHRoZSByZXF1ZXN0IGJvZHkuCiMgQXMgYSBydWxlIG9mIHRodW1iLCB3aGVuIGZhaWxpbmcgdG8gcHJvY2VzcyBhIHJlcXVlc3QgYm9keQojIHlvdSBzaG91bGQgcmVqZWN0IHRoZSByZXF1ZXN0ICh3aGVuIGRlcGxveWVkIGluIGJsb2NraW5nIG1vZGUpCiMgb3IgbG9nIGEgaGlnaC1zZXZlcml0eSBhbGVydCAod2hlbiBkZXBsb3llZCBpbiBkZXRlY3Rpb24tb25seSBtb2RlKS4KIwpTZWNSdWxlIFJFUUJPRFlfRVJST1IgIiFAZXEgMCIgXAoiaWQ6JzIwMDAwMicsIHBoYXNlOjIsdDpub25lLGxvZyxkZW55LHN0YXR1czo0MDAsbXNnOidGYWlsZWQgdG8gcGFyc2UgcmVxdWVzdCBib2R5LicsbG9nZGF0YTonJXtyZXFib2R5X2Vycm9yX21zZ30nLHNldmVyaXR5OjIiCgojIEJ5IGRlZmF1bHQgYmUgc3RyaWN0IHdpdGggd2hhdCB3ZSBhY2NlcHQgaW4gdGhlIG11bHRpcGFydC9mb3JtLWRhdGEKIyByZXF1ZXN0IGJvZHkuIElmIHRoZSBydWxlIGJlbG93IHByb3ZlcyB0byBiZSB0b28gc3RyaWN0IGZvciB5b3VyCiMgZW52aXJvbm1lbnQgY29uc2lkZXIgY2hhbmdpbmcgaXQgdG8gZGV0ZWN0aW9uLW9ubHkuIFlvdSBhcmUgZW5jb3VyYWdlZAojIF9ub3RfIHRvIHJlbW92ZSBpdCBhbHRvZ2V0aGVyLgojClNlY1J1bGUgTVVMVElQQVJUX1NUUklDVF9FUlJPUiAiIUBlcSAwIiBcCiJpZDonMjAwMDAzJyxwaGFzZToyLHQ6bm9uZSxsb2csZGVueSxzdGF0dXM6NDAwLCBcCm1zZzonTXVsdGlwYXJ0IHJlcXVlc3QgYm9keSBmYWlsZWQgc3RyaWN0IHZhbGlkYXRpb246IFwKUEUgJXtSRVFCT0RZX1BST0NFU1NPUl9FUlJPUn0sIFwKQlEgJXtNVUxUSVBBUlRfQk9VTkRBUllfUVVPVEVEfSwgXApCVyAle01VTFRJUEFSVF9CT1VOREFSWV9XSElURVNQQUNFfSwgXApEQiAle01VTFRJUEFSVF9EQVRBX0JFRk9SRX0sIFwKREEgJXtNVUxUSVBBUlRfREFUQV9BRlRFUn0sIFwKSEYgJXtNVUxUSVBBUlRfSEVBREVSX0ZPTERJTkd9LCBcCkxGICV7TVVMVElQQVJUX0xGX0xJTkV9LCBcClNNICV7TVVMVElQQVJUX01JU1NJTkdfU0VNSUNPTE9OfSwgXApJUSAle01VTFRJUEFSVF9JTlZBTElEX1FVT1RJTkd9LCBcCklQICV7TVVMVElQQVJUX0lOVkFMSURfUEFSVH0sIFwKSUggJXtNVUxUSVBBUlRfSU5WQUxJRF9IRUFERVJfRk9MRElOR30sIFwKRkwgJXtNVUxUSVBBUlRfRklMRV9MSU1JVF9FWENFRURFRH0nIgoKIyBEaWQgd2Ugc2VlIGFueXRoaW5nIHRoYXQgbWlnaHQgYmUgYSBib3VuZGFyeT8KIwpTZWNSdWxlIE1VTFRJUEFSVF9VTk1BVENIRURfQk9VTkRBUlkgIiFAZXEgMCIgXAoiaWQ6JzIwMDAwNCcscGhhc2U6Mix0Om5vbmUsbG9nLGRlbnksbXNnOidNdWx0aXBhcnQgcGFyc2VyIGRldGVjdGVkIGEgcG9zc2libGUgdW5tYXRjaGVkIGJvdW5kYXJ5LiciCgojIFBDUkUgVHVuaW5nCiMgV2Ugd2FudCB0byBhdm9pZCBhIHBvdGVudGlhbCBSZWdFeCBEb1MgY29uZGl0aW9uCiMKU2VjUGNyZU1hdGNoTGltaXQgMTAwMApTZWNQY3JlTWF0Y2hMaW1pdFJlY3Vyc2lvbiAxMDAwCgojIFNvbWUgaW50ZXJuYWwgZXJyb3JzIHdpbGwgc2V0IGZsYWdzIGluIFRYIGFuZCB3ZSB3aWxsIG5lZWQgdG8gbG9vayBmb3IgdGhlc2UuCiMgQWxsIG9mIHRoZXNlIGFyZSBwcmVmaXhlZCB3aXRoICJNU0NfIi4gIFRoZSBmb2xsb3dpbmcgZmxhZ3MgY3VycmVudGx5IGV4aXN0OgojCiMgTVNDX1BDUkVfTElNSVRTX0VYQ0VFREVEOiBQQ1JFIG1hdGNoIGxpbWl0cyB3ZXJlIGV4Y2VlZGVkLgojClNlY1J1bGUgVFg6L15NU0NfLyAiIUBzdHJlcSAwIiBcCiAgICAgICAgImlkOicyMDAwMDUnLHBoYXNlOjIsdDpub25lLGRlbnksbXNnOidNb2RTZWN1cml0eSBpbnRlcm5hbCBlcnJvciBmbGFnZ2VkOiAle01BVENIRURfVkFSX05BTUV9JyIKCgojIC0tIFJlc3BvbnNlIGJvZHkgaGFuZGxpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMgQWxsb3cgTW9kU2VjdXJpdHkgdG8gYWNjZXNzIHJlc3BvbnNlIGJvZGllcy4gCiMgWW91IHNob3VsZCBoYXZlIHRoaXMgZGlyZWN0aXZlIGVuYWJsZWQgaW4gb3JkZXIgdG8gaWRlbnRpZnkgZXJyb3JzCiMgYW5kIGRhdGEgbGVha2FnZSBpc3N1ZXMuCiMgCiMgRG8ga2VlcCBpbiBtaW5kIHRoYXQgZW5hYmxpbmcgdGhpcyBkaXJlY3RpdmUgZG9lcyBpbmNyZWFzZXMgYm90aAojIG1lbW9yeSBjb25zdW1wdGlvbiBhbmQgcmVzcG9uc2UgbGF0ZW5jeS4KIwpTZWNSZXNwb25zZUJvZHlBY2Nlc3MgT24KCiMgV2hpY2ggcmVzcG9uc2UgTUlNRSB0eXBlcyBkbyB5b3Ugd2FudCB0byBpbnNwZWN0PyBZb3Ugc2hvdWxkIGFkanVzdCB0aGUKIyBjb25maWd1cmF0aW9uIGJlbG93IHRvIGNhdGNoIGRvY3VtZW50cyBidXQgYXZvaWQgc3RhdGljIGZpbGVzCiMgKGUuZy4sIGltYWdlcyBhbmQgYXJjaGl2ZXMpLgojClNlY1Jlc3BvbnNlQm9keU1pbWVUeXBlIHRleHQvcGxhaW4gdGV4dC9odG1sIHRleHQveG1sCgojIEJ1ZmZlciByZXNwb25zZSBib2RpZXMgb2YgdXAgdG8gNTEyIEtCIGluIGxlbmd0aC4KU2VjUmVzcG9uc2VCb2R5TGltaXQgNTI0Mjg4CgojIFdoYXQgaGFwcGVucyB3aGVuIHdlIGVuY291bnRlciBhIHJlc3BvbnNlIGJvZHkgbGFyZ2VyIHRoYW4gdGhlIGNvbmZpZ3VyZWQKIyBsaW1pdD8gQnkgZGVmYXVsdCwgd2UgcHJvY2VzcyB3aGF0IHdlIGhhdmUgYW5kIGxldCB0aGUgcmVzdCB0aHJvdWdoLgojIFRoYXQncyBzb21ld2hhdCBsZXNzIHNlY3VyZSwgYnV0IGRvZXMgbm90IGJyZWFrIGFueSBsZWdpdGltYXRlIHBhZ2VzLgojClNlY1Jlc3BvbnNlQm9keUxpbWl0QWN0aW9uIFByb2Nlc3NQYXJ0aWFsCgoKIyAtLSBGaWxlc3lzdGVtIGNvbmZpZ3VyYXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojIFRoZSBsb2NhdGlvbiB3aGVyZSBNb2RTZWN1cml0eSBzdG9yZXMgdGVtcG9yYXJ5IGZpbGVzIChmb3IgZXhhbXBsZSwgd2hlbgojIGl0IG5lZWRzIHRvIGhhbmRsZSBhIGZpbGUgdXBsb2FkIHRoYXQgaXMgbGFyZ2VyIHRoYW4gdGhlIGNvbmZpZ3VyZWQgbGltaXQpLgojIAojIFRoaXMgZGVmYXVsdCBzZXR0aW5nIGlzIGNob3NlbiBkdWUgdG8gYWxsIHN5c3RlbXMgaGF2ZSAvdG1wIGF2YWlsYWJsZSBob3dldmVyLCAKIyB0aGlzIGlzIGxlc3MgdGhhbiBpZGVhbC4gSXQgaXMgcmVjb21tZW5kZWQgdGhhdCB5b3Ugc3BlY2lmeSBhIGxvY2F0aW9uIHRoYXQncyBwcml2YXRlLgojClNlY1RtcERpciAvdG1wLwoKIyBUaGUgbG9jYXRpb24gd2hlcmUgTW9kU2VjdXJpdHkgd2lsbCBrZWVwIGl0cyBwZXJzaXN0ZW50IGRhdGEuICBUaGlzIGRlZmF1bHQgc2V0dGluZyAKIyBpcyBjaG9zZW4gZHVlIHRvIGFsbCBzeXN0ZW1zIGhhdmUgL3RtcCBhdmFpbGFibGUgaG93ZXZlciwgaXQKIyB0b28gc2hvdWxkIGJlIHVwZGF0ZWQgdG8gYSBwbGFjZSB0aGF0IG90aGVyIHVzZXJzIGNhbid0IGFjY2Vzcy4KIwpTZWNEYXRhRGlyIC90bXAvCgoKIyAtLSBGaWxlIHVwbG9hZHMgaGFuZGxpbmcgY29uZmlndXJhdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojIFRoZSBsb2NhdGlvbiB3aGVyZSBNb2RTZWN1cml0eSBzdG9yZXMgaW50ZXJjZXB0ZWQgdXBsb2FkZWQgZmlsZXMuIFRoaXMKIyBsb2NhdGlvbiBtdXN0IGJlIHByaXZhdGUgdG8gTW9kU2VjdXJpdHkuIFlvdSBkb24ndCB3YW50IG90aGVyIHVzZXJzIG9uCiMgdGhlIHNlcnZlciB0byBhY2Nlc3MgdGhlIGZpbGVzLCBkbyB5b3U/CiMKI1NlY1VwbG9hZERpciAvb3B0L21vZHNlY3VyaXR5L3Zhci91cGxvYWQvCgojIEJ5IGRlZmF1bHQsIG9ubHkga2VlcCB0aGUgZmlsZXMgdGhhdCB3ZXJlIGRldGVybWluZWQgdG8gYmUgdW51c3VhbAojIGluIHNvbWUgd2F5IChieSBhbiBleHRlcm5hbCBpbnNwZWN0aW9uIHNjcmlwdCkuIEZvciB0aGlzIHRvIHdvcmsgeW91CiMgd2lsbCBhbHNvIG5lZWQgYXQgbGVhc3Qgb25lIGZpbGUgaW5zcGVjdGlvbiBydWxlLgojCiNTZWNVcGxvYWRLZWVwRmlsZXMgUmVsZXZhbnRPbmx5CgojIFVwbG9hZGVkIGZpbGVzIGFyZSBieSBkZWZhdWx0IGNyZWF0ZWQgd2l0aCBwZXJtaXNzaW9ucyB0aGF0IGRvIG5vdCBhbGxvdwojIGFueSBvdGhlciB1c2VyIHRvIGFjY2VzcyB0aGVtLiBZb3UgbWF5IG5lZWQgdG8gcmVsYXggdGhhdCBpZiB5b3Ugd2FudCB0bwojIGludGVyZmFjZSBNb2RTZWN1cml0eSB0byBhbiBleHRlcm5hbCBwcm9ncmFtIChlLmcuLCBhbiBhbnRpLXZpcnVzKS4KIwojU2VjVXBsb2FkRmlsZU1vZGUgMDYwMAoKCiMgLS0gRGVidWcgbG9nIGNvbmZpZ3VyYXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKIyBUaGUgZGVmYXVsdCBkZWJ1ZyBsb2cgY29uZmlndXJhdGlvbiBpcyB0byBkdXBsaWNhdGUgdGhlIGVycm9yLCB3YXJuaW5nCiMgYW5kIG5vdGljZSBtZXNzYWdlcyBmcm9tIHRoZSBlcnJvciBsb2cuCiMKI1NlY0RlYnVnTG9nIC9vcHQvbW9kc2VjdXJpdHkvdmFyL2xvZy9kZWJ1Zy5sb2cKI1NlY0RlYnVnTG9nTGV2ZWwgMwpTZWNEZWJ1Z0xvZyAvdG1wL21vZHNlY3VyaXR5X2RlYnVnLmxvZwpTZWNEZWJ1Z0xvZ0xldmVsIDkKCgojIC0tIEF1ZGl0IGxvZyBjb25maWd1cmF0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMgTG9nIHRoZSB0cmFuc2FjdGlvbnMgdGhhdCBhcmUgbWFya2VkIGJ5IGEgcnVsZSwgYXMgd2VsbCBhcyB0aG9zZSB0aGF0CiMgdHJpZ2dlciBhIHNlcnZlciBlcnJvciAoZGV0ZXJtaW5lZCBieSBhIDV4eCBvciA0eHgsIGV4Y2x1ZGluZyA0MDQsICAKIyBsZXZlbCByZXNwb25zZSBzdGF0dXMgY29kZXMpLgojClNlY0F1ZGl0RW5naW5lIFJlbGV2YW50T25seQpTZWNBdWRpdExvZ1JlbGV2YW50U3RhdHVzICJeKD86NXw0KD8hMDQpKSIKCiMgTG9nIGV2ZXJ5dGhpbmcgd2Uga25vdyBhYm91dCBhIHRyYW5zYWN0aW9uLgpTZWNBdWRpdExvZ1BhcnRzIEFCSUpERUZIWgoKIyBVc2UgYSBzaW5nbGUgZmlsZSBmb3IgbG9nZ2luZy4gVGhpcyBpcyBtdWNoIGVhc2llciB0byBsb29rIGF0LCBidXQKIyBhc3N1bWVzIHRoYXQgeW91IHdpbGwgdXNlIHRoZSBhdWRpdCBsb2cgb25seSBvY2Nhc2lvbmFsbHkuCiMKU2VjQXVkaXRMb2dUeXBlIFNlcmlhbApTZWNBdWRpdExvZyAvdG1wL21vZHNlY19hdWRpdC5sb2cKCiMgU3BlY2lmeSB0aGUgcGF0aCBmb3IgY29uY3VycmVudCBhdWRpdCBsb2dnaW5nLgojU2VjQXVkaXRMb2dTdG9yYWdlRGlyIC9vcHQvbW9kc2VjdXJpdHkvdmFyL2F1ZGl0LwoKCiMgLS0gTWlzY2VsbGFuZW91cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKIyBVc2UgdGhlIG1vc3QgY29tbW9ubHkgdXNlZCBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQgcGFyYW1ldGVyCiMgc2VwYXJhdG9yLiBUaGVyZSdzIHByb2JhYmx5IG9ubHkgb25lIGFwcGxpY2F0aW9uIHNvbWV3aGVyZSB0aGF0IHVzZXMKIyBzb21ldGhpbmcgZWxzZSBzbyBkb24ndCBleHBlY3QgdG8gY2hhbmdlIHRoaXMgdmFsdWUuCiMKU2VjQXJndW1lbnRTZXBhcmF0b3IgJgoKIyBTZXR0bGUgb24gdmVyc2lvbiAwICh6ZXJvKSBjb29raWVzLCBhcyB0aGF0IGlzIHdoYXQgbW9zdCBhcHBsaWNhdGlvbnMKIyB1c2UuIFVzaW5nIGFuIGluY29ycmVjdCBjb29raWUgdmVyc2lvbiBtYXkgb3BlbiB5b3VyIGluc3RhbGxhdGlvbiB0bwojIGV2YXNpb24gYXR0YWNrcyAoYWdhaW5zdCB0aGUgcnVsZXMgdGhhdCBleGFtaW5lIG5hbWVkIGNvb2tpZXMpLgojClNlY0Nvb2tpZUZvcm1hdCAwCgojIFNwZWNpZnkgeW91ciBVbmljb2RlIENvZGUgUG9pbnQuCiMgVGhpcyBtYXBwaW5nIGlzIHVzZWQgYnkgdGhlIHQ6dXJsRGVjb2RlVW5pIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uCiMgdG8gcHJvcGVybHkgbWFwIGVuY29kZWQgZGF0YSB0byB5b3VyIGxhbmd1YWdlLiBQcm9wZXJseSBzZXR0aW5nCiMgdGhlc2UgZGlyZWN0aXZlcyBoZWxwcyB0byByZWR1Y2UgZmFsc2UgcG9zaXRpdmVzIGFuZCBuZWdhdGl2ZXMuCiMKI1NlY1VuaWNvZGVNYXBGaWxlIHVuaWNvZGUubWFwcGluZyAyMDEyNwoKIyBJbXByb3ZlIHRoZSBxdWFsaXR5IG9mIE1vZFNlY3VyaXR5IGJ5IHNoYXJpbmcgaW5mb3JtYXRpb24gYWJvdXQgeW91cgojIGN1cnJlbnQgTW9kU2VjdXJpdHkgdmVyc2lvbiBhbmQgZGVwZW5kZW5jaWVzIHZlcnNpb25zLgojIFRoZSBmb2xsb3dpbmcgaW5mb3JtYXRpb24gd2lsbCBiZSBzaGFyZWQ6IE1vZFNlY3VyaXR5IHZlcnNpb24sCiMgV2ViIFNlcnZlciB2ZXJzaW9uLCBBUFIgdmVyc2lvbiwgUENSRSB2ZXJzaW9uLCBMdWEgdmVyc2lvbiwgTGlieG1sMgojIHZlcnNpb24sIEFub255bW91cyB1bmlxdWUgaWQgZm9yIGhvc3QuClNlY1N0YXR1c0VuZ2luZSBPbgoK",
	"php-config-directives.data":                           "YWxsb3dfY2FsbF90aW1lX3Bhc3NfcmVmZXJlbmNlCmFsbG93X3VybF9mb3BlbgphbGxvd191cmxfaW5jbHVkZQphbHdheXNfcG9wdWxhdGVfcmF3X3Bvc3RfZGF0YQphcmdfc2VwYXJhdG9yLmlucHV0CmFyZ19zZXBhcmF0b3Iub3V0cHV0CmFzcF90YWdzCmFzc2VydC5hY3RpdmUKYXNzZXJ0LmJhaWwKYXNzZXJ0LmNhbGxiYWNrCmFzc2VydC5xdWlldF9ldmFsCmFzc2VydC53YXJuaW5nCmF1dG9fYXBwZW5kX2ZpbGUKYXV0b19kZXRlY3RfbGluZV9lbmRpbmdzCmF1dG9fZ2xvYmFsc19qaXQKYXV0b19wcmVwZW5kX2ZpbGUKYmNtYXRoLnNjYWxlCmJpcmRzdGVwLm1heF9saW5rcwpicm93c2NhcApjZ2kuZml4X3BhdGhpbmZvCmNnaS5mb3JjZV9yZWRpcmVjdApjZ2kubnBoCmNnaS5yZWRpcmVjdF9zdGF0dXNfZW52CmNnaS5yZmMyNjE2X2hlYWRlcnMKY29tLmFsbG93X2Rjb20KY29tLmF1dG9yZWdpc3Rlcl9jYXNlc2Vuc2l0aXZlCmNvbS5hdXRvcmVnaXN0ZXJfdHlwZWxpYgpjb20uYXV0b3JlZ2lzdGVyX3ZlcmJvc2UKY29tLmNvZGVfcGFnZQpjb20udHlwZWxpYl9maWxlCmRhdGUuZGVmYXVsdF9sYXRpdHVkZQpkYXRlLmRlZmF1bHRfbG9uZ2l0dWRlCmRhdGUuc3VucmlzZV96ZW5pdGgKZGF0ZS5zdW5zZXRfemVuaXRoCmRhdGUudGltZXpvbmUKZGJhLmRlZmF1bHRfaGFuZGxlcgpkZWZhdWx0X2NoYXJzZXQKZGVmYXVsdF9taW1ldHlwZQpkZWZhdWx0X3NvY2tldF90aW1lb3V0CmRlZmluZV9zeXNsb2dfdmFyaWFibGVzCmRpc2FibGVfY2xhc3NlcwpkaXNhYmxlX2Z1bmN0aW9ucwpkaXNwbGF5X2Vycm9ycwpkaXNwbGF5X3N0YXJ0dXBfZXJyb3JzCmRvY19yb290CmRvY3JlZl9leHQKZG9jcmVmX3Jvb3QKZW5hYmxlX2RsCmVycm9yX2FwcGVuZF9zdHJpbmcKZXJyb3JfbG9nCmVycm9yX3ByZXBlbmRfc3RyaW5nCmVycm9yX3JlcG9ydGluZwpleGlmLmRlY29kZV9qaXNfaW50ZWwKZXhpZi5kZWNvZGVfamlzX21vdG9yb2xhCmV4aWYuZGVjb2RlX3VuaWNvZGVfaW50ZWwKZXhpZi5kZWNvZGVfdW5pY29kZV9tb3Rvcm9sYQpleGlmLmVuY29kZV9qaXMKZXhpZi5lbmNvZGVfdW5pY29kZQpleHBvc2VfcGhwCmV4dGVuc2lvbl9kaXIKZmFzdGNnaS5pbXBlcnNvbmF0ZQpmYXN0Y2dpLmxvZ2dpbmcKZmlsZV91cGxvYWRzCmZpbHRlci5kZWZhdWx0CmZpbHRlci5kZWZhdWx0X2ZsYWdzCmdkLmpwZWdfaWdub3JlX3dhcm5pbmcKaGlnaGxpZ2h0LmJnCmhpZ2hsaWdodC5jb21tZW50CmhpZ2hsaWdodC5kZWZhdWx0CmhpZ2hsaWdodC5odG1sCmhpZ2hsaWdodC5rZXl3b3JkCmhpZ2hsaWdodC5zdHJpbmcKaHRtbF9lcnJvcnMKaWJhc2UuYWxsb3dfcGVyc2lzdGVudAppYmFzZS5kYXRlZm9ybWF0CmliYXNlLmRlZmF1bHRfY2hhcnNldAppYmFzZS5kZWZhdWx0X2RiCmliYXNlLmRlZmF1bHRfcGFzc3dvcmQKaWJhc2UuZGVmYXVsdF91c2VyCmliYXNlLm1heF9saW5rcwppYmFzZS5tYXhfcGVyc2lzdGVudAppYmFzZS50aW1lZm9ybWF0CmliYXNlLnRpbWVzdGFtcGZvcm1hdAppY29udi5pbnB1dF9lbmNvZGluZwppY29udi5pbnRlcm5hbF9lbmNvZGluZwppY29udi5vdXRwdXRfZW5jb2RpbmcKaWdub3JlX3JlcGVhdGVkX2Vycm9ycwppZ25vcmVfcmVwZWF0ZWRfc291cmNlCmlnbm9yZV91c2VyX2Fib3J0CmltcGxpY2l0X2ZsdXNoCmluY2x1ZGVfcGF0aAppbnRsLmRlZmF1bHRfbG9jYWxlCmludGwuZXJyb3JfbGV2ZWwKbGRhcC5tYXhfbGlua3MKbG9nX2Vycm9ycwpsb2dfZXJyb3JzX21heF9sZW4KbWFnaWNfcXVvdGVzX2dwYwptYWdpY19xdW90ZXNfcnVudGltZQptYWdpY19xdW90ZXNfc3liYXNlCm1haWwuYWRkX3hfaGVhZGVyCm1haWwuZm9yY2VfZXh0cmFfcGFyYW1ldGVycwptYWlsLmxvZwptYXhfZXhlY3V0aW9uX3RpbWUKbWF4X2ZpbGVfdXBsb2FkcwptYXhfaW5wdXRfbmVzdGluZ19sZXZlbAptYXhfaW5wdXRfdGltZQptYnN0cmluZy5kZXRlY3Rfb3JkZXIKbWJzdHJpbmcuZW5jb2RpbmdfdHJhbnNsYXRpb24KbWJzdHJpbmcuZnVuY19vdmVybG9hZAptYnN0cmluZy5odHRwX2lucHV0Cm1ic3RyaW5nLmh0dHBfb3V0cHV0Cm1ic3RyaW5nLmh0dHBfb3V0cHV0X2NvbnZfbWltZXR5cGUKbWJzdHJpbmcuaW50ZXJuYWxfZW5jb2RpbmcKbWJzdHJpbmcubGFuZ3VhZ2UKbWJzdHJpbmcuc2NyaXB0X2VuY29kaW5nCm1ic3RyaW5nLnN0cmljdF9kZXRlY3Rpb24KbWJzdHJpbmcuc3Vic3RpdHV0ZV9jaGFyYWN0ZXIKbWNyeXB0LmFsZ29yaXRobXNfZGlyCm1jcnlwdC5tb2Rlc19kaXIKbWVtb3J5X2xpbWl0Cm1zc3FsLmFsbG93X3BlcnNpc3RlbnQKbXNzcWwuYmF0Y2hzaXplCm1zc3FsLmNoYXJzZXQKbXNzcWwuY29tcGF0YWJpbGl0eV9tb2RlCm1zc3FsLmNvbm5lY3RfdGltZW91dAptc3NxbC5kYXRldGltZWNvbnZlcnQKbXNzcWwubWF4X2xpbmtzCm1zc3FsLm1heF9wZXJzaXN0ZW50Cm1zc3FsLm1heF9wcm9jcwptc3NxbC5taW5fZXJyb3Jfc2V2ZXJpdHkKbXNzcWwubWluX21lc3NhZ2Vfc2V2ZXJpdHkKbXNzcWwuc2VjdXJlX2Nvbm5lY3Rpb24KbXNzcWwudGV4dGxpbWl0Cm1zc3FsLnRleHRzaXplCm1zc3FsLnRpbWVvdXQKbXlzcWwuYWxsb3dfbG9jYWxfaW5maWxlCm15c3FsLmFsbG93X3BlcnNpc3RlbnQKbXlzcWwuY2FjaGVfc2l6ZQpteXNxbC5jb25uZWN0X3RpbWVvdXQKbXlzcWwuZGVmYXVsdF9ob3N0Cm15c3FsLmRlZmF1bHRfcGFzc3dvcmQKbXlzcWwuZGVmYXVsdF9wb3J0Cm15c3FsLmRlZmF1bHRfc29ja2V0Cm15c3FsLmRlZmF1bHRfdXNlcgpteXNxbC5tYXhfbGlua3MKbXlzcWwubWF4X3BlcnNpc3RlbnQKbXlzcWwudHJhY2VfbW9kZQpteXNxbGkuYWxsb3dfbG9jYWxfaW5maWxlCm15c3FsaS5hbGxvd19wZXJzaXN0ZW50Cm15c3FsaS5jYWNoZV9zaXplCm15c3FsaS5kZWZhdWx0X2hvc3QKbXlzcWxpLmRlZmF1bHRfcG9ydApteXNxbGkuZGVmYXVsdF9wdwpteXNxbGkuZGVmYXVsdF9zb2NrZXQKbXlzcWxpLmRlZmF1bHRfdXNlcgpteXNxbGkubWF4X2xpbmtzCm15c3FsaS5tYXhfcGVyc2lzdGVudApteXNxbGkucmVjb25uZWN0Cm15c3FsbmQuY29sbGVjdF9tZW1vcnlfc3RhdGlzdGljcwpteXNxbG5kLmNvbGxlY3Rfc3RhdGlzdGljcwpteXNxbG5kLm5ldF9jbWRfYnVmZmVyX3NpemUKbXlzcWxuZC5uZXRfcmVhZF9idWZmZXJfc2l6ZQpvY2k4LmNvbm5lY3Rpb25fY2xhc3MKb2NpOC5kZWZhdWx0X3ByZWZldGNoCm9jaTguZXZlbnRzCm9jaTgubWF4X3BlcnNpc3RlbnQKb2NpOC5vbGRfb2NpX2Nsb3NlX3NlbWFudGljcwpvY2k4LnBlcnNpc3RlbnRfdGltZW91dApvY2k4LnBpbmdfaW50ZXJ2YWwKb2NpOC5wcml2aWxlZ2VkX2Nvbm5lY3QKb2NpOC5zdGF0ZW1lbnRfY2FjaGVfc2l6ZQpvZGJjLmFsbG93X3BlcnNpc3RlbnQKb2RiYy5jaGVja19wZXJzaXN0ZW50Cm9kYmMuZGVmYXVsdF9kYgpvZGJjLmRlZmF1bHRfcHcKb2RiYy5kZWZhdWx0X3VzZXIKb2RiYy5kZWZhdWx0YmlubW9kZQpvZGJjLmRlZmF1bHRscmwKb2RiYy5tYXhfbGlua3MKb2RiYy5tYXhfcGVyc2lzdGVudApvcGVuX2Jhc2VkaXIKb3V0cHV0X2J1ZmZlcmluZwpvdXRwdXRfaGFuZGxlcgpwY3JlLmJhY2t0cmFja19saW1pdApwY3JlLnJlY3Vyc2lvbl9saW1pdApwZG9fbXlzcWwuY2FjaGVfc2l6ZQpwZG9fbXlzcWwuZGVmYXVsdF9zb2NrZXQKcGRvX29kYmMuY29ubmVjdGlvbl9wb29saW5nCnBnc3FsLmFsbG93X3BlcnNpc3RlbnQKcGdzcWwuYXV0b19yZXNldF9wZXJzaXN0ZW50CnBnc3FsLmlnbm9yZV9ub3RpY2UKcGdzcWwubG9nX25vdGljZQpwZ3NxbC5tYXhfbGlua3MKcGdzcWwubWF4X3BlcnNpc3RlbnQKcGhhci5jYWNoZV9saXN0CnBoYXIucmVhZG9ubHkKcGhhci5yZXF1aXJlX2hhc2gKcG9zdF9tYXhfc2l6ZQpyZWFscGF0aF9jYWNoZV9zaXplCnJlYWxwYXRoX2NhY2hlX3R0bApyZWdpc3Rlcl9hcmdjX2FyZ3YKcmVnaXN0ZXJfZ2xvYmFscwpyZWdpc3Rlcl9sb25nX2FycmF5cwpyZXBvcnRfbWVtbGVha3MKcmVwb3J0X3plbmRfZGVidWcKcmVxdWVzdF9vcmRlcgpzYWZlX21vZGUKc2FmZV9tb2RlX2FsbG93ZWRfZW52X3ZhcnMKc2FmZV9tb2RlX2V4ZWNfZGlyCnNhZmVfbW9kZV9naWQKc2FmZV9tb2RlX2luY2x1ZGVfZGlyCnNhZmVfbW9kZV9wcm90ZWN0ZWRfZW52X3ZhcnMKc2VuZG1haWxfZnJvbQpzZW5kbWFpbF9wYXRoCnNlcmlhbGl6ZV9wcmVjaXNpb24Kc2Vzc2lvbi5hdXRvX3N0YXJ0CnNlc3Npb24uYnVnX2NvbXBhdF80MgpzZXNzaW9uLmJ1Z19jb21wYXRfd2FybgpzZXNzaW9uLmNhY2hlX2V4cGlyZQpzZXNzaW9uLmNhY2hlX2xpbWl0ZXIKc2Vzc2lvbi5jb29raWVfZG9tYWluCnNlc3Npb24uY29va2llX2h0dHBvbmx5CnNlc3Npb24uY29va2llX2xpZmV0aW1lCnNlc3Npb24uY29va2llX3BhdGgKc2Vzc2lvbi5jb29raWVfc2VjdXJlCnNlc3Npb24uZW50cm9weV9maWxlCnNlc3Npb24uZW50cm9weV9sZW5ndGgKc2Vzc2lvbi5nY19kaXZpc29yCnNlc3Npb24uZ2NfbWF4bGlmZXRpbWUKc2Vzc2lvbi5nY19wcm9iYWJpbGl0eQpzZXNzaW9uLmhhc2hfYml0c19wZXJfY2hhcmFjdGVyCnNlc3Npb24uaGFzaF9mdW5jdGlvbgpzZXNzaW9uLm5hbWUKc2Vzc2lvbi5yZWZlcmVyX2NoZWNrCnNlc3Npb24uc2F2ZV9oYW5kbGVyCnNlc3Npb24uc2F2ZV9wYXRoCnNlc3Npb24uc2VyaWFsaXplX2hhbmRsZXIKc2Vzc2lvbi51c2VfY29va2llcwpzZXNzaW9uLnVzZV9vbmx5X2Nvb2tpZXMKc2Vzc2lvbi51c2VfdHJhbnNfc2lkCnNob3J0X29wZW5fdGFnCnNvYXAud3NkbF9jYWNoZV9kaXIKc29hcC53c2RsX2NhY2hlX2VuYWJsZWQKc29hcC53c2RsX2NhY2hlX2xpbWl0CnNvYXAud3NkbF9jYWNoZV90dGwKc3FsLnNhZmVfbW9kZQpzcWxpdGUuYXNzb2NfY2FzZQpzcWxpdGUzLmV4dGVuc2lvbl9kaXIKc3liY3QuYWxsb3dfcGVyc2lzdGVudApzeWJjdC5kZWFkbG9ja19yZXRyeV9jb3VudApzeWJjdC5ob3N0bmFtZQpzeWJjdC5sb2dpbl90aW1lb3V0CnN5YmN0Lm1heF9saW5rcwpzeWJjdC5tYXhfcGVyc2lzdGVudApzeWJjdC5taW5fY2xpZW50X3NldmVyaXR5CnN5YmN0Lm1pbl9zZXJ2ZXJfc2V2ZXJpdHkKc3liY3QudGltZW91dApzeXN2c2htLmluaXRfbWVtCnRpZHkuY2xlYW5fb3V0cHV0CnRpZHkuZGVmYXVsdF9jb25maWcKdHJhY2tfZXJyb3JzCnVuc2VyaWFsaXplX2NhbGxiYWNrX2Z1bmMKdXBsb2FkX21heF9maWxlc2l6ZQp1cGxvYWRfdG1wX2Rpcgp1cmxfcmV3cml0ZXIudGFncwp1c2VyX2FnZW50CnVzZXJfZGlyCnVzZXJfaW5pLmNhY2hlX3R0bAp1c2VyX2luaS5maWxlbmFtZQp2YXJpYWJsZXNfb3JkZXIKeG1scnBjX2Vycm9yX251bWJlcgp4bWxycGNfZXJyb3JzCnkya19jb21wbGlhbmNlCnpsaWIub3V0cHV0X2NvbXByZXNzaW9uCnpsaWIub3V0cHV0X2NvbXByZXNzaW9uX2xldmVsCnpsaWIub3V0cHV0X2hhbmRsZXIK",
	"php-errors.data":                                      "",
	"php-function-names-933150.data":                       "X19oYWx0X2NvbXBpbGVyCmFwYWNoZV9jaGlsZF90ZXJtaW5hdGUKYmFzZTY0X2RlY29kZQpiemRlY29tcHJlc3MKY2FsbF91c2VyX2Z1bmMKY2FsbF91c2VyX2Z1bmNfYXJyYXkKY2FsbF91c2VyX21ldGhvZApjYWxsX3VzZXJfbWV0aG9kX2FycmF5CmNvbnZlcnRfdXVkZWNvZGUKZmlsZV9nZXRfY29udGVudHMKZmlsZV9wdXRfY29udGVudHMKZnNvY2tvcGVuCmdldF9jbGFzc19tZXRob2RzCmdldF9jbGFzc192YXJzCmdldF9kZWZpbmVkX2NvbnN0YW50cwpnZXRfZGVmaW5lZF9mdW5jdGlvbnMKZ2V0X2RlZmluZWRfdmFycwpnemRlY29kZQpnemluZmxhdGUKZ3p1bmNvbXByZXNzCmluY2x1ZGVfb25jZQppbnZva2VhcmdzCnBjbnRsX2V4ZWMKcGNudGxfZm9yawpwZnNvY2tvcGVuCnBvc2l4X2dldGN3ZApwb3NpeF9nZXRwd3VpZApwb3NpeF9nZXR1aWQKcG9zaXhfdW5hbWUKUmVmbGVjdGlvbkZ1bmN0aW9uCnJlcXVpcmVfb25jZQpzaGVsbF9leGVjCnN0cl9yb3QxMwpzeXNfZ2V0X3RlbXBfZGlyCndwX3JlbW90ZV9mb3Blbgp3cF9yZW1vdGVfZ2V0CndwX3JlbW90ZV9oZWFkCndwX3JlbW90ZV9wb3N0CndwX3JlbW90ZV9yZXF1ZXN0CndwX3NhZmVfcmVtb3RlX2dldAp3cF9zYWZlX3JlbW90ZV9oZWFkCndwX3NhZmVfcmVtb3RlX3Bvc3QKd3Bfc2FmZV9yZW1vdGVfcmVxdWVzdAp6bGliX2RlY29kZQo=",
	"php-function-names-933151.data":                       "",
	"php-variables.data":                                   "JEdMT0JBTFMKJEhUVFBfQ09PS0lFX1ZBUlMKJEhUVFBfRU5WX1ZBUlMKJEhUVFBfR0VUX1ZBUlMKJEhUVFBfUE9TVF9GSUxFUwokSFRUUF9QT1NUX1ZBUlMKJEhUVFBfUkFXX1BPU1RfREFUQQokSFRUUF9SRVFVRVNUX1ZBUlMKJEhUVFBfU0VSVkVSX1ZBUlMKJF9DT09LSUUKJF9FTlYKJF9GSUxFUwokX0dFVAokX1BPU1QKJF9SRVFVRVNUCiRfU0VSVkVSCiRfU0VTU0lPTgokYXJnYwokYXJndgo=",
	"restricted-files.data":                                "IyBBcGFjaGUKIyAobm8gc2xhc2g7IGFsc28gZ3VhcmRzIGFnYWluc3Qgb2xkLmh0YWNjZXNzLCBvbGQuaHRwYXNzd2QsIGV0Yy4pCi5odGFjY2VzcwouaHRkaWdlc3QKLmh0cGFzc3dkCiMgaG9tZSBsZXZlbCBkb3RmaWxlcyAoa2VlcCBpbiBzeW5jIHdpdGggbGZpLW9zLWZpbGVzLmRhdGEpCi5hcHRpdHVkZS9jb25maWcKLmJhc2hfY29uZmlnCi5iYXNoX2hpc3RvcnkKLmJhc2hfbG9nb3V0Ci5iYXNoX3Byb2ZpbGUKLmJhc2hyYwouY2FjaGUvbm90aWZ5LW9zZC5sb2cKLmNvbmZpZy9vZGVzay9vZGVzayB0ZWFtLmNvbmYKLmNzaHJjCi5kcnVzaC8KLmdpdGNvbmZpZwouZ251cGcvCi5ocGxpcC9ocGxpcC5jb25mCi5rc2hfaGlzdG9yeQoubGVzc2hzdAoubGZ0cC8KLmxoaXN0b3J5Ci5sbGRiLWhpc3RvcnkKLmxvY2FsL3NoYXJlL21jLwoubXkuY25mCi5teXNxbF9oaXN0b3J5Ci5uYW5vX2hpc3RvcnkKLm5vZGVfcmVwbF9oaXN0b3J5Ci5uc3IKLnBlYXJyYwoucGhwX2hpc3RvcnkKLnBraS8KLnByb2ZpbGUKLnBzcWxfaGlzdG9yeQoucHl0aG9uX2hpc3RvcnkKLnJlZGlzY2xpX2hpc3RvcnkKLlJoaXN0b3J5Ci5zaF9oaXN0b3J5Ci5zcWxpdGVfaGlzdG9yeQouc3NoL2F1dGhvcml6ZWRfa2V5cwouc3NoL2NvbmZpZwouc3NoL2lkX2RzYQouc3NoL2lkX2RzYS5wdWIKLnNzaC9pZF9yc2EKLnNzaC9pZF9yc2EucHViCi5zc2gvaWRlbnRpdHkKLnNzaC9pZGVudGl0eS5wdWIKLnNzaC9rbm93bl9ob3N0cwouc3VidmVyc2lvbi9hdXRoCi5zdWJ2ZXJzaW9uL2NvbmZpZwouc3VidmVyc2lvbi9zZXJ2ZXJzCi50Y29ubi90Y29ubi5jb25mCi50Y3NocmMKLnZpZGFsaWEvdmlkYWxpYS5jb25mCi52aW1pbmZvCi52aW1yYwoueGF1dGhvcml0eQouemhpc3RvcnkKLnpzaHJjCi56c2hfaGlzdG9yeQoubnNjb25maWcKIyBWZXJzaW9uIGNvbnRyb2wKLy5naXQvCi8uZ2l0aWdub3JlCi8uaGcvCi8uaGdpZ25vcmUKLy5zdm4vCiMgV29yZHByZXNzCndwLWNvbmZpZy5waHAKd3AtY29uZmlnLmJhawp3cC1jb25maWcub2xkCndwLWNvbmZpZy50ZW1wCndwLWNvbmZpZy50bXAKd3AtY29uZmlnLnR4dAojIFN5bWZvbnkKL2NvbmZpZy9jb25maWcueW1sCi9jb25maWcvY29uZmlnX2Rldi55bWwKL2NvbmZpZy9jb25maWdfcHJvZC55bWwKL2NvbmZpZy9jb25maWdfdGVzdC55bWwKL2NvbmZpZy9wYXJhbWV0ZXJzLnltbAovY29uZmlnL3JvdXRpbmcueW1sCi9jb25maWcvc2VjdXJpdHkueW1sCi9jb25maWcvc2VydmljZXMueW1sCiMgRHJ1cGFsCi9zaXRlcy9kZWZhdWx0L2RlZmF1bHQuc2V0dGluZ3MucGhwCi9zaXRlcy9kZWZhdWx0L3NldHRpbmdzLnBocAovc2l0ZXMvZGVmYXVsdC9zZXR0aW5ncy5sb2NhbC5waHAKIyBNYWdlbnRvCi9hcHAvZXRjL2xvY2FsLnhtbAojIFN1YmxpbWUgVGV4dAovc2Z0cC1jb25maWcuanNvbgojIEFTUC5ORVQKL1dlYi5jb25maWcKIyBOb2RlCi9wYWNrYWdlLmpzb24KL3BhY2thZ2UtbG9jay5qc29uCi9ncnVudGZpbGUuanMKL25wbS1kZWJ1Zy5sb2cKL29ybWNvbmZpZy5qc29uCi90c2NvbmZpZy5qc29uCi93ZWJwYWNrLmNvbmZpZy5qcwoveWFybi5sb2NrCiMgQ29tcG9zZXIKL2NvbXBvc2VyLmpzb24KL2NvbXBvc2VyLmxvY2sKL3BhY2thZ2VzLmpzb24KIyBkb3RlbnYKLy5lbnYKIyBPU1gKLy5EU19TdG9yZQojIFdTIEZUUAovLndzX2Z0cC5pbmkKIyBjb21tb24sIG9sZCBuZXR3b3JrIGNvbmZpZyBmaWxlCi5uZXRyYwojIE5ldyBUb3AgTGV2ZWwgZG90ZmlsZXMKLnRodW5kZXJiaXJkLwoudm13YXJlLwoua3ViZS8KLmphdmEvCi5hbnlkZXNrLwouZG9ja2VyLwoubnBtLwoubnZtLwoubWluaWt1YmUvCi5hdG9tLwouYXdzL2NvbmZpZwouYXdzL2NyZWRlbnRpYWxzCi5jdXBzLwouZGJ1cy8KLmJvdG8KLmdlbS8KLmdub25tZS8KLmdzdXRpbC8KIyBOZXcgUGVyLVByb2plY3QgRmlsZXMKLmlkZWEKbmJwcm9qZWN0Lwpib3dlci5qc29uCi5ib3dlcnJjCi5lc2xpbnRyYwouanNoaW50cmMKLmdpdGxhYi1jaS55bWwKLnRyYXZpcy55bWwKZGF0YWJhc2UueW1sCkRvY2tlcmZpbGUK",
	"restricted-upload.data":                               "IyBBcGFjaGUgd2Vic2VydmVyCi5odGFjY2VzcwouaHRkaWdlc3QKLmh0cGFzc3dkCiMgV29yZFByZXNzIGNvbmZpZ3VyYXRpb24gZmlsZQp3cC1jb25maWcucGhwCiMgU3ltZm9ueSBjb25maWd1cmF0aW9uIGZpbGVzCmNvbmZpZy55bWwKY29uZmlnX2Rldi55bWwKY29uZmlnX3Byb2QueW1sCmNvbmZpZ190ZXN0LnltbApwYXJhbWV0ZXJzLnltbApyb3V0aW5nLnltbApzZWN1cml0eS55bWwKc2VydmljZXMueW1sCiMgRHJ1cGFsIGNvbmZpZ3VyYXRpb24gZmlsZXMKZGVmYXVsdC5zZXR0aW5ncy5waHAKc2V0dGluZ3MucGhwCnNldHRpbmdzLmxvY2FsLnBocAojIE1hZ2VudG8gY29uZmlndXJhdGlvbiBmaWxlcwpsb2NhbC54bWwKIyBkb3RlbnYgY29uZmlndXJhdGlvbiBmaWxlCi5lbnYK",
	"scanners-headers.data":                                "YWN1bmV0aXgtcHJvZHVjdAooYWN1bmV0aXggd2ViIHZ1bG5lcmFiaWxpdHkgc2Nhbm5lcgphY3VuZXRpeC1zY2FubmluZy1hZ3JlZW1lbnQKYWN1bmV0aXgtdXNlci1hZ3JlZW1lbnQKbXl2YXI9MTIzNAp4LXJhdHByb3h5LWxvb3AKYnl0ZXM9MC0sNS0wLDUtMSw1LTIsNS0zLDUtNCw1LTUsNS02LDUtNyw1LTgsNS05LDUtMTAsNS0xMSw1LTEyLDUtMTMsNS0xNAp4LXNjYW5uZXIK",
	"scanners-urls.data":                                   "Ly5hZFNlbnNlcG9zdG5vdHRoZXJlbm9ub2Jvb2sKLzxpbnZhbGlkPmhlbGxvLmh0bWwKL2FjdFNlbnNlcG9zdG5vdHRoZXJlbm9ub3RpdmUKL2FjdW5ldGl4LXd2cy10ZXN0LWZvci1zb21lLWluZXhpc3RlbnQtZmlsZQovYW50aWRpc2VzdGFibGlzaG1lbnRhcmlhbmlzbQovYXBwc2Nhbl9maW5nZXJwcmludC9tYWNfYWRkcmVzcwovYXJhY2huaS0KL2N5YmVyY29wCi9uZXNzdXNfaXNfcHJvYmluZ195b3VfCi9uZXNzdXN0ZXN0Ci9uZXRzcGFya2VyLQovcmZpaW5jLnR4dAovdGhlcmVpc25vd2F5dGhhdC15b3UtY2FuYmV0aGVyZQovdzNhZi9yZW1vdGVmaWxlaW5jbHVkZS5odG1sCmFwcHNjYW5fZmluZ2VycHJpbnQKdzAwdHcwMHQuYXQuSVNDLlNBTlMuREZpbmQKdzAwdHcwMHQuYXQuYmxhY2toYXRzLnJvbWFuaWFuLmFudGktc2VjCg==",
	"scanners-user-agents.data":                            "IyBWdWxuZXJhYmlsaXR5IHNjYW5uZXJzLCBicnV0ZWZvcmNlIHBhc3N3b3JkIGNyYWNrZXJzIGFuZCBleHBsb2l0YXRpb24gdG9vbHMKCiMgcGFzc3dvcmQgY3JhY2tlcgojIGh0dHA6Ly9zZWN0b29scy5vcmcvdG9vbC9oeWRyYS8KKGh5ZHJhKQojIHZ1bG4gc2Nhbm5lcgojIGh0dHA6Ly92aXJ0dWFsYmx1ZW5lc3MubmV0L25hc2wuaHRtbAoubmFzbAojIHNxbCBpbmplY3Rpb24KIyBodHRwczovL3NvdXJjZWZvcmdlLm5ldC9wcm9qZWN0cy9hYnNpbnRoZS8KYWJzaW50aGUKIyBlbWFpbCBoYXJ2ZXN0aW5nCiMgZGVhZD8gMjAwNAphZHZhbmNlZCBlbWFpbCBleHRyYWN0b3IKIyB2dWxuIHNjYW5uZXIKIyBodHRwOi8vd3d3LmFyYWNobmktc2Nhbm5lci5jb20vCmFyYWNobmkvCmF1dG9nZXRjb250ZW50CiMgbmVzc3VzIGZyb250ZW5kCiMgaHR0cDovL3d3dy5jcm9zc2xleS1uaWxzZW4uY29tL0xpbnV4L0JpbGJvXy1fTmVzc3VzX1dFQi9iaWxib18tX25lc3N1c193ZWIuaHRtbAojIGRlYWQ/IDIwMDMKYmlsYm8KIyBCYWNrdXAgRmlsZSBBcnRpZmFjdHMgQ2hlY2tlcgojIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXplbjE2MC9iZmFjCkJGQUMKIyBwYXNzd29yZCBjcmFja2VyCiMgaHR0cDovL3NlY3Rvb2xzLm9yZy90b29sL2JydXR1cy8KYnJ1dHVzCmJydXR1cy9hZXQKIyBzcWwgaW5qZWN0aW9uCiMgaHR0cHM6Ly93d3cubm90c29zZWN1cmUuY29tL2JzcWxiZi12Mi1ibGluZC1zcWwtaW5qZWN0aW9uLWJydXRlLWZvcmNlci8KYnNxbGJmCiMgdnVsbiBzY2FubmVyCiMgaHR0cDovL2ZyZWVjb2RlLmNvbS9wcm9qZWN0cy9jZ2ljaGsgZGVhZD8gMjAwMQpjZ2ljaGsKIyB2dWxuIHNjYW5uZXIKIyBodHRwczovL3NvdXJjZWZvcmdlLm5ldC9wcm9qZWN0cy9jaXNjby10b3JjaC8KY2lzY28tdG9yY2gKIyB2dWxuIHNjYW5uZXIKIyBodHRwczovL2dpdGh1Yi5jb20vc3Rhc2lub3BvdWxvcy9jb21taXgKY29tbWl4CiMgTVMgRnJvbnRQYWdlIHZ1bG4gc2Nhbm5lcj8KY29yZS1wcm9qZWN0LzEuMAojIHZ1bG4gc2Nhbm5lcj8KY3JpbXNjYW5uZXIvCiMgdnVsbiBzY2FubmVyCmRhdGFjaGEwcwojIGhpZGRlbiBwYWdlIHNjYW5uZXIKIyBodHRwczovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL0NhdGVnb3J5Ok9XQVNQX0RpckJ1c3Rlcl9Qcm9qZWN0CmRpcmJ1c3RlcgojIHZ1bG4gc2Nhbm5lcgojIGh0dHBzOi8vc291cmNlZm9yZ2UubmV0L3Byb2plY3RzL2RvbWlub2h1bnRlci8KZG9taW5vIGh1bnRlcgojIHZ1bG4gc2Nhbm5lciAtIGRpcmVjdG9yeSB0cmF2ZXJzYWwgZnV6emVyCiMgaHR0cHM6Ly9naXRodWIuY29tL3dpcmVnaG91bC9kb3Rkb3Rwd24KZG90ZG90cHduCmVtYWlsIGV4dHJhY3RvcgojIHZ1bG4gc2Nhbm5lcgpmaHNjYW4gY29yZSAxLgpmbG9vZGdhdGUKIyAiRi1TZWN1cmUgUmFkYXIgaXMgYSB0dXJua2V5IHZ1bG5lcmFiaWxpdHkgc2Nhbm5pbmcgYW5kIG1hbmFnZW1lbnQgcGxhdGZvcm0uIgpGLVNlY3VyZSBSYWRhcgpnZXQtbWluaW1hbAojIFNjYW5uZXIgdGhhdCBsb29rcyBmb3IgZXhpc3Rpbmcgb3IgaGlkZGVuIHdlYiBvYmplY3RzCiMgaHR0cHM6Ly9naXRodWIuY29tL09KL2dvYnVzdGVyCmdvYnVzdGVyCiMgdnVsbiBzY2FubmVyCmdvb3RraXQgYXV0by1yb290ZXIgc2Nhbm5lcgpncmFiYmVyCiMgdnVsbiBzY2FubmVyCiMgaHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvZ3JlbmRlbC8KZ3JlbmRlbC1zY2FuCiMgc3FsIGluamVjdGlvbgpoYXZpagojIHZ1bG4gc2Nhbm5lciAtIHBhdGggZGlzY2xvc3VyZSBmaW5kZXIKIyBodHRwOi8vc2VjbGlzdHMub3JnL2Z1bGxkaXNjbG9zdXJlLzIwMTAvU2VwLzM3NQppbnNwYXRoCmludGVybmV0IG5pbmphCiMgdnVsbiBzY2FubmVyCmphYXNjb2lzCiMgdnVsbiBzY2FubmVyCnptZXUKIyAiTW96aWxsYS81LjAgSm9yZ2VlIiwgdnVsbiBzY2FubmVyCkpvcmdlZQojIHBvcnQgc2Nhbm5lcgojIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2JlcnRkYXZpZGdyYWhhbS9tYXNzY2FuCm1hc3NjYW4KIyB2dWxuIHNjYW5uZXIKIyBodHRwOi8vd3d3LnNldmVydXMub3JnL3NhY2hhL21ldGlzLwptZXRpcwojIHZ1bG4gc2Nhbm5lcgptb3JmZXVzIGZ1Y2tpbmcgc2Nhbm5lcgojIHNxbCBpbmplY3Rpb24KIyBodHRwczovL2dpdGh1Yi5jb20vZHRyaXAvbXlzcWxvaXQKbXlzcWxvaXQKIyB2dWxuIHNjYW5uZXIKIyBodHRwOi8vd3d3Lm5zdGFsa2VyLmNvbS8Kbi1zdGVhbHRoCiMgdnVsbiBzY2FubmVyCiMgaHR0cDovL3d3dy50ZW5hYmxlLmNvbS9wcm9kdWN0cy9uZXNzdXMtdnVsbmVyYWJpbGl0eS1zY2FubmVyCm5lc3N1cwojIHZ1bG4gc2Nhbm5lcgojIGh0dHBzOi8vd3d3Lm5ldHNwYXJrZXIuY29tL3dlYi12dWxuZXJhYmlsaXR5LXNjYW5uZXIvCm5ldHNwYXJrZXIKIyB2dWxuIHNjYW5uZXIKIyBodHRwczovL2NpcnQubmV0L05pa3RvMgpuaWt0bwojIHZ1bG4gc2Nhbm5lcgpubWFwIG5zZQpubWFwIHNjcmlwdGluZyBlbmdpbmUKbm1hcC1uc2UKIyB2dWxuIHNjYW5uZXIKIyBodHRwOi8vd3d3Lm5zYXVkaXRvci5jb20vCm5zYXVkaXRvcgojIHZ1bG4gc2Nhbm5lcgojIGh0dHBzOi8vZ2l0aHViLmNvbS9wcm9qZWN0ZGlzY292ZXJ5L251Y2xlaQpOdWNsZWkKIyB2dWxuIHNjYW5uZXIKIyBodHRwOi8vd3d3Lm9wZW52YXMub3JnLwpvcGVudmFzCiMgc3FsIGluamVjdGlvbgojIGh0dHA6Ly93d3cudmVhbHRlbC5jb20vc29mdHdhcmUvbm9zZWMvcGFuZ29saW4vCnBhbmdvbGluCiMgd2ViIHByb3h5ICYgdnVsbiBzY2FubmVyCiMgaHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvcGFyb3MvCnBhcm9zCiMgcGhwbXlhZG1pbiB2dWxuIHNjYW5uZXIKIyBkZWFkIDIwMDU/CnBtYWZpbmQKcHJvZy5jdXN0b21jcmF3bGVyCiMgUVFHYW1lSGFsbCBEb1MvVmlydXMvTWFsd2FyZS9BZHdhcmUKIyBodHRwczovL3R3aXR0ZXIuY29tL2JhZ2Rlci9zdGF0dXMvMTI0NDk4MjU1Njk1ODgyNjQ5Nj9zPTIwClFRR2FtZUhhbGwKIyB2dWxuIHNjYW5uZXIKIyBodHRwczovL3d3dy5xdWFseXMuY29tL3N1aXRlL3dlYi1hcHBsaWNhdGlvbi1zY2FubmluZy8KcXVhbHlzIHdhcwpzLnQuYS5sLmsuZS5yLgpzZWN1cml0eSBzY2FuCiMgdnVsbiBzY2FubmVyCiMgaHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvc3ByaW5nZW53ZXJrLwpzcHJpbmdlbndlcmsKIyBzcWwgaW5qZWN0aW9uCiMgaHR0cDovL3d3dy5zcWxwb3dlcmluamVjdG9yLmNvbS8Kc3FsIHBvd2VyIGluamVjdG9yCiMgc3FsIGluamVjdGlvbgojIGh0dHA6Ly9zcWxtYXAub3JnLwpzcWxtYXAKIyBzcWwgaW5qZWN0aW9uCiMgaHR0cDovL3NxbG5pbmphLnNvdXJjZWZvcmdlLm5ldC8Kc3FsbmluamEKIyBodHRwczovL3d3dy5jeWJlci5uai5nb3YvdGhyZWF0LXByb2ZpbGVzL3Ryb2phbi12YXJpYW50cy9zeXNzY2FuCnN5c3NjYW4KIyBwYXNzd29yZCBjcmFja2VyCiMgaHR0cDovL2Zvb2Z1cy5uZXQvZ29vbnMvam1rL21lZHVzYS9tZWR1c2EuaHRtbAp0ZWggZm9yZXN0IGxvYnN0ZXIKdGhpcyBpcyBhbiBleHBsb2l0CiMgdnVsbiBzY2FubmVyPwp0b2F0YSBkcmFnb3N0ZWEKdG9hdGEgZHJhZ29zdGVhIG1lYSBwZW50cnUgZGlhdm9sYQojIFNRTCBib3QKIyBodHRwOi8vdG9vbHMuY2lzY28uY29tL3NlY3VyaXR5L2NlbnRlci92aWV3SXBzU2lnbmF0dXJlLng/c2lnbmF0dXJlSWQ9MjIxNDImc2lnbmF0dXJlU3ViSWQ9MAp1aWwycG4KIyBiYWRseSBzY3JpcHRlZCBVQXMgKGUuZy4gVXNlci1BZ2VudDogVXNlci1BZ2VudDogZm9vKQp1c2VyLWFnZW50OgojIHZ1bG4gc2Nhbm5yCiMgaHR0cHM6Ly9zdWJncmFwaC5jb20vdmVnYS8KdmVnYS8KIyB2dWxuIHNjYW5uZXIKIyBkZWFkPwp2b2lkZXllCiMgdnVsbiBzY2FubmVyCiMgaHR0cDovL3czYWYub3JnLwp3M2FmLnNmLm5ldAp3M2FmLnNvdXJjZWZvcmdlLm5ldAp3M2FmLm9yZwojIHNpdGUgc2Nhbm5lciAobGVnYWN5KQojIGh0dHA6Ly93d3cucm9ib3RzdHh0Lm9yZy9kYi93ZWJiYW5kaXQuaHRtbAp3ZWJiYW5kaXQKIyB2dWxuIHNjYW5uZXIKIyBodHRwOi8vd3d3OC5ocC5jb20vdXMvZW4vc29mdHdhcmUtc29sdXRpb25zL3dlYmluc3BlY3QtZHluYW1pYy1hbmFseXNpcy1kYXN0Lwp3ZWJpbnNwZWN0CiMgc2l0ZSBzY2FubmVyCiMgaHR0cDovL3d3dy5zY3J0LmNoL2VuL2F0dGFjay9kb3dubG9hZHMvd2Vic2hhZwp3ZWJzaGFnCiMgdnVsbiBzY2FubmVyCiMgZGVhZD8Kd2VidHJlbmRzIHNlY3VyaXR5IGFuYWx5emVyCiMgdnVsbiBzY2FubmVyCiMgaHR0cHM6Ly9naXRodWIuY29tL2hodWNuL3dlYnZ1bG5zY2FuCndlYnZ1bG5zY2FuCiMgdnVsbiBzY2FubmVyCiMgaHR0cHM6Ly9naXRodWIuY29tL3htZW5kZXovd2Z1enoKV2Z1enoKIyB2dWxuIHNjYW5uZXIKIyBodHRwczovL2dpdGh1Yi5jb20vZmZ1Zi9mZnVmCkZ1enogRmFzdGVyIFUgRm9vbAojIHdlYiB0ZWNobm9sb2d5IHNjYW5uZXIKIyBodHRwczovL3d3dy5tb3JuaW5nc3RhcnNlY3VyaXR5LmNvbS9yZXNlYXJjaC93aGF0d2ViCndoYXR3ZWIKIyB2dWxuIHNjYW5uZXIKd2hjYy8KIyBleHBsb2l0IHBvYwp3b3JkcHJlc3MgaGFzaCBncmFiYmVyCiMgZXhwbG9pdAp4bWxycGMgZXhwbG9pdAojIHdvcmRwcmVzcyB2dWxuIHNjYW5uZXIKIyBodHRwczovL3dwc2Nhbi5vcmcvCldQU2NhbgojIHZ1bG4gc2Nhbm5lcgojIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXplbjE2MC9zdHJ1dHMtcHduCnN0cnV0cy1wd24KIyBEZXRlY3RpZnkgd2Vic2l0ZSB2dWxuZXJhYmlsaXR5IHNjYW5uZXIKIyBodHRwczovL2RldGVjdGlmeS5jb20vCkRldGVjdGlmeQojIFpHcmFiIHNjYW5uZXIgKE1vemlsbGEvNS4wIHpncmFiLzAueCkKIyBodHRwczovL3ptYXAuaW8KemdyYWIK",
	"scripting-user-agents.data":                           "IyBHZW5lcmljIEhUVFAgY2xpZW50cyAocG9wdWxhciBsaWJyYXJpZXMpCgojIGh0dHAgbGlicmFyeQojIGh0dHA6Ly9zZWFyY2guY3Bhbi5vcmcvfm9wZXJhL0hUVFAtREFWL0RBVi5wbQpkYXYucG0vdgojIGh0dHAgbGlicmFyeQojIGh0dHA6Ly9zZWFyY2guY3Bhbi5vcmcvZGlzdC9saWJ3d3ctcGVybC9saWIvTFdQLnBtCmxpYnd3dy1wZXJsCiMgZ2VuZXJpYwptb3ppbGxhLzQuMCAoY29tcGF0aWJsZSkKbW96aWxsYS80LjAgKGNvbXBhdGlibGU7IG1zaWUgNi4wOyB3aW4zMikKbW96aWxsYS81LjAgc2YvCm1vemlsbGEvNS4wIHNmLy8KIyBodHRwIGxpYnJhcnkKIyBodHRwczovL3B5cGkucHl0aG9uLm9yZy9weXBpL2h0dHBsaWIyCnB5dGhvbi1odHRwbGliMgojIGh0dHAgbGlicmFyeQojIGh0dHA6Ly9kb2NzLnB5dGhvbi1yZXF1ZXN0cy5vcmcvZW4vbWFzdGVyLwpweXRob24tcmVxdWVzdHMKIyBodHRwIGxpYnJhcnkKIyBodHRwczovL2RvY3MucHl0aG9uLm9yZy8yL2xpYnJhcnkvdXJsbGliLmh0bWwKUHl0aG9uLXVybGxpYgojIGh0dHAgbGlicmFyeQojIGh0dHBzOi8vZ2l0aHViLmNvbS90eXBob2V1cy90eXBob2V1cwp0eXBob2V1cwojIGh0dHAgbGlicmFyeQojIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvd2luZG93cy9kZXNrdG9wL2FhMzgyOTI1JTI4dj12cy44NSUyOS5hc3B4Cndpbmh0dHAud2luaHR0cHJlcXVlc3QK",
	"sql-errors.data":                                      "TXlTcWxDbGllbnQuClNlcnZlciBtZXNzYWdlClNRTCBlcnJvcgpPcmFjbGUgZXJyb3IKSkVUIERhdGFiYXNlIEVuZ2luZQpQcm9jZWR1cmUgb3IgZnVuY3Rpb24gClNRTGl0ZS5FeGNlcHRpb24KW0lCTV1bQ0xJIERyaXZlcl1bREIyLzYwMDBdCnRoZSB1c2VkIHNlbGVjdCBzdGF0ZW1lbnRzIGhhdmUgZGlmZmVyZW50IG51bWJlciBvZiBjb2x1bW5zCm9yZy5wb3N0Z3Jlc3FsLnV0aWwuUFNRTEV4Y2VwdGlvbgpBY2Nlc3MgRGF0YWJhc2UgRW5naW5lCkluY29ycmVjdCBzeW50YXggbmVhcgpTeW50YXggZXJyb3IgaW4gc3RyaW5nIGluIHF1ZXJ5IGV4cHJlc3Npb24KU1FMaXRlRXhjZXB0aW9uCicgZG9lc24ndCBleGlzdApDTEkgRHJpdmVyCm9uIE15U1FMIHJlc3VsdCBpbmRleApzeWJhc2UKY29tLmluZm9ybWl4LmpkYmMKW015U1FMXVtPREJDCkVycm9yCmhhcyBvY2N1cnJlZCBpbiB0aGUgdmljaW5pdHkgb2Y6ClNpbnRheGlzIGluY29ycmVjdGEgY2VyY2EgZGUKTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlCmNvbS5teXNxbC5qZGJjLmV4Y2VwdGlvbnMKWW91IGhhdmUgYW4gZXJyb3IgaW4geW91ciBTUUwgc3ludGF4IG5lYXIKWW91IGhhdmUgYW4gZXJyb3IgaW4geW91ciBTUUwgc3ludGF4OwpBbiBpbGxlZ2FsIGNoYXJhY3RlciBoYXMgYmVlbiBmb3VuZCBpbiB0aGUgc3RhdGVtZW50CnBnX3F1ZXJ5KCkgWzoKc3VwcGxpZWQgYXJndW1lbnQgaXMgbm90IGEgdmFsaWQgTXlTUUwKbXNzcWxfcXVlcnkoKQpteXNxbF9mZXRjaF9hcnJheSgpCkV4Y2VwdGlvbgpqYXZhLnNxbC5TUUxFeGNlcHRpb24KQ29sdW1uIGNvdW50IGRvZXNuJ3QgbWF0Y2ggdmFsdWUgY291bnQgYXQgcm93ClN5YmFzZSBtZXNzYWdlCiBTUUwgU2VydmVyClBvc3RncmVTUUwgcXVlcnkgZmFpbGVkOgpEeW5hbWljIFNRTCBFcnJvcgpTeXN0ZW0uRGF0YS5TUUxpdGUuU1FMaXRlRXhjZXB0aW9uClNRTGl0ZS9KREJDRHJpdmVyClVuY2xvc2VkIHF1b3RhdGlvbiBtYXJrIGJlZm9yZSB0aGUgY2hhcmFjdGVyIHN0cmluZwpTeXN0ZW0uRGF0YS5TcWxDbGllbnQuClVuY2xvc2VkIHF1b3RhdGlvbiBtYXJrIGFmdGVyIHRoZSBjaGFyYWN0ZXIgc3RyaW5nClN5c3RlbS5EYXRhLk9sZURiLk9sZURiRXhjZXB0aW9uCltETV9RVUVSWV9FX1NZTlRBWF0KW1NxbEV4Y2VwdGlvbgpVbmV4cGVjdGVkIGVuZCBvZiBjb21tYW5kIGluIHN0YXRlbWVudAp2YWxpZCBQb3N0Z3JlU1FMIHJlc3VsdApwZ19leGVjKCkgWzoKU1FMIFNlcnZlcgpbU1FMSVRFX0VSUk9SXQpNaWNyb3NvZnQgT0xFIERCIFByb3ZpZGVyIGZvciBPREJDIERyaXZlcnMKUG9zdGdyZVNRTApvcmcuaHNxbGRiLmpkYmMKQURPREIuRmllbGQgKDB4ODAwQTBCQ0QpClNRTCBzeW50YXgKRXhjZXB0aW9uIApTeXN0ZW0uRGF0YS5TcWxDbGllbnQuU3FsRXhjZXB0aW9uCkRhdGEgdHlwZSBtaXNtYXRjaCBpbiBjcml0ZXJpYSBleHByZXNzaW9uLgpEcml2ZXIKREIyIFNRTCBlcnJvcgpTeWJhc2UgbWVzc2FnZToKT1JBLQpbTWljcm9zb2Z0XVtPREJDIFNRTCBTZXJ2ZXIgRHJpdmVyXQonODAwNDBlMTQnCk1pY3Jvc29mdCBPTEUgREIgUHJvdmlkZXIgZm9yIFNRTCBTZXJ2ZXIKIGluIHF1ZXJ5IGV4cHJlc3Npb24KTnBnc3FsLgp2YWxpZCBNeVNRTCByZXN1bHQKc3VwcGxpZWQgYXJndW1lbnQgaXMgbm90IGEgdmFsaWQgUG9zdGdyZVNRTCByZXN1bHQKZGIyXwpJbmdyZXMgU1FMU1RBVEUKQ29sdW1uIGNvdW50IGRvZXNuJ3QgbWF0Y2gKV2FybmluZwpbTWljcm9zb2Z0XVtPREJDIE1pY3Jvc29mdCBBY2Nlc3MgRHJpdmVyXQpbTWFjcm9tZWRpYV1bU1FMU2VydmVyIEpEQkMgRHJpdmVyXQo8Yj5XYXJuaW5nPC9iPjogaWJhc2VfClJvYWRob3VzZS5DbXMuCkRCMiBTUUwgZXJyb3I6Cg==",
	"unix-shell.data":                                      "JHtDRFBBVEh9CiR7RElSU1RBQ0t9CiR7SE9NRX0KJHtIT1NUTkFNRX0KJHtJRlN9CiR7T0xEUFdEfQoke09TVFlQRX0KJHtQQVRIfQoke1BXRH0KJENEUEFUSAokRElSU1RBQ0sKJEhPTUUKJEhPU1ROQU1FCiRJRlMKJE9MRFBXRAokT1NUWVBFCiRQQVRICiRQV0QKYmluL2Jhc2gKYmluL2NhdApiaW4vY3NoCmJpbi9kYXNoCmJpbi9kdQpiaW4vZWNobwpiaW4vZ3JlcApiaW4vbGVzcwpiaW4vbHMKYmluL21rbm9kCmJpbi9tb3JlCmJpbi9uYwpiaW4vcHMKYmluL3JiYXNoCmJpbi9zaApiaW4vc2xlZXAKYmluL3N1CmJpbi90Y3NoCmJpbi91bmFtZQpkZXYvZmQvCmRldi9udWxsCmRldi9zdGRlcnIKZGV2L3N0ZGluCmRldi9zdGRvdXQKZGV2L3RjcC8KZGV2L3VkcC8KZGV2L3plcm8KZXRjL2dyb3VwCmV0Yy9tYXN0ZXIucGFzc3dkCmV0Yy9wYXNzd2QKZXRjL3B3ZC5kYgpldGMvc2hhZG93CmV0Yy9zaGVsbHMKZXRjL3Nwd2QuZGIKcHJvYy9zZWxmLwp1c3IvYmluL2F3awp1c3IvYmluL2Jhc2U2NAp1c3IvYmluL2NhdAp1c3IvYmluL2NjCnVzci9iaW4vY2xhbmcKdXNyL2Jpbi9jbGFuZysrCnVzci9iaW4vY3VybAp1c3IvYmluL2RpZmYKdXNyL2Jpbi9lbnYKdXNyL2Jpbi9mZXRjaAp1c3IvYmluL2ZpbGUKdXNyL2Jpbi9maW5kCnVzci9iaW4vZnRwCnVzci9iaW4vZ2F3awp1c3IvYmluL2djYwp1c3IvYmluL2hlYWQKdXNyL2Jpbi9oZXhkdW1wCnVzci9iaW4vaWQKdXNyL2Jpbi9sZXNzCnVzci9iaW4vbG4KdXNyL2Jpbi9ta2ZpZm8KdXNyL2Jpbi9tb3JlCnVzci9iaW4vbmMKdXNyL2Jpbi9uY2F0CnVzci9iaW4vbmljZQp1c3IvYmluL25tYXAKdXNyL2Jpbi9wZXJsCnVzci9iaW4vcGhwCnVzci9iaW4vcGhwNQp1c3IvYmluL3BocDcKdXNyL2Jpbi9waHAtY2dpCnVzci9iaW4vcHJpbnRmCnVzci9iaW4vcHNlZAp1c3IvYmluL3B5dGhvbgp1c3IvYmluL3B5dGhvbjIKdXNyL2Jpbi9weXRob24zCnVzci9iaW4vcnVieQp1c3IvYmluL3NlZAp1c3IvYmluL3NvY2F0CnVzci9iaW4vdGFpbAp1c3IvYmluL3RlZQp1c3IvYmluL3RlbG5ldAp1c3IvYmluL3RvcAp1c3IvYmluL3VuYW1lCnVzci9iaW4vd2dldAp1c3IvYmluL3dobwp1c3IvYmluL3dob2FtaQp1c3IvYmluL3hhcmdzCnVzci9iaW4veHhkCnVzci9iaW4veWVzCnVzci9sb2NhbC9iaW4vYmFzaAp1c3IvbG9jYWwvYmluL2N1cmwKdXNyL2xvY2FsL2Jpbi9uY2F0CnVzci9sb2NhbC9iaW4vbm1hcAp1c3IvbG9jYWwvYmluL3BlcmwKdXNyL2xvY2FsL2Jpbi9waHAKdXNyL2xvY2FsL2Jpbi9weXRob24KdXNyL2xvY2FsL2Jpbi9weXRob24yCnVzci9sb2NhbC9iaW4vcHl0aG9uMwp1c3IvbG9jYWwvYmluL3JiYXNoCnVzci9sb2NhbC9iaW4vcnVieQp1c3IvbG9jYWwvYmluL3dnZXQK",
	"windows-powershell-commands.data":                     "cG93ZXJzaGVsbC5leGUKQWRkLUJpdHNGaWxlCkFkZC1Db21wdXRlcgpBZGQtQ29udGVudApBZGQtSGlzdG9yeQpBZGQtTWVtYmVyCkFkZC1QU1NuYXBpbgpBZGQtVHlwZQpDaGVja3BvaW50LUNvbXB1dGVyCkNsZWFyLUNvbnRlbnQKQ2xlYXItRXZlbnRMb2cKQ2xlYXItSGlzdG9yeQpDbGVhci1JdGVtCkNsZWFyLUl0ZW1Qcm9wZXJ0eQpDbGVhci1WYXJpYWJsZQpDb21wYXJlLU9iamVjdApDb21wbGV0ZS1CaXRzVHJhbnNmZXIKQ29tcGxldGUtVHJhbnNhY3Rpb24KQ29ubmVjdC1XU01hbgpDb252ZXJ0RnJvbS1DU1YKQ29udmVydEZyb20tU2VjdXJlU3RyaW5nCkNvbnZlcnRGcm9tLVN0cmluZ0RhdGEKQ29udmVydC1QYXRoCkNvbnZlcnRUby1DU1YKQ29udmVydFRvLUh0bWwKQ29udmVydFRvLVNlY3VyZVN0cmluZwpDb252ZXJ0VG8tWE1MCkNvcHktSXRlbQpDb3B5LUl0ZW1Qcm9wZXJ0eQpEZWJ1Zy1Qcm9jZXNzCkRpc2FibGUtQ29tcHV0ZXJSZXN0b3JlCkRpc2FibGUtUFNCcmVha3BvaW50CkRpc2FibGUtUFNTZXNzaW9uQ29uZmlndXJhdGlvbgpEaXNhYmxlLVdTTWFuQ3JlZFNTUApEaXNjb25uZWN0LVdTTWFuCkVuYWJsZS1Db21wdXRlclJlc3RvcmUKRW5hYmxlLVBTQnJlYWtwb2ludApFbmFibGUtUFNSZW1vdGluZwpFbmFibGUtUFNTZXNzaW9uQ29uZmlndXJhdGlvbgpFbmFibGUtV1NNYW5DcmVkU1NQCkVudGVyLVBTU2Vzc2lvbgpFeGl0LVBTU2Vzc2lvbgpFeHBvcnQtQWxpYXMKRXhwb3J0LUNsaXhtbApFeHBvcnQtQ29uc29sZQpFeHBvcnQtQ291bnRlcgpFeHBvcnQtQ1NWCkV4cG9ydC1Gb3JtYXREYXRhCkV4cG9ydC1Nb2R1bGVNZW1iZXIKRXhwb3J0LVBTU2Vzc2lvbgpGb3JFYWNoLU9iamVjdApGb3JtYXQtQ3VzdG9tCkZvcm1hdC1MaXN0CkZvcm1hdC1UYWJsZQpGb3JtYXQtV2lkZQpHZXQtQWNsCkdldC1BbGlhcwpHZXQtQXBwTG9ja2VyRmlsZUluZm9ybWF0aW9uCkdldC1BcHBMb2NrZXJQb2xpY3kKR2V0LUF1dGhlbnRpY29kZVNpZ25hdHVyZQpHZXQtQml0c1RyYW5zZmVyCkdldC1DaGlsZEl0ZW0KR2V0LUNvbW1hbmQKR2V0LUNvbXB1dGVyUmVzdG9yZVBvaW50CkdldC1Db250ZW50CkdldC1Db3VudGVyCkdldC1DcmVkZW50aWFsCkdldC1DdWx0dXJlCkdldC1FdmVudApHZXQtRXZlbnRMb2cKR2V0LUV2ZW50U3Vic2NyaWJlcgpHZXQtRXhlY3V0aW9uUG9saWN5CkdldC1Gb3JtYXREYXRhCkdldC1IaXN0b3J5CkdldC1Ib3N0CkdldC1Ib3RGaXgKR2V0LUl0ZW0KR2V0LUl0ZW1Qcm9wZXJ0eQpHZXQtSm9iCkdldC1Mb2NhdGlvbgpHZXQtTWVtYmVyCkdldC1Nb2R1bGUKR2V0LVBmeENlcnRpZmljYXRlCkdldC1Qcm9jZXNzCkdldC1QU0JyZWFrcG9pbnQKR2V0LVBTQ2FsbFN0YWNrCkdldC1QU0RyaXZlCkdldC1QU1Byb3ZpZGVyCkdldC1QU1Nlc3Npb24KR2V0LVBTU2Vzc2lvbkNvbmZpZ3VyYXRpb24KR2V0LVBTU25hcGluCkdldC1SYW5kb20KR2V0LVNlcnZpY2UKR2V0LVRyYWNlU291cmNlCkdldC1UcmFuc2FjdGlvbgpHZXQtVHJvdWJsZXNob290aW5nUGFjawpHZXQtVUlDdWx0dXJlCkdldC1VbmlxdWUKR2V0LVZhcmlhYmxlCkdldC1XaW5FdmVudApHZXQtV21pT2JqZWN0CkdldC1XU01hbkNyZWRTU1AKR2V0LVdTTWFuSW5zdGFuY2UKR3JvdXAtT2JqZWN0CkltcG9ydC1BbGlhcwpJbXBvcnQtQ2xpeG1sCkltcG9ydC1Db3VudGVyCkltcG9ydC1DU1YKSW1wb3J0LUxvY2FsaXplZERhdGEKSW1wb3J0LU1vZHVsZQpJbXBvcnQtUFNTZXNzaW9uCkludm9rZS1Db21tYW5kCkludm9rZS1FeHByZXNzaW9uCkludm9rZS1IaXN0b3J5Ckludm9rZS1JdGVtCkludm9rZS1Ucm91Ymxlc2hvb3RpbmdQYWNrCkludm9rZS1XbWlNZXRob2QKSW52b2tlLVdTTWFuQWN0aW9uCkpvaW4tUGF0aApMaW1pdC1FdmVudExvZwpNZWFzdXJlLUNvbW1hbmQKTWVhc3VyZS1PYmplY3QKTW92ZS1JdGVtCk1vdmUtSXRlbVByb3BlcnR5Ck5ldy1BbGlhcwpOZXctQXBwTG9ja2VyUG9saWN5Ck5ldy1FdmVudApOZXctRXZlbnRMb2cKTmV3LUl0ZW0KTmV3LUl0ZW1Qcm9wZXJ0eQpOZXctTW9kdWxlCk5ldy1Nb2R1bGVNYW5pZmVzdApOZXctT2JqZWN0Ck5ldy1QU0RyaXZlCk5ldy1QU1Nlc3Npb24KTmV3LVBTU2Vzc2lvbk9wdGlvbgpOZXctU2VydmljZQpOZXctVGltZVNwYW4KTmV3LVZhcmlhYmxlCk5ldy1XZWJTZXJ2aWNlUHJveHkKTmV3LVdTTWFuSW5zdGFuY2UKTmV3LVdTTWFuU2Vzc2lvbk9wdGlvbgpPdXQtRGVmYXVsdApPdXQtRmlsZQpPdXQtR3JpZFZpZXcKT3V0LUhvc3QKT3V0LU51bGwKT3V0LVByaW50ZXIKT3V0LVN0cmluZwpQb3AtTG9jYXRpb24KUHVzaC1Mb2NhdGlvbgpSZWFkLUhvc3QKUmVjZWl2ZS1Kb2IKUmVnaXN0ZXItRW5naW5lRXZlbnQKUmVnaXN0ZXItT2JqZWN0RXZlbnQKUmVnaXN0ZXItUFNTZXNzaW9uQ29uZmlndXJhdGlvbgpSZWdpc3Rlci1XbWlFdmVudApSZW1vdmUtQml0c1RyYW5zZmVyClJlbW92ZS1Db21wdXRlcgpSZW1vdmUtRXZlbnQKUmVtb3ZlLUV2ZW50TG9nClJlbW92ZS1JdGVtClJlbW92ZS1JdGVtUHJvcGVydHkKUmVtb3ZlLUpvYgpSZW1vdmUtTW9kdWxlClJlbW92ZS1QU0JyZWFrcG9pbnQKUmVtb3ZlLVBTRHJpdmUKUmVtb3ZlLVBTU2Vzc2lvbgpSZW1vdmUtUFNTbmFwaW4KUmVtb3ZlLVZhcmlhYmxlClJlbW92ZS1XbWlPYmplY3QKUmVtb3ZlLVdTTWFuSW5zdGFuY2UKUmVuYW1lLUl0ZW0KUmVuYW1lLUl0ZW1Qcm9wZXJ0eQpSZXNldC1Db21wdXRlck1hY2hpbmVQYXNzd29yZApSZXNvbHZlLVBhdGgKUmVzdGFydC1Db21wdXRlcgpSZXN0YXJ0LVNlcnZpY2UKUmVzdG9yZS1Db21wdXRlcgpSZXN1bWUtQml0c1RyYW5zZmVyClJlc3VtZS1TZXJ2aWNlClNlbGVjdC1PYmplY3QKU2VsZWN0LVN0cmluZwpTZWxlY3QtWE1MClNlbmQtTWFpbE1lc3NhZ2UKU2V0LUFjbApTZXQtQWxpYXMKU2V0LUFwcExvY2tlclBvbGljeQpTZXQtQXV0aGVudGljb2RlU2lnbmF0dXJlClNldC1CaXRzVHJhbnNmZXIKU2V0LUNvbnRlbnQKU2V0LURhdGUKU2V0LUV4ZWN1dGlvblBvbGljeQpTZXQtSXRlbQpTZXQtSXRlbVByb3BlcnR5ClNldC1Mb2NhdGlvbgpTZXQtUFNCcmVha3BvaW50ClNldC1QU0RlYnVnClNldC1QU1Nlc3Npb25Db25maWd1cmF0aW9uClNldC1TZXJ2aWNlClNldC1TdHJpY3RNb2RlClNldC1UcmFjZVNvdXJjZQpTZXQtVmFyaWFibGUKU2V0LVdtaUluc3RhbmNlClNldC1XU01hbkluc3RhbmNlClNldC1XU01hblF1aWNrQ29uZmlnClNob3ctRXZlbnRMb2cKU29ydC1PYmplY3QKU3BsaXQtUGF0aApTdGFydC1CaXRzVHJhbnNmZXIKU3RhcnQtSm9iClN0YXJ0LVByb2Nlc3MKU3RhcnQtU2VydmljZQpTdGFydC1TbGVlcApTdGFydC1UcmFuc2FjdGlvbgpTdGFydC1UcmFuc2NyaXB0ClN0b3AtQ29tcHV0ZXIKU3RvcC1Kb2IKU3RvcC1Qcm9jZXNzClN0b3AtU2VydmljZQpTdG9wLVRyYW5zY3JpcHQKU3VzcGVuZC1CaXRzVHJhbnNmZXIKU3VzcGVuZC1TZXJ2aWNlClRlZS1PYmplY3QKVGVzdC1BcHBMb2NrZXJQb2xpY3kKVGVzdC1Db21wdXRlclNlY3VyZUNoYW5uZWwKVGVzdC1Db25uZWN0aW9uClRlc3QtTW9kdWxlTWFuaWZlc3QKVGVzdC1QYXRoClRlc3QtV1NNYW4KVHJhY2UtQ29tbWFuZApVbmRvLVRyYW5zYWN0aW9uClVucmVnaXN0ZXItRXZlbnQKVW5yZWdpc3Rlci1QU1Nlc3Npb25Db25maWd1cmF0aW9uClVwZGF0ZS1Gb3JtYXREYXRhClVwZGF0ZS1MaXN0ClVwZGF0ZS1UeXBlRGF0YQpVc2UtVHJhbnNhY3Rpb24KV2FpdC1FdmVudApXYWl0LUpvYgpXYWl0LVByb2Nlc3MKV2hlcmUtT2JqZWN0CldyaXRlLURlYnVnCldyaXRlLUVycm9yCldyaXRlLUV2ZW50TG9nCldyaXRlLUhvc3QKV3JpdGUtT3V0cHV0CldyaXRlLVByb2dyZXNzCldyaXRlLVZlcmJvc2UKV3JpdGUtV2FybmluZwotRW5jb2RlZENvbW1hbmQKLUV4ZWN1dGlvblBvbGljeQotUFNDb25zb2xlRmlsZQo=",
}
