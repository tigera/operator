// THIS IS A GENERATED FILE, PLEASE DO NOT EDIT.
package applicationlayer

var ModsecurityCoreRuleSet = map[string]string{
	"REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example":  "",
	"REQUEST-901-INITIALIZATION.conf":                      "",
	"REQUEST-903.9001-DRUPAL-EXCLUSION-RULES.conf":         "",
	"REQUEST-903.9002-WORDPRESS-EXCLUSION-RULES.conf":      "",
	"REQUEST-903.9003-NEXTCLOUD-EXCLUSION-RULES.conf":      "",
	"REQUEST-903.9004-DOKUWIKI-EXCLUSION-RULES.conf":       "",
	"REQUEST-903.9005-CPANEL-EXCLUSION-RULES.conf":         "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuNAojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojIENvcHlyaWdodCAoYykgMjAyMS0yMDIyIENvcmUgUnVsZSBTZXQgcHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoZSBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IGlzIGRpc3RyaWJ1dGVkIHVuZGVyCiMgQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgKEFTTCkgdmVyc2lvbiAyCiMgUGxlYXNlIHNlZSB0aGUgZW5jbG9zZWQgTElDRU5TRSBmaWxlIGZvciBmdWxsIGRldGFpbHMuCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojIFRoZXNlIGV4Y2x1c2lvbnMgcmVtZWR5IGZhbHNlIHBvc2l0aXZlcyBpbiBhIGRlZmF1bHQgY1BhbmVsIGVudmlyb25tZW50LgojIFRoZSBleGNsdXNpb25zIGFyZSBvbmx5IGFjdGl2ZSBpZiBjcnNfZXhjbHVzaW9uc19jcGFuZWw9MSBpcyBzZXQuCiMgU2VlIHJ1bGUgOTAwMTMwIGluIGNycy1zZXR1cC5jb25mLmV4YW1wbGUgZm9yIGluc3RydWN0aW9ucy4KCgpTZWNSdWxlICZUWDpjcnNfZXhjbHVzaW9uc19jcGFuZWx8VFg6Y3JzX2V4Y2x1c2lvbnNfY3BhbmVsICJAZXEgMCIgXAogICAgImlkOjkwMDUwMDAsXAogICAgcGhhc2U6MSxcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgc2tpcEFmdGVyOkVORC1DUEFORUwiCgpTZWNSdWxlICZUWDpjcnNfZXhjbHVzaW9uc19jcGFuZWx8VFg6Y3JzX2V4Y2x1c2lvbnNfY3BhbmVsICJAZXEgMCIgXAogICAgImlkOjkwMDUwMDEsXAogICAgcGhhc2U6MixcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgc2tpcEFmdGVyOkVORC1DUEFORUwiCgoKIwojIFsgY1BhbmVsIHdobS1zZXJ2ZXItc3RhdHVzIF0KIwojIENwYW5lbCdzIFdITSBhdXRvIGdlbmVyYXRlcyByZXF1ZXN0cyB0byAvd2htLXNlcnZlci1zdGF0dXMgZnJvbQojIDEyNy4wLjAuMSAodHJpZ2dlcnMgcnVsZSA5MjAyODAsIG5vbi1ibG9ja2luZywgbG9nIG9ubHkpIE9uY2UgZXZlcnkgNSBtaW51dGVzLgojIFRoZXNlIGZhbHNlIHBvc2l0aXZlcyBoYXZlIGEgbG93IGltcGFjdCAobG9nZ2VkLCBub24tYmxvY2tpbmcpIHRvIGEgbGFyZ2UgbnVtYmVyIG9mIHVzZXJzIChhbGwgY1BhbmVsIGFkbWlucykuCiMKCiMKIyBSdWxlIHRvIGFsbG93IGNQYW5lbCB3aG0tc2VydmVyLXN0YXR1cyByZXF1ZXN0cyBmcm9tIGxvY2FsaG9zdCB3aXRob3V0IGxvZyBlbnRyeS4KIwpTZWNSdWxlIFJFUVVFU1RfTElORSAiQHJ4IF5HRVQgL3dobS1zZXJ2ZXItc3RhdHVzKD86L3wvXD9hdXRvKT8gSFRUUC9bMTJdXC5bMDFdJCIgXAogICAgImlkOjkwMDUxMDAsXAogICAgcGhhc2U6MSxcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLWFwYWNoZScsXAogICAgdGFnOidhdHRhY2stZ2VuZXJpYycsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjQnLFwKICAgIGNoYWluIgogICAgU2VjUnVsZSBSRU1PVEVfQUREUiAiQGlwTWF0Y2ggMTI3LjAuMC4xLDo6MSIgXAogICAgICAgICJ0Om5vbmUsXAogICAgICAgIGN0bDpydWxlUmVtb3ZlQnlJZD05MjAyODAsXAogICAgICAgIGN0bDpydWxlUmVtb3ZlQnlJZD05MjAzNTAiCgoKU2VjTWFya2VyICJFTkQtQ1BBTkVMIgo=",
	"REQUEST-903.9006-XENFORO-EXCLUSION-RULES.conf":        "",
	"REQUEST-905-COMMON-EXCEPTIONS.conf":                   "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuNAojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojIENvcHlyaWdodCAoYykgMjAyMS0yMDIyIENvcmUgUnVsZSBTZXQgcHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoZSBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IGlzIGRpc3RyaWJ1dGVkIHVuZGVyCiMgQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgKEFTTCkgdmVyc2lvbiAyCiMgUGxlYXNlIHNlZSB0aGUgZW5jbG9zZWQgTElDRU5TRSBmaWxlIGZvciBmdWxsIGRldGFpbHMuCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKIyBUaGlzIGZpbGUgaXMgdXNlZCBhcyBhbiBleGNlcHRpb24gbWVjaGFuaXNtIHRvIHJlbW92ZSBjb21tb24gZmFsc2UgcG9zaXRpdmVzCiMgdGhhdCBtYXkgYmUgZW5jb3VudGVyZWQuCiMKIyBFeGNlcHRpb24gZm9yIEFwYWNoZSBTU0wgcGluZ2VyCiMKU2VjUnVsZSBSRVFVRVNUX0xJTkUgIkBzdHJlcSBHRVQgLyIgXAogICAgImlkOjkwNTEwMCxcCiAgICBwaGFzZToxLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0tYXBhY2hlJyxcCiAgICB0YWc6J2F0dGFjay1nZW5lcmljJyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgY2hhaW4iCiAgICBTZWNSdWxlIFJFTU9URV9BRERSICJAaXBNYXRjaCAxMjcuMC4wLjEsOjoxIiBcCiAgICAgICAgInQ6bm9uZSxcCiAgICAgICAgY3RsOnJ1bGVFbmdpbmU9T2ZmLFwKICAgICAgICBjdGw6YXVkaXRFbmdpbmU9T2ZmIgoKIwojIEV4Y2VwdGlvbiBmb3IgQXBhY2hlIGludGVybmFsIGR1bW15IGNvbm5lY3Rpb24KIwpTZWNSdWxlIFJFTU9URV9BRERSICJAaXBNYXRjaCAxMjcuMC4wLjEsOjoxIiBcCiAgICAiaWQ6OTA1MTEwLFwKICAgIHBoYXNlOjEsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1hcGFjaGUnLFwKICAgIHRhZzonYXR0YWNrLWdlbmVyaWMnLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy40JyxcCiAgICBjaGFpbiIKICAgIFNlY1J1bGUgUkVRVUVTVF9IRUFERVJTOlVzZXItQWdlbnQgIkBlbmRzV2l0aCAoaW50ZXJuYWwgZHVtbXkgY29ubmVjdGlvbikiIFwKICAgICAgICAidDpub25lLFwKICAgICAgICBjaGFpbiIKICAgICAgICBTZWNSdWxlIFJFUVVFU1RfTElORSAiQHJ4IF4oPzpHRVQgL3xPUFRJT05TIFwqKSBIVFRQL1sxMl1cLlswMV0kIiBcCiAgICAgICAgICAgICJ0Om5vbmUsXAogICAgICAgICAgICBjdGw6cnVsZUVuZ2luZT1PZmYsXAogICAgICAgICAgICBjdGw6YXVkaXRFbmdpbmU9T2ZmIgo=",
	"REQUEST-910-IP-REPUTATION.conf":                       "",
	"REQUEST-911-METHOD-ENFORCEMENT.conf":                  "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuNAojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojIENvcHlyaWdodCAoYykgMjAyMS0yMDIyIENvcmUgUnVsZSBTZXQgcHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoZSBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IGlzIGRpc3RyaWJ1dGVkIHVuZGVyCiMgQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgKEFTTCkgdmVyc2lvbiAyCiMgUGxlYXNlIHNlZSB0aGUgZW5jbG9zZWQgTElDRU5TRSBmaWxlIGZvciBmdWxsIGRldGFpbHMuCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMCAoZW1wdHkpID0tIChhcHBseSB1bmNvbmRpdGlvbmFsbHkpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTExMDExLHBoYXNlOjEscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTExLU1FVEhPRC1FTkZPUkNFTUVOVCIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTExMDEyLHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTExLU1FVEhPRC1FTkZPUkNFTUVOVCIKIwojIC09IFBhcmFub2lhIExldmVsIDEgKGRlZmF1bHQpID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAxIG9yIGhpZ2hlcikKIwoKIwojIC09WyBBbGxvd2VkIFJlcXVlc3QgTWV0aG9kcyBdPS0KIwojIHR4LmFsbG93ZWRfbWV0aG9kcyBpcyBkZWZpbmVkIGluIHRoZSBjcnMtc2V0dXAuY29uZiBmaWxlCiMKU2VjUnVsZSBSRVFVRVNUX01FVEhPRCAiIUB3aXRoaW4gJXt0eC5hbGxvd2VkX21ldGhvZHN9IiBcCiAgICAiaWQ6OTExMTAwLFwKICAgIHBoYXNlOjIsXAogICAgYmxvY2ssXAogICAgbXNnOidNZXRob2QgaXMgbm90IGFsbG93ZWQgYnkgcG9saWN5JyxcCiAgICBsb2dkYXRhOicle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1tdWx0aScsXAogICAgdGFnOidhdHRhY2stZ2VuZXJpYycsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzIxMC8yNzIvMjIwLzI3NCcsXAogICAgdGFnOidQQ0kvMTIuMScsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjQnLFwKICAgIHNldmVyaXR5OidDUklUSUNBTCcsXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfSciCgoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5MTEwMTMscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MTEtTUVUSE9ELUVORk9SQ0VNRU5UIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5MTEwMTQscGhhc2U6MixwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MTEtTUVUSE9ELUVORk9SQ0VNRU5UIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMiA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMiBvciBoaWdoZXIpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAzIiAiaWQ6OTExMDE1LHBoYXNlOjEscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTExLU1FVEhPRC1FTkZPUkNFTUVOVCIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAzIiAiaWQ6OTExMDE2LHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTExLU1FVEhPRC1FTkZPUkNFTUVOVCIKIwojIC09IFBhcmFub2lhIExldmVsIDMgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDMgb3IgaGlnaGVyKQojCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgNCIgImlkOjkxMTAxNyxwaGFzZToxLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTkxMS1NRVRIT0QtRU5GT1JDRU1FTlQiClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgNCIgImlkOjkxMTAxOCxwaGFzZToyLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTkxMS1NRVRIT0QtRU5GT1JDRU1FTlQiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCA0ID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiA0IG9yIGhpZ2hlcikKIwoKCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWxzIEZpbmlzaGVkID0tCiMKU2VjTWFya2VyICJFTkQtUkVRVUVTVC05MTEtTUVUSE9ELUVORk9SQ0VNRU5UIgo=",
	"REQUEST-912-DOS-PROTECTION.conf":                      "",
	"REQUEST-913-SCANNER-DETECTION.conf":                   "",
	"REQUEST-920-PROTOCOL-ENFORCEMENT.conf":                "",
	"REQUEST-921-PROTOCOL-ATTACK.conf":                     "",
	"REQUEST-922-MULTIPART-ATTACK.conf":                    "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuNAojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojIENvcHlyaWdodCAoYykgMjAyMS0yMDIyIENvcmUgUnVsZSBTZXQgcHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoZSBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IGlzIGRpc3RyaWJ1dGVkIHVuZGVyCiMgQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgKEFTTCkgdmVyc2lvbiAyCiMgUGxlYXNlIHNlZSB0aGUgZW5jbG9zZWQgTElDRU5TRSBmaWxlIGZvciBmdWxsIGRldGFpbHMuCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMCAoZW1wdHkpID0tIChhcHBseSB1bmNvbmRpdGlvbmFsbHkpCiMKCiMgVGhpcyBmaWxlIGlzIHRvIGFkZHJlc3MgdGhlIDNVV01XQTZXIHZ1bG5lcmFiaWxpdHkuCiMgSXQgcmVxdWlyZXMgTW9kU2VjdXJpdHkgdmVyc2lvbiAyLjkuNiBvciAzLjAuOCAob3IgYW4gdXBkYXRlZCB2ZXJzaW9uIHdpdGggYmFja3BvcnRzCiMgb2YgdGhlIHNlY3VyaXR5IGZpeGVzIGluIHRoZXNlIHZlcnNpb25zKSBvciBhIGNvbXBhdGlibGUgZW5naW5lIHN1cHBvcnRpbmcgdGhlc2UgY2hhbmdlcy4KIwojIElmIHlvdSBjYW5ub3QgdXBncmFkZSBNb2RTZWN1cml0eSwgdGhpcyBmaWxlIHdpbGwgY2F1c2UgTW9kU2VjdXJpdHkgdG8gZmFpbCB0byBzdGFydC4KIyBJbiB0aGF0IGNhc2UsIHlvdSBjYW4gdGVtcG9yYXJpbHkgZGVsZXRlIHRoaXMgZmlsZS4gSG93ZXZlciwgeW91IHdpbGwgYmUgbWlzc2luZwojIHByb3RlY3Rpb24gZnJvbSB0aGVzZSBydWxlcy4gVGhlcmVmb3JlLCB3ZSByZWNvbW1lbmQgdXBncmFkaW5nIHlvdXIgZW5naW5lIGluc3RlYWQuCgojIFRoZSBydWxlcyBpbiB0aGlzIGZpbGUgd2lsbCBiZSBwYXJ0IG9mIHRoZSA5MjAgLyA5MjEgaW4gdGhlIGZ1dHVyZS4KCiMgT25seSBhbGxvdyBzcGVjaWZpYyBjaGFyc2V0cyB3aGVuIHVzaW5nICJfY2hhcnNldF8iCiMgTm90ZTogdGhpcyBpcyBpbiBwaGFzZToyIGJlY2F1c2UgdGhlc2UgYXJlIGhlYWRlcnMgdGhhdCBjb21lIGluIHRoZSBib2R5ClNlY1J1bGUgJk1VTFRJUEFSVF9QQVJUX0hFQURFUlM6X2NoYXJzZXRfICIhQGVxIDAiIFwKICAgICJpZDo5MjIxMDAsXAogICAgcGhhc2U6MixcCiAgICBibG9jayxcCiAgICB0Om5vbmUsXAogICAgbXNnOidNdWx0aXBhcnQgY29udGVudCB0eXBlIGdsb2JhbCBfY2hhcnNldF8gZGVmaW5pdGlvbiBpcyBub3QgYWxsb3dlZCBieSBwb2xpY3knLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtBUkdTLl9jaGFyc2V0X30nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0tbXVsdGknLFwKICAgIHRhZzonYXR0YWNrLW11bHRpcGFydC1oZWFkZXInLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMjU1LzE1MycsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgc2V2ZXJpdHk6J0NSSVRJQ0FMJyxcCiAgICBjaGFpbiIKICAgIFNlY1J1bGUgQVJHUzpfY2hhcnNldF8gIiFAd2l0aGluIHwle3R4LmFsbG93ZWRfcmVxdWVzdF9jb250ZW50X3R5cGVfY2hhcnNldH18IiBcCiAgICAgICAgInQ6bG93ZXJjYXNlLFwKICAgICAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyIKCgojIE9ubHkgYWxsb3cgc3BlY2lmaWMgY2hhcnNldHMgc2FtZSBhcyBSdWxlIDkyMDYwMAojIE5vdGU6IHRoaXMgaXMgaW4gcGhhc2U6MiBiZWNhdXNlIHRoZXNlIGFyZSBoZWFkZXJzIHRoYXQgY29tZSBpbiB0aGUgYm9keQpTZWNSdWxlIE1VTFRJUEFSVF9QQVJUX0hFQURFUlMgIkByeCBeY29udGVudC10eXBlXHMqKzpccyorKC4qKSQiIFwKICAgICJpZDo5MjIxMTAsXAogICAgcGhhc2U6MixcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSx0Omxvd2VyY2FzZSxcCiAgICBtc2c6J0lsbGVnYWwgTUlNRSBNdWx0aXBhcnQgSGVhZGVyIGNvbnRlbnQtdHlwZTogY2hhcnNldCBwYXJhbWV0ZXInLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4xfSBmb3VuZCB3aXRoaW4gQ29udGVudC1UeXBlIG11bHRpcGFydCBmb3JtJyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1wcm90b2NvbCcsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMjcyLzIyMCcsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgc2V2ZXJpdHk6J0NSSVRJQ0FMJyxcCiAgICBjaGFpbiIKICAgIFNlY1J1bGUgVFg6MSAiIUByeCBeKD86KD86XCp8W15cIigpLFwvOjs8PT4/IVtceDVjXF17fV0rKVwvKD86XCp8W15cIigpLFwvOjs8PT4/IVtceDVjXF17fV0rKSkoPzpccyorO1xzKisoPzooPzpjaGFyc2V0XHMqKz1ccyorKD86XCI/KD86aXNvLTg4NTktMTU/fHdpbmRvd3MtMTI1Mnx1dGYtOClcYlwiPykpfCg/Oig/OmMoPzpoKD86YSg/OnIoPzpzKD86ZVtedFwiKCksXC86Ozw9Pj8hW1x4NWNcXXt9XXxbXmVcIigpLC86Ozw9Pj8hW1x4NWNcXXt9XSl8W15zXCIoKSwvOjs8PT4/IVtceDVjXF17fV0pfFteclwiKCksLzo7PD0+PyFbXHg1Y1xde31dKXxbXmFcIigpLC86Ozw9Pj8hW1x4NWNcXXt9XSl8W15oXCIoKSwvOjs8PT4/IVtceDVjXF17fV0pfFteY1wiKCksLzo7PD0+PyFbXHg1Y1xde31dKVteXCIoKSwvOjs8PT4/IVtceDVjXF17fV0qKD86KVxzKis9XHMqK1teKCksLzo7PD0+PyFbXHg1Y1xde31dKyl8Oz8pKSooPzpccyorLFxzKisoPzooPzpcKnxbXlwiKCksXC86Ozw9Pj8hW1x4NWNcXXt9XSspXC8oPzpcKnxbXlwiKCksXC86Ozw9Pj8hW1x4NWNcXXt9XSspKSg/OlxzKis7XHMqKyg/Oig/OmNoYXJzZXRccyorPVxzKisoPzpcIj8oPzppc28tODg1OS0xNT98d2luZG93cy0xMjUyfHV0Zi04KVxiXCI/KSl8KD86KD86Yyg/OmgoPzphKD86cig/OnMoPzplW150XCIoKSxcLzo7PD0+PyFbXHg1Y1xde31dfFteZVwiKCksLzo7PD0+PyFbXHg1Y1xde31dKXxbXnNcIigpLC86Ozw9Pj8hW1x4NWNcXXt9XSl8W15yXCIoKSwvOjs8PT4/IVtceDVjXF17fV0pfFteYVwiKCksLzo7PD0+PyFbXHg1Y1xde31dKXxbXmhcIigpLC86Ozw9Pj8hW1x4NWNcXXt9XSl8W15jXCIoKSwvOjs8PT4/IVtceDVjXF17fV0pW15cIigpLC86Ozw9Pj8hW1x4NWNcXXt9XSooPzopXHMqKz1ccyorW14oKSwvOjs8PT4/IVtceDVjXF17fV0rKXw7PykpKikqJCIgXAogICAgICAgICJ0Omxvd2VyY2FzZSxcCiAgICAgICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfSciCgojIENvbnRlbnQtVHJhbnNmZXItRW5jb2Rpbmcgd2FzIGRlcHJlY2F0ZWQgYnkgcmZjNzU3OCBpbiAyMDE1IGFuZCBzaG91bGQgbm90IGJlIHVzZWQgKHNlZTogaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzc1Nzgjc2VjdGlvbi00LjcpCiMgTm90ZTogdGhpcyBpcyBpbiBwaGFzZToyIGJlY2F1c2UgdGhlc2UgYXJlIGhlYWRlcnMgdGhhdCBjb21lIGluIHRoZSBib2R5ClNlY1J1bGUgTVVMVElQQVJUX1BBUlRfSEVBREVSUyAiQHJ4IGNvbnRlbnQtdHJhbnNmZXItZW5jb2Rpbmc6KC4qKSIgXAogICAgImlkOjkyMjEyMCxcCiAgICBwaGFzZToyLFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLHQ6bG93ZXJjYXNlLFwKICAgIG1zZzonQ29udGVudC1UcmFuc2Zlci1FbmNvZGluZyB3YXMgZGVwcmVjYXRlZCBieSByZmM3NTc4IGluIDIwMTUgYW5kIHNob3VsZCBub3QgYmUgdXNlZCcsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1kZXByZWNhdGVkLWhlYWRlcicsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMjcyLzIyMCcsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgc2V2ZXJpdHk6J0NSSVRJQ0FMJyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyIK",
	"REQUEST-930-APPLICATION-ATTACK-LFI.conf":              "",
	"REQUEST-931-APPLICATION-ATTACK-RFI.conf":              "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuNAojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojIENvcHlyaWdodCAoYykgMjAyMS0yMDIyIENvcmUgUnVsZSBTZXQgcHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoZSBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IGlzIGRpc3RyaWJ1dGVkIHVuZGVyCiMgQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgKEFTTCkgdmVyc2lvbiAyCiMgUGxlYXNlIHNlZSB0aGUgZW5jbG9zZWQgTElDRU5TRSBmaWxlIGZvciBmdWxsIGRldGFpbHMuCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiMKIyBSRkkgQXR0YWNrcwojCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMCAoZW1wdHkpID0tIChhcHBseSB1bmNvbmRpdGlvbmFsbHkpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTMxMDExLHBoYXNlOjEscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTMxLUFQUExJQ0FUSU9OLUFUVEFDSy1SRkkiClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMSIgImlkOjkzMTAxMixwaGFzZToyLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTkzMS1BUFBMSUNBVElPTi1BVFRBQ0stUkZJIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMSAoZGVmYXVsdCkgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDEgb3IgaGlnaGVyKQojCgojIC09WyBSdWxlIExvZ2ljIF09LQojIFRoZXNlIHJ1bGVzIGxvb2sgZm9yIGNvbW1vbiB0eXBlcyBvZiBSZW1vdGUgRmlsZSBJbmNsdXNpb24gKFJGSSkgYXR0YWNrIG1ldGhvZHMuCiMJLSBVUkwgQ29udGFpbnMgYW4gSVAgQWRkcmVzcwojCS0gVGhlIFBIUCAiaW5jbHVkZSgpIiBGdW5jdGlvbgojCS0gUkZJIERhdGEgRW5kcyB3aXRoIFF1ZXN0aW9uIE1hcmsocykgKD8pCiMJLSBSRkkgSG9zdCBEb2Vzbid0IE1hdGNoIExvY2FsIEhvc3QKIwojIC09WyBSZWZlcmVuY2VzIF09LQojIGh0dHA6Ly9wcm9qZWN0cy53ZWJhcHBzZWMub3JnL1JlbW90ZS1GaWxlLUluY2x1c2lvbgojIGh0dHA6Ly90YWN0aWNhbHdlYmFwcHNlYy5ibG9nc3BvdC5jb20vMjAwOS8wNi9nZW5lcmljLXJlbW90ZS1maWxlLWluY2x1c2lvbi1hdHRhY2suaHRtbAojClNlY1J1bGUgQVJHUyAiQHJ4IF4oP2k6ZmlsZXxmdHBzP3xodHRwcz8pOlwvXC8oPzpcZHsxLDN9XC5cZHsxLDN9XC5cZHsxLDN9XC5cZHsxLDN9KSIgXAogICAgImlkOjkzMTEwMCxcCiAgICBwaGFzZToyLFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLFwKICAgIG1zZzonUG9zc2libGUgUmVtb3RlIEZpbGUgSW5jbHVzaW9uIChSRkkpIEF0dGFjazogVVJMIFBhcmFtZXRlciB1c2luZyBJUCBBZGRyZXNzJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1yZmknLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8xNTIvMTc1LzI1MycsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjQnLFwKICAgIHNldmVyaXR5OidDUklUSUNBTCcsXAogICAgc2V0dmFyOid0eC5yZmlfc2NvcmU9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nIgoKU2VjUnVsZSBRVUVSWV9TVFJJTkd8UkVRVUVTVF9CT0RZICJAcnggKD9pKSg/OlxiaW5jbHVkZVxzKlwoW14pXSp8bW9zQ29uZmlnX2Fic29sdXRlX3BhdGh8X0NPTkZcW3BhdGhcXXxfU0VSVkVSXFtET0NVTUVOVF9ST09UXF18R0FMTEVSWV9CQVNFRElSfHBhdGhcW2RvY3Jvb3RcXXxhcHBzZXJ2X3Jvb3R8Y29uZmlnXFtyb290X2RpclxdKT0oPzpmaWxlfGZ0cHM/fGh0dHBzPyk6XC9cLyIgXAogICAgImlkOjkzMTExMCxcCiAgICBwaGFzZToyLFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLHQ6dXJsRGVjb2RlVW5pLFwKICAgIG1zZzonUG9zc2libGUgUmVtb3RlIEZpbGUgSW5jbHVzaW9uIChSRkkpIEF0dGFjazogQ29tbW9uIFJGSSBWdWxuZXJhYmxlIFBhcmFtZXRlciBOYW1lIHVzZWQgdy9VUkwgUGF5bG9hZCcsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1tdWx0aScsXAogICAgdGFnOidhdHRhY2stcmZpJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzEnLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMTUyLzE3NS8yNTMnLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy40JyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIHNldHZhcjondHgucmZpX3Njb3JlPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyIKClNlY1J1bGUgQVJHUyAiQHJ4IF4oP2k6ZmlsZXxmdHBzP3xodHRwcz8pLio/XD8rJCIgXAogICAgImlkOjkzMTEyMCxcCiAgICBwaGFzZToyLFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLFwKICAgIG1zZzonUG9zc2libGUgUmVtb3RlIEZpbGUgSW5jbHVzaW9uIChSRkkpIEF0dGFjazogVVJMIFBheWxvYWQgVXNlZCB3L1RyYWlsaW5nIFF1ZXN0aW9uIE1hcmsgQ2hhcmFjdGVyICg/KScsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1tdWx0aScsXAogICAgdGFnOidhdHRhY2stcmZpJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzEnLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMTUyLzE3NS8yNTMnLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy40JyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIHNldHZhcjondHgucmZpX3Njb3JlPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyIKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAyIiAiaWQ6OTMxMDEzLHBoYXNlOjEscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTMxLUFQUExJQ0FUSU9OLUFUVEFDSy1SRkkiClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMiIgImlkOjkzMTAxNCxwaGFzZToyLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTkzMS1BUFBMSUNBVElPTi1BVFRBQ0stUkZJIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMiA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMiBvciBoaWdoZXIpCiMKClNlY1J1bGUgQVJHUyAiQHJ4IF4oP2k6ZmlsZXxmdHBzP3xodHRwcz8pOi8vKFteL10qKS4qJCIgXAogICAgImlkOjkzMTEzMCxcCiAgICBwaGFzZToyLFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLFwKICAgIG1zZzonUG9zc2libGUgUmVtb3RlIEZpbGUgSW5jbHVzaW9uIChSRkkpIEF0dGFjazogT2ZmLURvbWFpbiBSZWZlcmVuY2UvTGluaycsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1tdWx0aScsXAogICAgdGFnOidhdHRhY2stcmZpJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzE1Mi8xNzUvMjUzJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzInLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy40JyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIHNldHZhcjondHgucmZpX3BhcmFtZXRlcl8le01BVENIRURfVkFSX05BTUV9PS4le3R4LjF9JyxcCiAgICBjaGFpbiIKICAgIFNlY1J1bGUgVFg6L3JmaV9wYXJhbWV0ZXJfLiovICIhQGVuZHNXaXRoIC4le3JlcXVlc3RfaGVhZGVycy5ob3N0fSIgXAogICAgICAgICJzZXR2YXI6J3R4LnJmaV9zY29yZT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDI9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nIgoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5MzEwMTUscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MzEtQVBQTElDQVRJT04tQVRUQUNLLVJGSSIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAzIiAiaWQ6OTMxMDE2LHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTMxLUFQUExJQ0FUSU9OLUFUVEFDSy1SRkkiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAzID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAzIG9yIGhpZ2hlcikKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDQiICJpZDo5MzEwMTcscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MzEtQVBQTElDQVRJT04tQVRUQUNLLVJGSSIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTMxMDE4LHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTMxLUFQUExJQ0FUSU9OLUFUVEFDSy1SRkkiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCA0ID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiA0IG9yIGhpZ2hlcikKIwoKCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWxzIEZpbmlzaGVkID0tCiMKU2VjTWFya2VyICJFTkQtUkVRVUVTVC05MzEtQVBQTElDQVRJT04tQVRUQUNLLVJGSSIK",
	"REQUEST-932-APPLICATION-ATTACK-RCE.conf":              "",
	"REQUEST-933-APPLICATION-ATTACK-PHP.conf":              "",
	"REQUEST-934-APPLICATION-ATTACK-NODEJS.conf":           "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuNAojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojIENvcHlyaWdodCAoYykgMjAyMS0yMDIyIENvcmUgUnVsZSBTZXQgcHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoZSBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IGlzIGRpc3RyaWJ1dGVkIHVuZGVyCiMgQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgKEFTTCkgdmVyc2lvbiAyCiMgUGxlYXNlIHNlZSB0aGUgZW5jbG9zZWQgTElDRU5TRSBmaWxlIGZvciBmdWxsIGRldGFpbHMuCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMCAoZW1wdHkpID0tIChhcHBseSB1bmNvbmRpdGlvbmFsbHkpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTM0MDExLHBoYXNlOjEscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTM0LUFQUExJQ0FUSU9OLUFUVEFDSy1OT0RFSlMiClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMSIgImlkOjkzNDAxMixwaGFzZToyLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTkzNC1BUFBMSUNBVElPTi1BVFRBQ0stTk9ERUpTIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMSAoZGVmYXVsdCkgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDEgb3IgaGlnaGVyKQojCgoKIyBbIEluc2VjdXJlIHVuc2VyaWFsaXphdGlvbiAvIGdlbmVyaWMgUkNFIHNpZ25hdHVyZXMgXQojCiMgTGlicmFyaWVzIHBlcmZvcm1pbmcgaW5zZWN1cmUgdW5zZXJpYWxpemF0aW9uOgojIC0gbm9kZS1zZXJpYWxpemU6IF8kJE5EX0ZVTkMkJF8gKENWRS0yMDE3LTU5NDEpCiMgLSBmdW5jc3RlcjogX19qc19mdW5jdGlvbgojCiMgU2VlOgojIGh0dHBzOi8vb3BzZWN4LmNvbS9pbmRleC5waHAvMjAxNy8wMi8wOC9leHBsb2l0aW5nLW5vZGUtanMtZGVzZXJpYWxpemF0aW9uLWJ1Zy1mb3ItcmVtb3RlLWNvZGUtZXhlY3V0aW9uLwojIGh0dHBzOi8vd3d3LmFjdW5ldGl4LmNvbS9ibG9nL3dlYi1zZWN1cml0eS16b25lL2Rlc2VyaWFsaXphdGlvbi12dWxuZXJhYmlsaXRpZXMtYXR0YWNraW5nLWRlc2VyaWFsaXphdGlvbi1pbi1qcy8KIwojIFNvbWUgZ2VuZXJpYyBzbmlwcGV0cyB1c2VkOgojIC0gZnVuY3Rpb24oKSB7CiMgLSBuZXcgRnVuY3Rpb24oCiMgLSBldmFsKAojIC0gU3RyaW5nLmZyb21DaGFyQ29kZSgKIwojIExhc3QgdHdvIGFyZSB1c2VkIGJ5IG5vZGVqc3NoZWxsLnB5LAojIGh0dHBzOi8vZ2l0aHViLmNvbS9hamluYWJyYWhhbS9Ob2RlLkpzLVNlY3VyaXR5LUNvdXJzZS9ibG9iL21hc3Rlci9ub2RlanNzaGVsbC5weQojCiMgQXMgYmFzZTY0IGlzIHNvbWV0aW1lcyAoYnV0IG5vdCBhbHdheXMpIHVzZWQgdG8gZW5jb2RlIHNlcmlhbGl6ZWQgdmFsdWVzLAojIHVzZSBtdWx0aU1hdGNoIGFuZCB0OmJhc2U2NGRlY29kZS4KIwojIFJlZ2V4cCBnZW5lcmF0ZWQgZnJvbSB1dGlsL3JlZ2V4cC1hc3NlbWJsZS9yZWdleHAtOTM0MTAwLmRhdGEgdXNpbmcgUmVnZXhwOjpBc3NlbWJsZS4KIyBTZWUgaHR0cHM6Ly9jb3JlcnVsZXNldC5vcmcvMjAxOTA4MjYvb3B0aW1pemluZy1yZWd1bGFyLWV4cHJlc3Npb25zLyBmb3IgdXNhZ2UuCgpTZWNSdWxlIFJFUVVFU1RfQ09PS0lFU3whUkVRVUVTVF9DT09LSUVTOi9fX3V0bS98UkVRVUVTVF9DT09LSUVTX05BTUVTfEFSR1NfTkFNRVN8QVJHU3xYTUw6LyogIkByeCAoPzooPzpfKD86XCRcJE5EX0ZVTkNcJFwkX3xfanNfZnVuY3Rpb24pfCg/Om5ld1xzK0Z1bmN0aW9ufFxiZXZhbClccypcKHxTdHJpbmdccypcLlxzKmZyb21DaGFyQ29kZXxmdW5jdGlvblxzKlwoXHMqXClccyp7fHRoaXNcLmNvbnN0cnVjdG9yKXxtb2R1bGVcLmV4cG9ydHNccyo9KSIgXAogICAgImlkOjkzNDEwMCxcCiAgICBwaGFzZToyLFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLHQ6dXJsRGVjb2RlVW5pLHQ6YmFzZTY0RGVjb2RlLFwKICAgIG1zZzonTm9kZS5qcyBJbmplY3Rpb24gQXR0YWNrJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLWphdmFzY3JpcHQnLFwKICAgIHRhZzoncGxhdGZvcm0tbXVsdGknLFwKICAgIHRhZzonYXR0YWNrLXJjZScsXAogICAgdGFnOidhdHRhY2staW5qZWN0aW9uLW5vZGVqcycsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzE1Mi8yNDInLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy40JyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIG11bHRpTWF0Y2gsXAogICAgc2V0dmFyOid0eC5yY2Vfc2NvcmU9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nIgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMiIgImlkOjkzNDAxMyxwaGFzZToxLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTkzNC1BUFBMSUNBVElPTi1BVFRBQ0stTk9ERUpTIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5MzQwMTQscGhhc2U6MixwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MzQtQVBQTElDQVRJT04tQVRUQUNLLU5PREVKUyIKIwojIC09IFBhcmFub2lhIExldmVsIDIgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDIgb3IgaGlnaGVyKQojCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5MzQwMTUscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05MzQtQVBQTElDQVRJT04tQVRUQUNLLU5PREVKUyIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAzIiAiaWQ6OTM0MDE2LHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTM0LUFQUExJQ0FUSU9OLUFUVEFDSy1OT0RFSlMiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAzID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAzIG9yIGhpZ2hlcikKIwoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTM0MDE3LHBoYXNlOjEscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTM0LUFQUExJQ0FUSU9OLUFUVEFDSy1OT0RFSlMiClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgNCIgImlkOjkzNDAxOCxwaGFzZToyLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTkzNC1BUFBMSUNBVElPTi1BVFRBQ0stTk9ERUpTIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgNCA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogNCBvciBoaWdoZXIpCiMKCgoKIwojIC09IFBhcmFub2lhIExldmVscyBGaW5pc2hlZCA9LQojClNlY01hcmtlciAiRU5ELVJFUVVFU1QtOTM0LUFQUExJQ0FUSU9OLUFUVEFDSy1OT0RFSlMiCg==",
	"REQUEST-941-APPLICATION-ATTACK-XSS.conf":              "",
	"REQUEST-942-APPLICATION-ATTACK-SQLI.conf":             "",
	"REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION.conf": "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuNAojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojIENvcHlyaWdodCAoYykgMjAyMS0yMDIyIENvcmUgUnVsZSBTZXQgcHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoZSBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IGlzIGRpc3RyaWJ1dGVkIHVuZGVyCiMgQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgKEFTTCkgdmVyc2lvbiAyCiMgUGxlYXNlIHNlZSB0aGUgZW5jbG9zZWQgTElDRU5TRSBmaWxlIGZvciBmdWxsIGRldGFpbHMuCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMCAoZW1wdHkpID0tIChhcHBseSB1bmNvbmRpdGlvbmFsbHkpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTQzMDExLHBoYXNlOjEscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTQzLUFQUExJQ0FUSU9OLUFUVEFDSy1TRVNTSU9OLUZJWEFUSU9OIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDEiICJpZDo5NDMwMTIscGhhc2U6MixwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05NDMtQVBQTElDQVRJT04tQVRUQUNLLVNFU1NJT04tRklYQVRJT04iCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAxIChkZWZhdWx0KSA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMSBvciBoaWdoZXIpCiMKCiMKIyBTZXNzaW9uIGZpeGF0aW9uCiMKIyAtPVsgUmVmZXJlbmNlcyBdPS0KIyBodHRwOi8vcHJvamVjdHMud2ViYXBwc2VjLm9yZy9TZXNzaW9uLUZpeGF0aW9uCiMgaHR0cDovL3Byb2plY3RzLndlYmFwcHNlYy5vcmcvdy9wYWdlLzEzMjQ2OTYwL1Nlc3Npb24lMjBGaXhhdGlvbgojIGh0dHA6Ly9jYXBlYy5taXRyZS5vcmcvZGF0YS9kZWZpbml0aW9ucy82MS5odG1sCiMKU2VjUnVsZSBSRVFVRVNUX0NPT0tJRVN8IVJFUVVFU1RfQ09PS0lFUzovX191dG0vfFJFUVVFU1RfQ09PS0lFU19OQU1FU3xBUkdTX05BTUVTfEFSR1N8WE1MOi8qICJAcnggKD9pOlwuY29va2llXGIuKj87XFcqPyg/OmV4cGlyZXN8ZG9tYWluKVxXKj89fFxiaHR0cC1lcXVpdlxXK3NldC1jb29raWVcYikiIFwKICAgICJpZDo5NDMxMDAsXAogICAgcGhhc2U6MixcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSx0OnVybERlY29kZVVuaSxcCiAgICBtc2c6J1Bvc3NpYmxlIFNlc3Npb24gRml4YXRpb24gQXR0YWNrOiBTZXR0aW5nIENvb2tpZSBWYWx1ZXMgaW4gSFRNTCcsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1tdWx0aScsXAogICAgdGFnOidhdHRhY2stZml4YXRpb24nLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8yMjUvMjEvNTkzLzYxJyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgc2V2ZXJpdHk6J0NSSVRJQ0FMJyxcCiAgICBzZXR2YXI6J3R4LnNlc3Npb25fZml4YXRpb25fc2NvcmU9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nIgoKClNlY1J1bGUgQVJHU19OQU1FUyAiQHJ4IF4oPzpqc2Vzc2lvbmlkfGFzcHNlc3Npb25pZHxhc3BcLm5ldF9zZXNzaW9uaWR8cGhwc2Vzc2lvbnxwaHBzZXNzaWR8d2VibG9naWNzZXNzaW9ufHNlc3Npb25faWR8c2Vzc2lvbi1pZHxjZmlkfGNmdG9rZW58Y2ZzaWR8anNlcnZzZXNzaW9ufGp3c2Vzc2lvbikkIiBcCiAgICAiaWQ6OTQzMTEwLFwKICAgIHBoYXNlOjIsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsdDp1cmxEZWNvZGVVbmksdDpsb3dlcmNhc2UsXAogICAgbXNnOidQb3NzaWJsZSBTZXNzaW9uIEZpeGF0aW9uIEF0dGFjazogU2Vzc2lvbklEIFBhcmFtZXRlciBOYW1lIHdpdGggT2ZmLURvbWFpbiBSZWZlcmVyJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1maXhhdGlvbicsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzIyNS8yMS81OTMvNjEnLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy40JyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIGNoYWluIgogICAgU2VjUnVsZSBSRVFVRVNUX0hFQURFUlM6UmVmZXJlciAiQHJ4IF4oPzpodHxmKXRwcz86Ly8oLio/KVwvIiBcCiAgICAgICAgImNhcHR1cmUsXAogICAgICAgIGNoYWluIgogICAgICAgIFNlY1J1bGUgVFg6MSAiIUBlbmRzV2l0aCAle3JlcXVlc3RfaGVhZGVycy5ob3N0fSIgXAogICAgICAgICAgICAic2V0dmFyOid0eC5zZXNzaW9uX2ZpeGF0aW9uX3Njb3JlPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICAgICAgICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nIgoKClNlY1J1bGUgQVJHU19OQU1FUyAiQHJ4IF4oPzpqc2Vzc2lvbmlkfGFzcHNlc3Npb25pZHxhc3BcLm5ldF9zZXNzaW9uaWR8cGhwc2Vzc2lvbnxwaHBzZXNzaWR8d2VibG9naWNzZXNzaW9ufHNlc3Npb25faWR8c2Vzc2lvbi1pZHxjZmlkfGNmdG9rZW58Y2ZzaWR8anNlcnZzZXNzaW9ufGp3c2Vzc2lvbikkIiBcCiAgICAiaWQ6OTQzMTIwLFwKICAgIHBoYXNlOjIsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsdDp1cmxEZWNvZGVVbmksdDpsb3dlcmNhc2UsXAogICAgbXNnOidQb3NzaWJsZSBTZXNzaW9uIEZpeGF0aW9uIEF0dGFjazogU2Vzc2lvbklEIFBhcmFtZXRlciBOYW1lIHdpdGggTm8gUmVmZXJlcicsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1tdWx0aScsXAogICAgdGFnOidhdHRhY2stZml4YXRpb24nLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8yMjUvMjEvNTkzLzYxJyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgc2V2ZXJpdHk6J0NSSVRJQ0FMJyxcCiAgICBjaGFpbiIKICAgIFNlY1J1bGUgJlJFUVVFU1RfSEVBREVSUzpSZWZlcmVyICJAZXEgMCIgXAogICAgICAgICJzZXR2YXI6J3R4LnNlc3Npb25fZml4YXRpb25fc2NvcmU9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgICAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyIKCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMiIgImlkOjk0MzAxMyxwaGFzZToxLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTk0My1BUFBMSUNBVElPTi1BVFRBQ0stU0VTU0lPTi1GSVhBVElPTiIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAyIiAiaWQ6OTQzMDE0LHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTQzLUFQUExJQ0FUSU9OLUFUVEFDSy1TRVNTSU9OLUZJWEFUSU9OIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMiA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMiBvciBoaWdoZXIpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAzIiAiaWQ6OTQzMDE1LHBoYXNlOjEscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTQzLUFQUExJQ0FUSU9OLUFUVEFDSy1TRVNTSU9OLUZJWEFUSU9OIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5NDMwMTYscGhhc2U6MixwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05NDMtQVBQTElDQVRJT04tQVRUQUNLLVNFU1NJT04tRklYQVRJT04iCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAzID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAzIG9yIGhpZ2hlcikKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDQiICJpZDo5NDMwMTcscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05NDMtQVBQTElDQVRJT04tQVRUQUNLLVNFU1NJT04tRklYQVRJT04iClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgNCIgImlkOjk0MzAxOCxwaGFzZToyLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTk0My1BUFBMSUNBVElPTi1BVFRBQ0stU0VTU0lPTi1GSVhBVElPTiIKIwojIC09IFBhcmFub2lhIExldmVsIDQgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDQgb3IgaGlnaGVyKQojCgoKCiMKIyAtPSBQYXJhbm9pYSBMZXZlbHMgRmluaXNoZWQgPS0KIwpTZWNNYXJrZXIgIkVORC1SRVFVRVNULTk0My1BUFBMSUNBVElPTi1BVFRBQ0stU0VTU0lPTi1GSVhBVElPTiIK",
	"REQUEST-944-APPLICATION-ATTACK-JAVA.conf":             "",
	"REQUEST-949-BLOCKING-EVALUATION.conf":                 "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuNAojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojIENvcHlyaWdodCAoYykgMjAyMS0yMDIyIENvcmUgUnVsZSBTZXQgcHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoZSBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IGlzIGRpc3RyaWJ1dGVkIHVuZGVyCiMgQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgKEFTTCkgdmVyc2lvbiAyCiMgUGxlYXNlIHNlZSB0aGUgZW5jbG9zZWQgTElDRU5TRSBmaWxlIGZvciBmdWxsIGRldGFpbHMuCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMCAoZW1wdHkpID0tIChhcHBseSB1bmNvbmRpdGlvbmFsbHkpCiMKCiMgU3VtbWluZyB1cCB0aGUgYW5vbWFseSBzY29yZS4KCiMgTk9URTogdHguYW5vbWFseV9zY29yZSBzaG91bGQgbm90IGJlIHNldCBpbml0aWFsbHksIGJ1dCBtYXNraW5nIHdvdWxkIGxlYWQgdG8gZGlmZmljdWx0IGJ1Z3MuCiMgU28gd2UgYWRkIHRvIGl0LgpTZWNSdWxlIFRYOlBBUkFOT0lBX0xFVkVMICJAZ2UgMSIgXAogICAgImlkOjk0OTA2MCxcCiAgICBwaGFzZToyLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZT0rJXt0eC5hbm9tYWx5X3Njb3JlX3BsMX0nIgoKU2VjUnVsZSBUWDpQQVJBTk9JQV9MRVZFTCAiQGdlIDIiIFwKICAgICJpZDo5NDkwNjEsXAogICAgcGhhc2U6MixcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmU9KyV7dHguYW5vbWFseV9zY29yZV9wbDJ9JyIKClNlY1J1bGUgVFg6UEFSQU5PSUFfTEVWRUwgIkBnZSAzIiBcCiAgICAiaWQ6OTQ5MDYyLFwKICAgIHBoYXNlOjIsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlPSsle3R4LmFub21hbHlfc2NvcmVfcGwzfSciCgpTZWNSdWxlIFRYOlBBUkFOT0lBX0xFVkVMICJAZ2UgNCIgXAogICAgImlkOjk0OTA2MyxcCiAgICBwaGFzZToyLFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZT0rJXt0eC5hbm9tYWx5X3Njb3JlX3BsNH0nIgoKClNlY01hcmtlciAiQkVHSU4tUkVRVUVTVC1CTE9DS0lORy1FVkFMIgoKIyBUaGVzZSBydWxlcyB1c2UgdGhlIGFub21hbHkgc2NvcmUgc2V0dGluZ3Mgc3BlY2lmaWVkIGluIHRoZSAxMCBjb25maWcgZmlsZS4KIyBZb3Ugc2hvdWxkIGFsc28gc2V0IHRoZSBkZXNpcmVkIGRpc3J1cHRpdmUgYWN0aW9uIChkZW55LCByZWRpcmVjdCwgZXRjLi4uKS4KIwojIC09WyBJUCBSZXB1dGF0aW9uIENoZWNrcyBdPS0KIwojIEJsb2NrIGJhc2VkIG9uIHZhcmlhYmxlIElQLlJFUFVUX0JMT0NLX0ZMQUcgYW5kIFRYLkRPX1JFUFVUX0JMT0NLCiMKU2VjUnVsZSBJUDpSRVBVVF9CTE9DS19GTEFHICJAZXEgMSIgXAogICAgImlkOjk0OTEwMCxcCiAgICBwaGFzZToyLFwKICAgIGRlbnksXAogICAgbG9nLFwKICAgIG1zZzonUmVxdWVzdCBEZW5pZWQgYnkgSVAgUmVwdXRhdGlvbiBFbmZvcmNlbWVudCcsXAogICAgbG9nZGF0YTonUHJldmlvdXMgQmxvY2sgUmVhc29uOiAle2lwLnJlcHV0X2Jsb2NrX3JlYXNvbn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0tbXVsdGknLFwKICAgIHRhZzonYXR0YWNrLXJlcHV0YXRpb24taXAnLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy40JyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIGNoYWluIgogICAgU2VjUnVsZSBUWDpET19SRVBVVF9CTE9DSyAiQGVxIDEiIFwKICAgICAgICAic2V0dmFyOid0eC5pbmJvdW5kX2Fub21hbHlfc2NvcmU9JXt0eC5hbm9tYWx5X3Njb3JlfSciCgojCiMgLT1bIEFub21hbHkgTW9kZTogT3ZlcmFsbCBUcmFuc2FjdGlvbiBBbm9tYWx5IFNjb3JlIF09LQojClNlY1J1bGUgVFg6QU5PTUFMWV9TQ09SRSAiQGdlICV7dHguaW5ib3VuZF9hbm9tYWx5X3Njb3JlX3RocmVzaG9sZH0iIFwKICAgICJpZDo5NDkxMTAsXAogICAgcGhhc2U6MixcCiAgICBkZW55LFwKICAgIHQ6bm9uZSxcCiAgICBsb2csXAogICAgbXNnOidJbmJvdW5kIEFub21hbHkgU2NvcmUgRXhjZWVkZWQgKFRvdGFsIFNjb3JlOiAle1RYLkFOT01BTFlfU0NPUkV9KScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1tdWx0aScsXAogICAgdGFnOidhdHRhY2stZ2VuZXJpYycsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjQnLFwKICAgIHNldmVyaXR5OidDUklUSUNBTCcsXAogICAgc2V0dmFyOid0eC5pbmJvdW5kX2Fub21hbHlfc2NvcmU9JXt0eC5hbm9tYWx5X3Njb3JlfSciCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMSIgImlkOjk0OTAxMSxwaGFzZToxLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVFVRVNULTk0OS1CTE9DS0lORy1FVkFMVUFUSU9OIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDEiICJpZDo5NDkwMTIscGhhc2U6MixwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05NDktQkxPQ0tJTkctRVZBTFVBVElPTiIKIwojIC09IFBhcmFub2lhIExldmVsIDEgKGRlZmF1bHQpID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAxIG9yIGhpZ2hlcikKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5NDkwMTMscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05NDktQkxPQ0tJTkctRVZBTFVBVElPTiIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAyIiAiaWQ6OTQ5MDE0LHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTQ5LUJMT0NLSU5HLUVWQUxVQVRJT04iCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAyID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAyIG9yIGhpZ2hlcikKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5NDkwMTUscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05NDktQkxPQ0tJTkctRVZBTFVBVElPTiIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAzIiAiaWQ6OTQ5MDE2LHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTQ5LUJMT0NLSU5HLUVWQUxVQVRJT04iCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAzID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAzIG9yIGhpZ2hlcikKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDQiICJpZDo5NDkwMTcscGhhc2U6MSxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVRVUVTVC05NDktQkxPQ0tJTkctRVZBTFVBVElPTiIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTQ5MDE4LHBoYXNlOjIscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFUVVFU1QtOTQ5LUJMT0NLSU5HLUVWQUxVQVRJT04iCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCA0ID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiA0IG9yIGhpZ2hlcikKIwoKCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWxzIEZpbmlzaGVkID0tCiMKU2VjTWFya2VyICJFTkQtUkVRVUVTVC05NDktQkxPQ0tJTkctRVZBTFVBVElPTiIK",
	"RESPONSE-950-DATA-LEAKAGES.conf":                      "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuNAojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojIENvcHlyaWdodCAoYykgMjAyMS0yMDIyIENvcmUgUnVsZSBTZXQgcHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoZSBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IGlzIGRpc3RyaWJ1dGVkIHVuZGVyCiMgQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgKEFTTCkgdmVyc2lvbiAyCiMgUGxlYXNlIHNlZSB0aGUgZW5jbG9zZWQgTElDRU5TRSBmaWxlIGZvciBmdWxsIGRldGFpbHMuCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojIFRoZSBwYXJhbm9pYSBsZXZlbCBza2lwIHJ1bGVzIDk1MDAyMCwgOTUwMDIxIGFuZCA5NTAwMjIgaGF2ZSBvZGQKIyBudW1iZXJzIG5vdCBpbiBzeW5jIHdpdGggb3RoZXIgcGFyYW5vaWEgbGV2ZWwgc2tpcCBydWxlcyBpbiBvdGhlcgojIGZpbGVzLiBUaGlzIGlzIGRvbmUgdG8gYXZvaWQgcnVsZSBpZCBjb2xsaXNpb25zIHdpdGggQ1JTdjIuCiMgVGhpcyBpcyBhbHNvIHRydWUgZm9yIHJ1bGUgOTUwMTMwLgoKIwojIC09IFBhcmFub2lhIExldmVsIDAgKGVtcHR5KSA9LSAoYXBwbHkgdW5jb25kaXRpb25hbGx5KQojCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMSIgImlkOjk1MDAyMCxwaGFzZTozLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTAtREFUQS1MRUFLQUdFUyIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTUwMDIxLHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1MC1EQVRBLUxFQUtBR0VTIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMSAoZGVmYXVsdCkgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDEgb3IgaGlnaGVyKQojCgojCiMgLT1bIERpcmVjdG9yeSBMaXN0aW5nIF09LQojClNlY1J1bGUgUkVTUE9OU0VfQk9EWSAiQHJ4ICg/OjwoPzpUSVRMRT5JbmRleCBvZi4qPzxIfHRpdGxlPkluZGV4IG9mLio/PGgpMT5JbmRleCBvZnw+XFtUbyBQYXJlbnQgRGlyZWN0b3J5XF08XC9bQWFdPjxicj4pIiBcCiAgICAiaWQ6OTUwMTMwLFwKICAgIHBoYXNlOjQsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidEaXJlY3RvcnkgTGlzdGluZycsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1tdWx0aScsXAogICAgdGFnOidhdHRhY2stZGlzY2xvc3VyZScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8xMTYvNTQvMTI3JyxcCiAgICB0YWc6J1BDSS82LjUuNicsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjQnLFwKICAgIHNldmVyaXR5OidFUlJPUicsXAogICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfScsXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfSciCgojCiMgLT1bIENHSSBTb3VyY2UgQ29kZSBMZWFrYWdlIF09LQojCiMgQSBDR0kgc2NyaXB0IGJlZ2lucyBub3JtYWxseSB3aXRoICMhIGFuZCB0aGUgaW50ZXJwcmV0ZXIsCiMgZm9yIGV4YW1wbGU6CiMKIyAjIS91c3IvYmluL3BlcmwKIyAjIS91c3IvYmluL3B5dGhvbgojICMhL3Vzci9iaW4vcnVieQojCiMgSWYgdGhlIENHSSBzY3JpcHQgcHJvY2Vzc29ycyBvciBNSU1FIHR5cGUgaGFuZGxlcnMgYXJlIG1pc2NvbmZpZ3VyZWQsCiMgdGhlIHNjcmlwdCdzIHNvdXJjZSBjb2RlIGNvdWxkIGJlIGVycm9uZW91c2x5IHJldHVybmVkIHRvIHRoZSBjbGllbnQuClNlY1J1bGUgUkVTUE9OU0VfQk9EWSAiQHJ4IF4jXCFccz8vIiBcCiAgICAiaWQ6OTUwMTQwLFwKICAgIHBoYXNlOjQsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidDR0kgc291cmNlIGNvZGUgbGVha2FnZScsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1tdWx0aScsXAogICAgdGFnOidhdHRhY2stZGlzY2xvc3VyZScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8xMTYnLFwKICAgIHRhZzonUENJLzYuNS42JyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgc2V2ZXJpdHk6J0VSUk9SJyxcCiAgICBzZXR2YXI6J3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyIKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5NTAwMTMscGhhc2U6MyxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUwLURBVEEtTEVBS0FHRVMiClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMiIgImlkOjk1MDAxNCxwaGFzZTo0LHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTAtREFUQS1MRUFLQUdFUyIKIwojIC09IFBhcmFub2lhIExldmVsIDIgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDIgb3IgaGlnaGVyKQojCgojCiMgLT1bIFRoZSBhcHBsaWNhdGlvbiBpcyBub3QgYXZhaWxhYmxlIC0gNXh4IGxldmVsIHN0YXR1cyBjb2RlIF09LQojClNlY1J1bGUgUkVTUE9OU0VfU1RBVFVTICJAcnggXjVcZHsyfSQiIFwKICAgICJpZDo5NTAxMDAsXAogICAgcGhhc2U6NCxcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J1RoZSBBcHBsaWNhdGlvbiBSZXR1cm5lZCBhIDUwMC1MZXZlbCBTdGF0dXMgQ29kZScsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1tdWx0aScsXAogICAgdGFnOidhdHRhY2stZGlzY2xvc3VyZScsXAogICAgdGFnOidQQ0kvNi41LjYnLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMicsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8xNTInLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy40JyxcCiAgICBzZXZlcml0eTonRVJST1InLFwKICAgIHNldHZhcjondHgub3V0Ym91bmRfYW5vbWFseV9zY29yZV9wbDI9KyV7dHguZXJyb3JfYW5vbWFseV9zY29yZX0nLFwKICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDI9KyV7dHguZXJyb3JfYW5vbWFseV9zY29yZX0nIgoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5NTAwMTUscGhhc2U6MyxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUwLURBVEEtTEVBS0FHRVMiClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMyIgImlkOjk1MDAxNixwaGFzZTo0LHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTAtREFUQS1MRUFLQUdFUyIKIwojIC09IFBhcmFub2lhIExldmVsIDMgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDMgb3IgaGlnaGVyKQojCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgNCIgImlkOjk1MDAxNyxwaGFzZTozLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTAtREFUQS1MRUFLQUdFUyIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTUwMDIyLHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1MC1EQVRBLUxFQUtBR0VTIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgNCA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogNCBvciBoaWdoZXIpCiMKCgoKIwojIC09IFBhcmFub2lhIExldmVscyBGaW5pc2hlZCA9LQojClNlY01hcmtlciAiRU5ELVJFU1BPTlNFLTk1MC1EQVRBLUxFQUtBR0VTIgo=",
	"RESPONSE-951-DATA-LEAKAGES-SQL.conf":                  "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuNAojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojIENvcHlyaWdodCAoYykgMjAyMS0yMDIyIENvcmUgUnVsZSBTZXQgcHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoZSBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IGlzIGRpc3RyaWJ1dGVkIHVuZGVyCiMgQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgKEFTTCkgdmVyc2lvbiAyCiMgUGxlYXNlIHNlZSB0aGUgZW5jbG9zZWQgTElDRU5TRSBmaWxlIGZvciBmdWxsIGRldGFpbHMuCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMCAoZW1wdHkpID0tIChhcHBseSB1bmNvbmRpdGlvbmFsbHkpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTUxMDExLHBoYXNlOjMscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1MS1EQVRBLUxFQUtBR0VTLVNRTCIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTUxMDEyLHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1MS1EQVRBLUxFQUtBR0VTLVNRTCIKIwojIC09IFBhcmFub2lhIExldmVsIDEgKGRlZmF1bHQpID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAxIG9yIGhpZ2hlcikKIwoKIwojIC09WyBTUUwgRXJyb3IgTGVha2FnZXMgXT0tCiMKIyBSZWY6IGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vc3FsbWFwcHJvamVjdC9zcWxtYXAvbWFzdGVyL3htbC9lcnJvcnMueG1sCiMgUmVmOiBodHRwczovL2dpdGh1Yi5jb20vQXJhY2huaS9hcmFjaG5pL3RyZWUvbWFzdGVyL2NvbXBvbmVudHMvY2hlY2tzL2FjdGl2ZS9zcWxfaW5qZWN0aW9uL3JlZ2V4cHMKIwpTZWNSdWxlIFJFU1BPTlNFX0JPRFkgIkBwbUZyb21GaWxlIHNxbC1lcnJvcnMuZGF0YSIgXAogICAgImlkOjk1MTEwMCxcCiAgICBwaGFzZTo0LFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0tbXVsdGknLFwKICAgIHRhZzonYXR0YWNrLWRpc2Nsb3N1cmUnLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8xMTgvMTE2LzU0JyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgc2V0dmFyOid0eC5zcWxfZXJyb3JfbWF0Y2g9MSciCgpTZWNSdWxlIFRYOnNxbF9lcnJvcl9tYXRjaCAiQGVxIDEiIFwKICAgICJpZDo5NTExMTAsXAogICAgcGhhc2U6NCxcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J01pY3Jvc29mdCBBY2Nlc3MgU1FMIEluZm9ybWF0aW9uIExlYWthZ2UnLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4wfSBmb3VuZCB3aXRoaW4gJXtNQVRDSEVEX1ZBUl9OQU1FfTogJXtNQVRDSEVEX1ZBUn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0tbXNhY2Nlc3MnLFwKICAgIHRhZzonYXR0YWNrLWRpc2Nsb3N1cmUnLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8xMTgvMTE2LzU0JyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgc2V2ZXJpdHk6J0NSSVRJQ0FMJyxcCiAgICBjaGFpbiIKICAgIFNlY1J1bGUgUkVTUE9OU0VfQk9EWSAiQHJ4ICg/aTpKRVQgRGF0YWJhc2UgRW5naW5lfEFjY2VzcyBEYXRhYmFzZSBFbmdpbmV8XFtNaWNyb3NvZnRcXVxbT0RCQyBNaWNyb3NvZnQgQWNjZXNzIERyaXZlclxdKSIgXAogICAgICAgICJjYXB0dXJlLFwKICAgICAgICBzZXR2YXI6J3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICAgICAgc2V0dmFyOid0eC5zcWxfaW5qZWN0aW9uX3Njb3JlPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICAgICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfSciCgpTZWNSdWxlIFRYOnNxbF9lcnJvcl9tYXRjaCAiQGVxIDEiIFwKICAgICJpZDo5NTExMjAsXAogICAgcGhhc2U6NCxcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J09yYWNsZSBTUUwgSW5mb3JtYXRpb24gTGVha2FnZScsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1vcmFjbGUnLFwKICAgIHRhZzonYXR0YWNrLWRpc2Nsb3N1cmUnLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8xMTgvMTE2LzU0JyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgc2V2ZXJpdHk6J0NSSVRJQ0FMJyxcCiAgICBjaGFpbiIKICAgIFNlY1J1bGUgUkVTUE9OU0VfQk9EWSAiQHJ4ICg/aTpPUkEtWzAtOV1bMC05XVswLTldWzAtOV18amF2YVwuc3FsXC5TUUxFeGNlcHRpb258T3JhY2xlIGVycm9yfE9yYWNsZS4qRHJpdmVyfFdhcm5pbmcuKm9jaV8uKnxXYXJuaW5nLipvcmFfLiopIiBcCiAgICAgICAgImNhcHR1cmUsXAogICAgICAgIHNldHZhcjondHgub3V0Ym91bmRfYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgICAgICBzZXR2YXI6J3R4LnNxbF9pbmplY3Rpb25fc2NvcmU9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgICAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyIKClNlY1J1bGUgVFg6c3FsX2Vycm9yX21hdGNoICJAZXEgMSIgXAogICAgImlkOjk1MTEzMCxcCiAgICBwaGFzZTo0LFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLFwKICAgIG1zZzonREIyIFNRTCBJbmZvcm1hdGlvbiBMZWFrYWdlJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLWRiMicsXAogICAgdGFnOidhdHRhY2stZGlzY2xvc3VyZScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8xMTYvNTQnLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy40JyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIGNoYWluIgogICAgU2VjUnVsZSBSRVNQT05TRV9CT0RZICJAcnggKD9pOkRCMiBTUUwgZXJyb3I6fFxbSUJNXF1cW0NMSSBEcml2ZXJcXVxbREIyLzYwMDBcXXxDTEkgRHJpdmVyLipEQjJ8REIyIFNRTCBlcnJvcnxkYjJfXHcrXCgpIiBcCiAgICAgICAgImNhcHR1cmUsXAogICAgICAgIHNldHZhcjondHgub3V0Ym91bmRfYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgICAgICBzZXR2YXI6J3R4LnNxbF9pbmplY3Rpb25fc2NvcmU9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgICAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyIKClNlY1J1bGUgVFg6c3FsX2Vycm9yX21hdGNoICJAZXEgMSIgXAogICAgImlkOjk1MTE0MCxcCiAgICBwaGFzZTo0LFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLFwKICAgIG1zZzonRU1DIFNRTCBJbmZvcm1hdGlvbiBMZWFrYWdlJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLWVtYycsXAogICAgdGFnOidhdHRhY2stZGlzY2xvc3VyZScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8xMTYvNTQnLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy40JyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIGNoYWluIgogICAgU2VjUnVsZSBSRVNQT05TRV9CT0RZICJAcnggKD9pOlxbRE1fUVVFUllfRV9TWU5UQVhcXXxoYXMgb2NjdXJyZWQgaW4gdGhlIHZpY2luaXR5IG9mOikiIFwKICAgICAgICAiY2FwdHVyZSxcCiAgICAgICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgICAgIHNldHZhcjondHguc3FsX2luamVjdGlvbl9zY29yZT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nIgoKU2VjUnVsZSBUWDpzcWxfZXJyb3JfbWF0Y2ggIkBlcSAxIiBcCiAgICAiaWQ6OTUxMTUwLFwKICAgIHBoYXNlOjQsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidmaXJlYmlyZCBTUUwgSW5mb3JtYXRpb24gTGVha2FnZScsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1maXJlYmlyZCcsXAogICAgdGFnOidhdHRhY2stZGlzY2xvc3VyZScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8xMTYvNTQnLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy40JyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIGNoYWluIgogICAgU2VjUnVsZSBSRVNQT05TRV9CT0RZICJAcnggKD9pKUR5bmFtaWMgU1FMIEVycm9yIiBcCiAgICAgICAgImNhcHR1cmUsXAogICAgICAgIHNldHZhcjondHgub3V0Ym91bmRfYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgICAgICBzZXR2YXI6J3R4LnNxbF9pbmplY3Rpb25fc2NvcmU9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgICAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyIKCgpTZWNSdWxlIFRYOnNxbF9lcnJvcl9tYXRjaCAiQGVxIDEiIFwKICAgICJpZDo5NTExNjAsXAogICAgcGhhc2U6NCxcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J0Zyb250YmFzZSBTUUwgSW5mb3JtYXRpb24gTGVha2FnZScsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1mcm9udGJhc2UnLFwKICAgIHRhZzonYXR0YWNrLWRpc2Nsb3N1cmUnLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8xMTgvMTE2LzU0JyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgc2V2ZXJpdHk6J0NSSVRJQ0FMJyxcCiAgICBjaGFpbiIKICAgIFNlY1J1bGUgUkVTUE9OU0VfQk9EWSAiQHJ4ICg/aSlFeGNlcHRpb24gKD86Y29uZGl0aW9uICk/XGQrXC4gVHJhbnNhY3Rpb24gcm9sbGJhY2tcLiIgXAogICAgICAgICJjYXB0dXJlLFwKICAgICAgICBzZXR2YXI6J3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICAgICAgc2V0dmFyOid0eC5zcWxfaW5qZWN0aW9uX3Njb3JlPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICAgICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfSciCgpTZWNSdWxlIFRYOnNxbF9lcnJvcl9tYXRjaCAiQGVxIDEiIFwKICAgICJpZDo5NTExNzAsXAogICAgcGhhc2U6NCxcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J2hzcWxkYiBTUUwgSW5mb3JtYXRpb24gTGVha2FnZScsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1oc3FsZGInLFwKICAgIHRhZzonYXR0YWNrLWRpc2Nsb3N1cmUnLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8xMTgvMTE2LzU0JyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgc2V2ZXJpdHk6J0NSSVRJQ0FMJyxcCiAgICBjaGFpbiIKICAgIFNlY1J1bGUgUkVTUE9OU0VfQk9EWSAiQHJ4ICg/aSlvcmdcLmhzcWxkYlwuamRiYyIgXAogICAgICAgICJjYXB0dXJlLFwKICAgICAgICBzZXR2YXI6J3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICAgICAgc2V0dmFyOid0eC5zcWxfaW5qZWN0aW9uX3Njb3JlPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICAgICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfSciCgpTZWNSdWxlIFRYOnNxbF9lcnJvcl9tYXRjaCAiQGVxIDEiIFwKICAgICJpZDo5NTExODAsXAogICAgcGhhc2U6NCxcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J2luZm9ybWl4IFNRTCBJbmZvcm1hdGlvbiBMZWFrYWdlJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLWluZm9ybWl4JyxcCiAgICB0YWc6J2F0dGFjay1kaXNjbG9zdXJlJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzEnLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMTE4LzExNi81NCcsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjQnLFwKICAgIHNldmVyaXR5OidDUklUSUNBTCcsXAogICAgY2hhaW4iCiAgICBTZWNSdWxlIFJFU1BPTlNFX0JPRFkgIkByeCAoP2k6QW4gaWxsZWdhbCBjaGFyYWN0ZXIgaGFzIGJlZW4gZm91bmQgaW4gdGhlIHN0YXRlbWVudHxjb21cLmluZm9ybWl4XC5qZGJjfEV4Y2VwdGlvbi4qSW5mb3JtaXgpIiBcCiAgICAgICAgImNhcHR1cmUsXAogICAgICAgIHNldHZhcjondHgub3V0Ym91bmRfYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgICAgICBzZXR2YXI6J3R4LnNxbF9pbmplY3Rpb25fc2NvcmU9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgICAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyIKCgpTZWNSdWxlIFRYOnNxbF9lcnJvcl9tYXRjaCAiQGVxIDEiIFwKICAgICJpZDo5NTExOTAsXAogICAgcGhhc2U6NCxcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J2luZ3JlcyBTUUwgSW5mb3JtYXRpb24gTGVha2FnZScsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1pbmdyZXMnLFwKICAgIHRhZzonYXR0YWNrLWRpc2Nsb3N1cmUnLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8xMTgvMTE2LzU0JyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgc2V2ZXJpdHk6J0NSSVRJQ0FMJyxcCiAgICBjaGFpbiIKICAgIFNlY1J1bGUgUkVTUE9OU0VfQk9EWSAiQHJ4ICg/aTpXYXJuaW5nLippbmdyZXNffEluZ3JlcyBTUUxTVEFURXxJbmdyZXNcVy4qRHJpdmVyKSIgXAogICAgICAgICJjYXB0dXJlLFwKICAgICAgICBzZXR2YXI6J3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICAgICAgc2V0dmFyOid0eC5zcWxfaW5qZWN0aW9uX3Njb3JlPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICAgICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfSciCgoKU2VjUnVsZSBUWDpzcWxfZXJyb3JfbWF0Y2ggIkBlcSAxIiBcCiAgICAiaWQ6OTUxMjAwLFwKICAgIHBoYXNlOjQsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidpbnRlcmJhc2UgU1FMIEluZm9ybWF0aW9uIExlYWthZ2UnLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4wfSBmb3VuZCB3aXRoaW4gJXtNQVRDSEVEX1ZBUl9OQU1FfTogJXtNQVRDSEVEX1ZBUn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0taW50ZXJiYXNlJyxcCiAgICB0YWc6J2F0dGFjay1kaXNjbG9zdXJlJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzEnLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMTE4LzExNi81NCcsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjQnLFwKICAgIHNldmVyaXR5OidDUklUSUNBTCcsXAogICAgY2hhaW4iCiAgICBTZWNSdWxlIFJFU1BPTlNFX0JPRFkgIkByeCAoP2k6PGI+V2FybmluZzwvYj46IGliYXNlX3xVbmV4cGVjdGVkIGVuZCBvZiBjb21tYW5kIGluIHN0YXRlbWVudCkiIFwKICAgICAgICAiY2FwdHVyZSxcCiAgICAgICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgICAgIHNldHZhcjondHguc3FsX2luamVjdGlvbl9zY29yZT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nIgoKU2VjUnVsZSBUWDpzcWxfZXJyb3JfbWF0Y2ggIkBlcSAxIiBcCiAgICAiaWQ6OTUxMjEwLFwKICAgIHBoYXNlOjQsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidtYXhEQiBTUUwgSW5mb3JtYXRpb24gTGVha2FnZScsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1tYXhkYicsXAogICAgdGFnOidhdHRhY2stZGlzY2xvc3VyZScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8xMTYvNTQnLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy40JyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIGNoYWluIgogICAgU2VjUnVsZSBSRVNQT05TRV9CT0RZICJAcnggKD9pOlNRTCBlcnJvci4qUE9TWzAtOV0rLip8V2FybmluZy4qbWF4ZGIuKikiIFwKICAgICAgICAiY2FwdHVyZSxcCiAgICAgICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgICAgIHNldHZhcjondHguc3FsX2luamVjdGlvbl9zY29yZT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nIgoKU2VjUnVsZSBUWDpzcWxfZXJyb3JfbWF0Y2ggIkBlcSAxIiBcCiAgICAiaWQ6OTUxMjIwLFwKICAgIHBoYXNlOjQsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidtc3NxbCBTUUwgSW5mb3JtYXRpb24gTGVha2FnZScsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1tc3NxbCcsXAogICAgdGFnOidhdHRhY2stZGlzY2xvc3VyZScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8xMTYvNTQnLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy40JyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIGNoYWluIgogICAgU2VjUnVsZSBSRVNQT05TRV9CT0RZICJAcnggKD9pKSg/OlN5c3RlbVwuRGF0YVwuT2xlRGJcLk9sZURiRXhjZXB0aW9ufFxbTWljcm9zb2Z0XF1cW09EQkMgU1FMIFNlcnZlciBEcml2ZXJcXXxcW01hY3JvbWVkaWFcXVxbU1FMU2VydmVyIEpEQkMgRHJpdmVyXF18XFtTcWxFeGNlcHRpb258U3lzdGVtXC5EYXRhXC5TcWxDbGllbnRcLlNxbEV4Y2VwdGlvbnxVbmNsb3NlZCBxdW90YXRpb24gbWFyayBhZnRlciB0aGUgY2hhcmFjdGVyIHN0cmluZ3wnODAwNDBlMTQnfG1zc3FsX3F1ZXJ5XChcKXxNaWNyb3NvZnQgT0xFIERCIFByb3ZpZGVyIGZvciBPREJDIERyaXZlcnN8TWljcm9zb2Z0IE9MRSBEQiBQcm92aWRlciBmb3IgU1FMIFNlcnZlcnxJbmNvcnJlY3Qgc3ludGF4IG5lYXJ8U2ludGF4aXMgaW5jb3JyZWN0YSBjZXJjYSBkZXxTeW50YXggZXJyb3IgaW4gc3RyaW5nIGluIHF1ZXJ5IGV4cHJlc3Npb258UHJvY2VkdXJlIG9yIGZ1bmN0aW9uIC4qIGV4cGVjdHMgcGFyYW1ldGVyfFVuY2xvc2VkIHF1b3RhdGlvbiBtYXJrIGJlZm9yZSB0aGUgY2hhcmFjdGVyIHN0cmluZ3xTeW50YXggZXJyb3IgLiogaW4gcXVlcnkgZXhwcmVzc2lvbnxEYXRhIHR5cGUgbWlzbWF0Y2ggaW4gY3JpdGVyaWEgZXhwcmVzc2lvblwufEFET0RCXC5GaWVsZCBcKDB4ODAwQTBCQ0RcKXx0aGUgdXNlZCBzZWxlY3Qgc3RhdGVtZW50cyBoYXZlIGRpZmZlcmVudCBudW1iZXIgb2YgY29sdW1uc3xPTEUgREIuKlNRTCBTZXJ2ZXJ8V2FybmluZy4qbXNzcWxfLip8RHJpdmVyLipTUUxbIF8tXSpTZXJ2ZXJ8U1FMIFNlcnZlci4qRHJpdmVyfFNRTCBTZXJ2ZXIuKlswLTlhLWZBLUZdezh9fEV4Y2VwdGlvbi4qXFdTeXN0ZW1cLkRhdGFcLlNxbENsaWVudFwuKSIgXAogICAgICAgICJjYXB0dXJlLFwKICAgICAgICBzZXR2YXI6J3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICAgICAgc2V0dmFyOid0eC5zcWxfaW5qZWN0aW9uX3Njb3JlPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyxcCiAgICAgICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfSciCgpTZWNSdWxlIFRYOnNxbF9lcnJvcl9tYXRjaCAiQGVxIDEiIFwKICAgICJpZDo5NTEyMzAsXAogICAgcGhhc2U6NCxcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J215c3FsIFNRTCBJbmZvcm1hdGlvbiBMZWFrYWdlJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLW15c3FsJyxcCiAgICB0YWc6J2F0dGFjay1kaXNjbG9zdXJlJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzEnLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMTE4LzExNi81NCcsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjQnLFwKICAgIHNldmVyaXR5OidDUklUSUNBTCcsXAogICAgY2hhaW4iCiAgICBTZWNSdWxlIFJFU1BPTlNFX0JPRFkgIkByeCAoP2kpKD86c3VwcGxpZWQgYXJndW1lbnQgaXMgbm90IGEgdmFsaWQgTXlTUUx8Q29sdW1uIGNvdW50IGRvZXNuJ3QgbWF0Y2ggdmFsdWUgY291bnQgYXQgcm93fG15c3FsX2ZldGNoX2FycmF5XChcKXxvbiBNeVNRTCByZXN1bHQgaW5kZXh8WW91IGhhdmUgYW4gZXJyb3IgaW4geW91ciBTUUwgc3ludGF4O3xZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXggbmVhcnxNeVNRTCBzZXJ2ZXIgdmVyc2lvbiBmb3IgdGhlIHJpZ2h0IHN5bnRheCB0byB1c2V8XFtNeVNRTFxdXFtPREJDfENvbHVtbiBjb3VudCBkb2Vzbid0IG1hdGNofFRhYmxlICdbXiddKycgZG9lc24ndCBleGlzdHxTUUwgc3ludGF4LipNeVNRTHxXYXJuaW5nLipteXNxbF8uKnx2YWxpZCBNeVNRTCByZXN1bHR8TXlTcWxDbGllbnRcLikiIFwKICAgICAgICAiY2FwdHVyZSxcCiAgICAgICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgICAgIHNldHZhcjondHguc3FsX2luamVjdGlvbl9zY29yZT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nIgoKU2VjUnVsZSBUWDpzcWxfZXJyb3JfbWF0Y2ggIkBlcSAxIiBcCiAgICAiaWQ6OTUxMjQwLFwKICAgIHBoYXNlOjQsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidwb3N0Z3JlcyBTUUwgSW5mb3JtYXRpb24gTGVha2FnZScsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1wZ3NxbCcsXAogICAgdGFnOidhdHRhY2stZGlzY2xvc3VyZScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8xMTYvNTQnLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy40JyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIGNoYWluIgogICAgU2VjUnVsZSBSRVNQT05TRV9CT0RZICJAcnggKD9pOlBvc3RncmVTUUwgcXVlcnkgZmFpbGVkOnxwZ19xdWVyeVwoXCkgXFs6fHBnX2V4ZWNcKFwpIFxbOnxQb3N0Z3JlU1FMLipFUlJPUnxXYXJuaW5nLipwZ18uKnx2YWxpZCBQb3N0Z3JlU1FMIHJlc3VsdHxOcGdzcWxcLnxQRzo6W2EtekEtWl0qRXJyb3J8U3VwcGxpZWQgYXJndW1lbnQgaXMgbm90IGEgdmFsaWQgUG9zdGdyZVNRTCAuKj8gcmVzb3VyY2V8VW5hYmxlIHRvIGNvbm5lY3QgdG8gUG9zdGdyZVNRTCBzZXJ2ZXIpIiBcCiAgICAgICAgImNhcHR1cmUsXAogICAgICAgIHNldHZhcjondHgub3V0Ym91bmRfYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgICAgICBzZXR2YXI6J3R4LnNxbF9pbmplY3Rpb25fc2NvcmU9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nLFwKICAgICAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmNyaXRpY2FsX2Fub21hbHlfc2NvcmV9JyIKClNlY1J1bGUgVFg6c3FsX2Vycm9yX21hdGNoICJAZXEgMSIgXAogICAgImlkOjk1MTI1MCxcCiAgICBwaGFzZTo0LFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLFwKICAgIG1zZzonc3FsaXRlIFNRTCBJbmZvcm1hdGlvbiBMZWFrYWdlJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLXNxbGl0ZScsXAogICAgdGFnOidhdHRhY2stZGlzY2xvc3VyZScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8xMTYvNTQnLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy40JyxcCiAgICBzZXZlcml0eTonQ1JJVElDQUwnLFwKICAgIGNoYWluIgogICAgU2VjUnVsZSBSRVNQT05TRV9CT0RZICJAcnggKD9pKSg/Oldhcm5pbmcuKnNxbGl0ZV8uKnxXYXJuaW5nLipTUUxpdGUzOjp8U1FMaXRlL0pEQkNEcml2ZXJ8U1FMaXRlXC5FeGNlcHRpb258U3lzdGVtXC5EYXRhXC5TUUxpdGVcLlNRTGl0ZUV4Y2VwdGlvbikiIFwKICAgICAgICAiY2FwdHVyZSxcCiAgICAgICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgICAgIHNldHZhcjondHguc3FsX2luamVjdGlvbl9zY29yZT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nIgoKU2VjUnVsZSBUWDpzcWxfZXJyb3JfbWF0Y2ggIkBlcSAxIiBcCiAgICAiaWQ6OTUxMjYwLFwKICAgIHBoYXNlOjQsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidTeWJhc2UgU1FMIEluZm9ybWF0aW9uIExlYWthZ2UnLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4wfSBmb3VuZCB3aXRoaW4gJXtNQVRDSEVEX1ZBUl9OQU1FfTogJXtNQVRDSEVEX1ZBUn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0tc3liYXNlJyxcCiAgICB0YWc6J2F0dGFjay1kaXNjbG9zdXJlJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzEnLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMTE4LzExNi81NCcsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjQnLFwKICAgIHNldmVyaXR5OidDUklUSUNBTCcsXAogICAgY2hhaW4iCiAgICBTZWNSdWxlIFJFU1BPTlNFX0JPRFkgIkByeCAoP2kpKD86U3liYXNlIG1lc3NhZ2U6fFdhcm5pbmcuKnN5YmFzZS4qfFN5YmFzZS4qU2VydmVyIG1lc3NhZ2UuKikiIFwKICAgICAgICAiY2FwdHVyZSxcCiAgICAgICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgICAgIHNldHZhcjondHguc3FsX2luamVjdGlvbl9zY29yZT0rJXt0eC5jcml0aWNhbF9hbm9tYWx5X3Njb3JlfScsXAogICAgICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguY3JpdGljYWxfYW5vbWFseV9zY29yZX0nIgoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5NTEwMTMscGhhc2U6MyxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUxLURBVEEtTEVBS0FHRVMtU1FMIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5NTEwMTQscGhhc2U6NCxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUxLURBVEEtTEVBS0FHRVMtU1FMIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMiA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMiBvciBoaWdoZXIpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAzIiAiaWQ6OTUxMDE1LHBoYXNlOjMscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1MS1EQVRBLUxFQUtBR0VTLVNRTCIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAzIiAiaWQ6OTUxMDE2LHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1MS1EQVRBLUxFQUtBR0VTLVNRTCIKIwojIC09IFBhcmFub2lhIExldmVsIDMgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDMgb3IgaGlnaGVyKQojCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgNCIgImlkOjk1MTAxNyxwaGFzZTozLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTEtREFUQS1MRUFLQUdFUy1TUUwiClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgNCIgImlkOjk1MTAxOCxwaGFzZTo0LHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTEtREFUQS1MRUFLQUdFUy1TUUwiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCA0ID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiA0IG9yIGhpZ2hlcikKIwoKCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWxzIEZpbmlzaGVkID0tCiMKU2VjTWFya2VyICJFTkQtUkVTUE9OU0UtOTUxLURBVEEtTEVBS0FHRVMtU1FMIgo=",
	"RESPONSE-952-DATA-LEAKAGES-JAVA.conf":                 "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuNAojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojIENvcHlyaWdodCAoYykgMjAyMS0yMDIyIENvcmUgUnVsZSBTZXQgcHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoZSBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IGlzIGRpc3RyaWJ1dGVkIHVuZGVyCiMgQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgKEFTTCkgdmVyc2lvbiAyCiMgUGxlYXNlIHNlZSB0aGUgZW5jbG9zZWQgTElDRU5TRSBmaWxlIGZvciBmdWxsIGRldGFpbHMuCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMCAoZW1wdHkpID0tIChhcHBseSB1bmNvbmRpdGlvbmFsbHkpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTUyMDExLHBoYXNlOjMscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1Mi1EQVRBLUxFQUtBR0VTLUpBVkEiClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMSIgImlkOjk1MjAxMixwaGFzZTo0LHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTItREFUQS1MRUFLQUdFUy1KQVZBIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMSAoZGVmYXVsdCkgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDEgb3IgaGlnaGVyKQojCgojCiMgLT1bIEphdmEgU291cmNlIENvZGUgTGVha2FnZXMgXT0tCiMKU2VjUnVsZSBSRVNQT05TRV9CT0RZICJAcG1Gcm9tRmlsZSBqYXZhLWNvZGUtbGVha2FnZXMuZGF0YSIgXAogICAgImlkOjk1MjEwMCxcCiAgICBwaGFzZTo0LFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLFwKICAgIG1zZzonSmF2YSBTb3VyY2UgQ29kZSBMZWFrYWdlJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLWphdmEnLFwKICAgIHRhZzoncGxhdGZvcm0tbXVsdGknLFwKICAgIHRhZzonYXR0YWNrLWRpc2Nsb3N1cmUnLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8xMTgvMTE2JyxcCiAgICB0YWc6J1BDSS82LjUuNicsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjQnLFwKICAgIHNldmVyaXR5OidFUlJPUicsXAogICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfScsXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfSciCgojCiMgLT1bIEphdmEgRXJyb3JzIF09LQojCiMgUmVmOiBodHRwczovL2dpdGh1Yi5jb20vYW5kcmVzcmlhbmNoby93M2FmL2Jsb2IvbWFzdGVyL3czYWYvcGx1Z2lucy9ncmVwL2Vycm9yX3BhZ2VzLnB5CiMKU2VjUnVsZSBSRVNQT05TRV9CT0RZICJAcG1Gcm9tRmlsZSBqYXZhLWVycm9ycy5kYXRhIiBcCiAgICAiaWQ6OTUyMTEwLFwKICAgIHBoYXNlOjQsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidKYXZhIEVycm9ycycsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1qYXZhJyxcCiAgICB0YWc6J3BsYXRmb3JtLW11bHRpJyxcCiAgICB0YWc6J2F0dGFjay1kaXNjbG9zdXJlJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzEnLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMTE4LzExNicsXAogICAgdGFnOidQQ0kvNi41LjYnLFwKICAgIGN0bDphdWRpdExvZ1BhcnRzPStFLFwKICAgIHZlcjonT1dBU1BfQ1JTLzMuMy40JyxcCiAgICBzZXZlcml0eTonRVJST1InLFwKICAgIHNldHZhcjondHgub3V0Ym91bmRfYW5vbWFseV9zY29yZV9wbDE9KyV7dHguZXJyb3JfYW5vbWFseV9zY29yZX0nLFwKICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguZXJyb3JfYW5vbWFseV9zY29yZX0nIgoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5NTIwMTMscGhhc2U6MyxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUyLURBVEEtTEVBS0FHRVMtSkFWQSIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAyIiAiaWQ6OTUyMDE0LHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1Mi1EQVRBLUxFQUtBR0VTLUpBVkEiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAyID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAyIG9yIGhpZ2hlcikKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5NTIwMTUscGhhc2U6MyxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUyLURBVEEtTEVBS0FHRVMtSkFWQSIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAzIiAiaWQ6OTUyMDE2LHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1Mi1EQVRBLUxFQUtBR0VTLUpBVkEiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAzID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAzIG9yIGhpZ2hlcikKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDQiICJpZDo5NTIwMTcscGhhc2U6MyxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUyLURBVEEtTEVBS0FHRVMtSkFWQSIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTUyMDE4LHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1Mi1EQVRBLUxFQUtBR0VTLUpBVkEiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCA0ID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiA0IG9yIGhpZ2hlcikKIwoKCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWxzIEZpbmlzaGVkID0tCiMKU2VjTWFya2VyICJFTkQtUkVTUE9OU0UtOTUyLURBVEEtTEVBS0FHRVMtSkFWQSIK",
	"RESPONSE-953-DATA-LEAKAGES-PHP.conf":                  "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuNAojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojIENvcHlyaWdodCAoYykgMjAyMS0yMDIyIENvcmUgUnVsZSBTZXQgcHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoZSBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IGlzIGRpc3RyaWJ1dGVkIHVuZGVyCiMgQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgKEFTTCkgdmVyc2lvbiAyCiMgUGxlYXNlIHNlZSB0aGUgZW5jbG9zZWQgTElDRU5TRSBmaWxlIGZvciBmdWxsIGRldGFpbHMuCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMCAoZW1wdHkpID0tIChhcHBseSB1bmNvbmRpdGlvbmFsbHkpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTUzMDExLHBoYXNlOjMscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1My1EQVRBLUxFQUtBR0VTLVBIUCIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTUzMDEyLHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1My1EQVRBLUxFQUtBR0VTLVBIUCIKIwojIC09IFBhcmFub2lhIExldmVsIDEgKGRlZmF1bHQpID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAxIG9yIGhpZ2hlcikKIwoKIwojIC09WyBQSFAgRXJyb3IgTWVzc2FnZSBMZWFrYWdlIF09LQojClNlY1J1bGUgUkVTUE9OU0VfQk9EWSAiQHBtRnJvbUZpbGUgcGhwLWVycm9ycy5kYXRhIiBcCiAgICAiaWQ6OTUzMTAwLFwKICAgIHBoYXNlOjQsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidQSFAgSW5mb3JtYXRpb24gTGVha2FnZScsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1waHAnLFwKICAgIHRhZzoncGxhdGZvcm0tbXVsdGknLFwKICAgIHRhZzonYXR0YWNrLWRpc2Nsb3N1cmUnLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8xMTgvMTE2JyxcCiAgICB0YWc6J1BDSS82LjUuNicsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjQnLFwKICAgIHNldmVyaXR5OidFUlJPUicsXAogICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfScsXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfSciCgojCiMgLT1bIFBIUCBzb3VyY2UgY29kZSBsZWFrYWdlIF09LQojCiMgRGV0ZWN0IHNvbWUgY29tbW9uIFBIUCBrZXl3b3JkcyBpbiBvdXRwdXQuCiMKU2VjUnVsZSBSRVNQT05TRV9CT0RZICJAcnggKD86XGIoPzpmKD86dHBfKD86bmJfKT9mPyg/OmdlfHB1KXR8Z2V0KD86cz9zfGMpfHNjYW5mfHdyaXRlfG9wZW58cmVhZCl8Z3ooPzooPzplbmNvZHx3cml0KWV8Y29tcHJlc3N8b3BlbnxyZWFkKXxzKD86ZXNzaW9uX3N0YXJ0fGNhbmRpcil8cmVhZCg/Oig/Omd6KT9maWxlfGRpcil8bW92ZV91cGxvYWRlZF9maWxlfCg/OnByb2NffGJ6KW9wZW58Y2FsbF91c2VyX2Z1bmMpfFwkXyg/Oig/OnBvc3xnZSl0fHNlc3Npb24pKVxiIiBcCiAgICAiaWQ6OTUzMTEwLFwKICAgIHBoYXNlOjQsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidQSFAgc291cmNlIGNvZGUgbGVha2FnZScsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1waHAnLFwKICAgIHRhZzoncGxhdGZvcm0tbXVsdGknLFwKICAgIHRhZzonYXR0YWNrLWRpc2Nsb3N1cmUnLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8xMTgvMTE2JyxcCiAgICB0YWc6J1BDSS82LjUuNicsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjQnLFwKICAgIHNldmVyaXR5OidFUlJPUicsXAogICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfScsXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfSciCgojIERldGVjdCB0aGUgcHJlc2VuY2Ugb2YgdGhlIFBIUCBvcGVuIHRhZyAiPD8iIG9yICI8P3BocCIgaW4gb3V0cHV0LgojCiMgVG8gcHJldmVudCBmYWxzZSBwb3NpdGl2ZXMgZHVlIHRvIHRoZSBzaG9ydCAiPD8iIHNlcXVlbmNlLCBhbiBhdHRlbXB0CiMgaXMgbWFkZSB0byBzdG9wIGFsZXJ0cyBpbiBiaW5hcnkgb3V0cHV0LiBUaGlzIGlzIGRvbmUgYnkgZGV0ZWN0aW5nCiMgc29tZSBjb21tb24gYmluYXJ5IGZpbGUgZm9ybWF0IGhlYWRlcnMsIHN1Y2ggYXMgZ3ppcCAoXHgxZlx4OGJceDA4KSwKIyBwbmcgKElIRFIpLCBtcDMgKElEMyksIG1vdmllIGZvcm1hdHMgZXQgY2V0ZXJhLgojCiMgTm90IHN1cHBvcnRlZCBieSByZTIgKD8hcmUpLgojClNlY1J1bGUgUkVTUE9OU0VfQk9EWSAiQHJ4IDxcPyg/IXhtbCkiIFwKICAgICJpZDo5NTMxMjAsXAogICAgcGhhc2U6NCxcCiAgICBibG9jayxcCiAgICBjYXB0dXJlLFwKICAgIHQ6bm9uZSxcCiAgICBtc2c6J1BIUCBzb3VyY2UgY29kZSBsZWFrYWdlJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLXBocCcsXAogICAgdGFnOidwbGF0Zm9ybS1tdWx0aScsXAogICAgdGFnOidhdHRhY2stZGlzY2xvc3VyZScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8xMTYnLFwKICAgIHRhZzonUENJLzYuNS42JyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgc2V2ZXJpdHk6J0VSUk9SJyxcCiAgICBjaGFpbiIKICAgIFNlY1J1bGUgUkVTUE9OU0VfQk9EWSAiIUByeCAoPzpceDFmXHg4Ylx4MDh8XGIoPzooPzppKD86bnRlcnBsYXl8aGRyfGQzKXxtKD86b3ZpfHRoZCl8cig/OmFyIXxpZmYpfCg/OmV4fGpmKWlmfGYoPzpsdnx3cyl8dmFyZ3xjd3MpXGJ8Z2lmKXxCKD86JXBkZnxcLnJhKVxifF53T0ZbRjJdKSIgXAogICAgICAgICJjYXB0dXJlLFwKICAgICAgICB0Om5vbmUsXAogICAgICAgIHNldHZhcjondHgub3V0Ym91bmRfYW5vbWFseV9zY29yZV9wbDE9KyV7dHguZXJyb3JfYW5vbWFseV9zY29yZX0nLFwKICAgICAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyIKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5NTMwMTMscGhhc2U6MyxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUzLURBVEEtTEVBS0FHRVMtUEhQIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5NTMwMTQscGhhc2U6NCxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTUzLURBVEEtTEVBS0FHRVMtUEhQIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMiA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMiBvciBoaWdoZXIpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAzIiAiaWQ6OTUzMDE1LHBoYXNlOjMscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1My1EQVRBLUxFQUtBR0VTLVBIUCIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAzIiAiaWQ6OTUzMDE2LHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1My1EQVRBLUxFQUtBR0VTLVBIUCIKIwojIC09IFBhcmFub2lhIExldmVsIDMgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDMgb3IgaGlnaGVyKQojCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgNCIgImlkOjk1MzAxNyxwaGFzZTozLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTMtREFUQS1MRUFLQUdFUy1QSFAiClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgNCIgImlkOjk1MzAxOCxwaGFzZTo0LHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTMtREFUQS1MRUFLQUdFUy1QSFAiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCA0ID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiA0IG9yIGhpZ2hlcikKIwoKCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWxzIEZpbmlzaGVkID0tCiMKU2VjTWFya2VyICJFTkQtUkVTUE9OU0UtOTUzLURBVEEtTEVBS0FHRVMtUEhQIgo=",
	"RESPONSE-954-DATA-LEAKAGES-IIS.conf":                  "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuNAojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojIENvcHlyaWdodCAoYykgMjAyMS0yMDIyIENvcmUgUnVsZSBTZXQgcHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoZSBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IGlzIGRpc3RyaWJ1dGVkIHVuZGVyCiMgQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgKEFTTCkgdmVyc2lvbiAyCiMgUGxlYXNlIHNlZSB0aGUgZW5jbG9zZWQgTElDRU5TRSBmaWxlIGZvciBmdWxsIGRldGFpbHMuCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMCAoZW1wdHkpID0tIChhcHBseSB1bmNvbmRpdGlvbmFsbHkpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTU0MDExLHBoYXNlOjMscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1NC1EQVRBLUxFQUtBR0VTLUlJUyIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTU0MDEyLHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1NC1EQVRBLUxFQUtBR0VTLUlJUyIKIwojIC09IFBhcmFub2lhIExldmVsIDEgKGRlZmF1bHQpID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAxIG9yIGhpZ2hlcikKIwoKIyBJSVMgZGVmYXVsdCBsb2NhdGlvbgpTZWNSdWxlIFJFU1BPTlNFX0JPRFkgIkByeCBbYS16XTpcXFxcaW5ldHB1YlxiIiBcCiAgICAiaWQ6OTU0MTAwLFwKICAgIHBoYXNlOjQsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsdDpsb3dlcmNhc2UsXAogICAgbXNnOidEaXNjbG9zdXJlIG9mIElJUyBpbnN0YWxsIGxvY2F0aW9uJyxcCiAgICBsb2dkYXRhOidNYXRjaGVkIERhdGE6ICV7VFguMH0gZm91bmQgd2l0aGluICV7TUFUQ0hFRF9WQVJfTkFNRX06ICV7TUFUQ0hFRF9WQVJ9JyxcCiAgICB0YWc6J2FwcGxpY2F0aW9uLW11bHRpJyxcCiAgICB0YWc6J2xhbmd1YWdlLW11bHRpJyxcCiAgICB0YWc6J3BsYXRmb3JtLWlpcycsXAogICAgdGFnOidwbGF0Zm9ybS13aW5kb3dzJyxcCiAgICB0YWc6J2F0dGFjay1kaXNjbG9zdXJlJyxcCiAgICB0YWc6J3BhcmFub2lhLWxldmVsLzEnLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMTE4LzExNicsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjQnLFwKICAgIHNldmVyaXR5OidFUlJPUicsXAogICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfScsXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfSciCgpTZWNSdWxlIFJFU1BPTlNFX0JPRFkgIkByeCAoPzpNaWNyb3NvZnQgT0xFIERCIFByb3ZpZGVyIGZvciBTUUwgU2VydmVyKD86PFwvZm9udD4uezEsMjB9P2Vycm9yICc4MDAoPzowNDAwNXw0MGUzMSknLnsxLDQwfT9UaW1lb3V0IGV4cGlyZWR8IFwoMHg4MDA0MGUzMVwpPGJyPlRpbWVvdXQgZXhwaXJlZDxicj4pfDxoMT5pbnRlcm5hbCBzZXJ2ZXIgZXJyb3I8XC9oMT4uKj88aDI+cGFydCBvZiB0aGUgc2VydmVyIGhhcyBjcmFzaGVkIG9yIGl0IGhhcyBhIGNvbmZpZ3VyYXRpb24gZXJyb3JcLjxcL2gyPnxjYW5ub3QgY29ubmVjdCB0byB0aGUgc2VydmVyOiB0aW1lZCBvdXQpIiBcCiAgICAiaWQ6OTU0MTEwLFwKICAgIHBoYXNlOjQsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidBcHBsaWNhdGlvbiBBdmFpbGFiaWxpdHkgRXJyb3InLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4wfSBmb3VuZCB3aXRoaW4gJXtNQVRDSEVEX1ZBUl9OQU1FfTogJXtNQVRDSEVEX1ZBUn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0taWlzJyxcCiAgICB0YWc6J3BsYXRmb3JtLXdpbmRvd3MnLFwKICAgIHRhZzonYXR0YWNrLWRpc2Nsb3N1cmUnLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidQQ0kvNi41LjYnLFwKICAgIHRhZzonT1dBU1BfQ1JTJyxcCiAgICB0YWc6J2NhcGVjLzEwMDAvMTE4LzExNicsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjQnLFwKICAgIHNldmVyaXR5OidFUlJPUicsXAogICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfScsXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfSciCgojCiMgSUlTIEVycm9ycyBsZWFrYWdlCiMKU2VjUnVsZSBSRVNQT05TRV9CT0RZICJAcnggKD86XGIoPzpBKD86RE9EQlwuQ29tbWFuZFxiLnswLDEwMH0/XGIoPzpBcHBsaWNhdGlvbiB1c2VzIGEgdmFsdWUgb2YgdGhlIHdyb25nIHR5cGUgZm9yIHRoZSBjdXJyZW50IG9wZXJhdGlvblxifGVycm9yJyl8IHRyYXBwYWJsZSBlcnJvciBvY2N1cnJlZCBpbiBhbiBleHRlcm5hbCBvYmplY3RcLiBUaGUgc2NyaXB0IGNhbm5vdCBjb250aW51ZSBydW5uaW5nXGIpfE1pY3Jvc29mdCBWQlNjcmlwdCAoPzpjb21waWxhdGlvbiAoPzpcKDB4OHxlcnJvcil8cnVudGltZSAoPzpFcnJvcnxcKDB4OCkpXGJ8T2JqZWN0IHJlcXVpcmVkOiAnfGVycm9yICc4MDApfDxiPlZlcnNpb24gSW5mb3JtYXRpb246PFwvYj4oPzombmJzcDt8XHMpKD86TWljcm9zb2Z0IFwuTkVUIEZyYW1ld29ya3xBU1BcLk5FVCkgVmVyc2lvbjp8PmVycm9yICdBU1BcYnxBbiBFcnJvciBIYXMgT2NjdXJyZWR8PlN5bnRheCBlcnJvciBpbiBzdHJpbmcgaW4gcXVlcnkgZXhwcmVzc2lvbnxcL1tFZV1ycm9yW01tXWVzc2FnZVwuYXNweD9cP1tFZV1ycm9yXGIpIiBcCiAgICAiaWQ6OTU0MTIwLFwKICAgIHBoYXNlOjQsXAogICAgYmxvY2ssXAogICAgY2FwdHVyZSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidJSVMgSW5mb3JtYXRpb24gTGVha2FnZScsXAogICAgbG9nZGF0YTonTWF0Y2hlZCBEYXRhOiAle1RYLjB9IGZvdW5kIHdpdGhpbiAle01BVENIRURfVkFSX05BTUV9OiAle01BVENIRURfVkFSfScsXAogICAgdGFnOidhcHBsaWNhdGlvbi1tdWx0aScsXAogICAgdGFnOidsYW5ndWFnZS1tdWx0aScsXAogICAgdGFnOidwbGF0Zm9ybS1paXMnLFwKICAgIHRhZzoncGxhdGZvcm0td2luZG93cycsXAogICAgdGFnOidhdHRhY2stZGlzY2xvc3VyZScsXAogICAgdGFnOidwYXJhbm9pYS1sZXZlbC8xJyxcCiAgICB0YWc6J09XQVNQX0NSUycsXAogICAgdGFnOidjYXBlYy8xMDAwLzExOC8xMTYnLFwKICAgIHRhZzonUENJLzYuNS42JyxcCiAgICBjdGw6YXVkaXRMb2dQYXJ0cz0rRSxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgc2V2ZXJpdHk6J0VSUk9SJyxcCiAgICBzZXR2YXI6J3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyxcCiAgICBzZXR2YXI6J3R4LmFub21hbHlfc2NvcmVfcGwxPSsle3R4LmVycm9yX2Fub21hbHlfc2NvcmV9JyIKCgpTZWNSdWxlIFJFU1BPTlNFX1NUQVRVUyAiIUByeCBeNDA0JCIgXAogICAgImlkOjk1NDEzMCxcCiAgICBwaGFzZTo0LFwKICAgIGJsb2NrLFwKICAgIGNhcHR1cmUsXAogICAgdDpub25lLFwKICAgIG1zZzonSUlTIEluZm9ybWF0aW9uIExlYWthZ2UnLFwKICAgIGxvZ2RhdGE6J01hdGNoZWQgRGF0YTogJXtUWC4wfSBmb3VuZCB3aXRoaW4gJXtNQVRDSEVEX1ZBUl9OQU1FfTogJXtNQVRDSEVEX1ZBUn0nLFwKICAgIHRhZzonYXBwbGljYXRpb24tbXVsdGknLFwKICAgIHRhZzonbGFuZ3VhZ2UtbXVsdGknLFwKICAgIHRhZzoncGxhdGZvcm0taWlzJyxcCiAgICB0YWc6J3BsYXRmb3JtLXdpbmRvd3MnLFwKICAgIHRhZzonYXR0YWNrLWRpc2Nsb3N1cmUnLFwKICAgIHRhZzoncGFyYW5vaWEtbGV2ZWwvMScsXAogICAgdGFnOidPV0FTUF9DUlMnLFwKICAgIHRhZzonY2FwZWMvMTAwMC8xMTgvMTE2JyxcCiAgICB0YWc6J1BDSS82LjUuNicsXAogICAgY3RsOmF1ZGl0TG9nUGFydHM9K0UsXAogICAgdmVyOidPV0FTUF9DUlMvMy4zLjQnLFwKICAgIHNldmVyaXR5OidFUlJPUicsXAogICAgY2hhaW4iCiAgICBTZWNSdWxlIFJFU1BPTlNFX0JPRFkgIkByeCBcYlNlcnZlciBFcnJvciBpbi57MCw1MH0/XGJBcHBsaWNhdGlvblxiIiBcCiAgICAgICAgImNhcHR1cmUsXAogICAgICAgIHQ6bm9uZSxcCiAgICAgICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMT0rJXt0eC5lcnJvcl9hbm9tYWx5X3Njb3JlfScsXAogICAgICAgIHNldHZhcjondHguYW5vbWFseV9zY29yZV9wbDE9KyV7dHguZXJyb3JfYW5vbWFseV9zY29yZX0nIgoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5NTQwMTMscGhhc2U6MyxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTU0LURBVEEtTEVBS0FHRVMtSUlTIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5NTQwMTQscGhhc2U6NCxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTU0LURBVEEtTEVBS0FHRVMtSUlTIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgMiA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMiBvciBoaWdoZXIpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAzIiAiaWQ6OTU0MDE1LHBoYXNlOjMscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1NC1EQVRBLUxFQUtBR0VTLUlJUyIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAzIiAiaWQ6OTU0MDE2LHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1NC1EQVRBLUxFQUtBR0VTLUlJUyIKIwojIC09IFBhcmFub2lhIExldmVsIDMgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDMgb3IgaGlnaGVyKQojCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgNCIgImlkOjk1NDAxNyxwaGFzZTozLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTQtREFUQS1MRUFLQUdFUy1JSVMiClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgNCIgImlkOjk1NDAxOCxwaGFzZTo0LHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTQtREFUQS1MRUFLQUdFUy1JSVMiCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCA0ID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiA0IG9yIGhpZ2hlcikKIwoKCgojCiMgLT0gUGFyYW5vaWEgTGV2ZWxzIEZpbmlzaGVkID0tCiMKU2VjTWFya2VyICJFTkQtUkVTUE9OU0UtOTU0LURBVEEtTEVBS0FHRVMtSUlTIgo=",
	"RESPONSE-959-BLOCKING-EVALUATION.conf":                "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuNAojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojIENvcHlyaWdodCAoYykgMjAyMS0yMDIyIENvcmUgUnVsZSBTZXQgcHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoZSBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IGlzIGRpc3RyaWJ1dGVkIHVuZGVyCiMgQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgKEFTTCkgdmVyc2lvbiAyCiMgUGxlYXNlIHNlZSB0aGUgZW5jbG9zZWQgTElDRU5TRSBmaWxlIGZvciBmdWxsIGRldGFpbHMuCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojIFlvdSBzaG91bGQgc2V0IHRoZSBzY29yZSB0byB0aGUgcHJvcGVyIHRocmVzaG9sZCB5b3Ugd291bGQgcHJlZmVyLiBJZiBrZXB0IGF0ICJAZ3QgMCIKIyBpdCB3aWxsIHdvcmsgc2ltaWxhcmx5IHRvIHByZXZpb3VzIE1vZCBDUlMgcnVsZXMgYW5kIHdpbGwgY3JlYXRlIGFuIGV2ZW50IGluIHRoZSBlcnJvcl9sb2cKIyBmaWxlIGlmIHRoZXJlIGFyZSBhbnkgcnVsZXMgdGhhdCBtYXRjaC4gIElmIHlvdSB3b3VsZCBsaWtlIHRvIGxlc3NlbiB0aGUgbnVtYmVyIG9mIGV2ZW50cwojIGdlbmVyYXRlZCBpbiB0aGUgZXJyb3JfbG9nIGZpbGUsIHlvdSBzaG91bGQgaW5jcmVhc2UgdGhlIGFub21hbHkgc2NvcmUgdGhyZXNob2xkIHRvCiMgc29tZXRoaW5nIGxpa2UgIkBndCAyMCIuICBUaGlzIHdvdWxkIG9ubHkgZ2VuZXJhdGUgYW4gZXZlbnQgaW4gdGhlIGVycm9yX2xvZyBmaWxlIGlmCiMgdGhlcmUgYXJlIG11bHRpcGxlIGxvd2VyIHNldmVyaXR5IHJ1bGUgbWF0Y2hlcyBvciBpZiBhbnkgMSBoaWdoZXIgc2V2ZXJpdHkgaXRlbSBtYXRjaGVzLgojCiMgWW91IHNob3VsZCBhbHNvIHNldCB0aGUgZGVzaXJlZCBkaXNydXB0aXZlIGFjdGlvbiAoZGVueSwgcmVkaXJlY3QsIGV0Yy4uLikuCiMKCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAwIChlbXB0eSkgPS0gKGFwcGx5IHVuY29uZGl0aW9uYWxseSkKIwoKIyBTdW1taW5nIHVwIHRoZSBhbm9tYWx5IHNjb3JlLgoKIyBOT1RFOiB0eC5hbm9tYWx5X3Njb3JlIHNob3VsZCBub3QgYmUgc2V0IGluaXRpYWxseSwgYnV0IG1hc2tpbmcgd291bGQgbGVhZCB0byBkaWZmaWN1bHQgYnVncy4KIyBTbyB3ZSBhZGQgdG8gaXQuClNlY1J1bGUgVFg6UEFSQU5PSUFfTEVWRUwgIkBnZSAxIiBcCiAgICAiaWQ6OTU5MDYwLFwKICAgIHBoYXNlOjQsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlPSsle3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGwxfSciCgpTZWNSdWxlIFRYOlBBUkFOT0lBX0xFVkVMICJAZ2UgMiIgXAogICAgImlkOjk1OTA2MSxcCiAgICBwaGFzZTo0LFwKICAgIHBhc3MsXAogICAgdDpub25lLFwKICAgIG5vbG9nLFwKICAgIHNldHZhcjondHgub3V0Ym91bmRfYW5vbWFseV9zY29yZT0rJXt0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlX3BsMn0nIgoKU2VjUnVsZSBUWDpQQVJBTk9JQV9MRVZFTCAiQGdlIDMiIFwKICAgICJpZDo5NTkwNjIsXAogICAgcGhhc2U6NCxcCiAgICBwYXNzLFwKICAgIHQ6bm9uZSxcCiAgICBub2xvZyxcCiAgICBzZXR2YXI6J3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmU9KyV7dHgub3V0Ym91bmRfYW5vbWFseV9zY29yZV9wbDN9JyIKClNlY1J1bGUgVFg6UEFSQU5PSUFfTEVWRUwgIkBnZSA0IiBcCiAgICAiaWQ6OTU5MDYzLFwKICAgIHBoYXNlOjQsXAogICAgcGFzcyxcCiAgICB0Om5vbmUsXAogICAgbm9sb2csXAogICAgc2V0dmFyOid0eC5vdXRib3VuZF9hbm9tYWx5X3Njb3JlPSsle3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmVfcGw0fSciCgoKIyBBbGVydCBhbmQgQmxvY2sgb24gSGlnaCBBbm9tYWx5IFNjb3JlcyAtIHRoaXMgd291bGQgYmxvY2sgb3V0Ym91bmQgZGF0YSBsZWFrYWdlcwojCiMgTm90ZTogVGhpcyBydWxlIGFsc28gc2V0cyB0aGUgJ3R4LmFub21hbHlfc2NvcmUnIHZhcmlhYmxlLgojIFRoYXQgdmFyaWFibGUgbmFtZSB3YXMgZm9ybWVybHkgdXNlZCBpbiBDUlMsIGJ1dCBub3QgYW55IGxvbmdlci4KIyBIb3dldmVyLCBKd2FsbCBBdWRpdENvbnNvbGUgZGVwZW5kcyBvbiB0aGlzIGV4YWN0IHZhcmlhYmxlIG5hbWUuCiMgV2l0aG91dCBzZXR0aW5nIGl0LCB0aGUgJ091dGJvdW5kIFNjb3JlJyBpbiB0aGUgQXVkaXRDb25zb2xlIEdVSSB3b3VsZCBhbHdheXMgYmUgMC4KClNlY1J1bGUgVFg6T1VUQk9VTkRfQU5PTUFMWV9TQ09SRSAiQGdlICV7dHgub3V0Ym91bmRfYW5vbWFseV9zY29yZV90aHJlc2hvbGR9IiBcCiAgICAiaWQ6OTU5MTAwLFwKICAgIHBoYXNlOjQsXAogICAgZGVueSxcCiAgICB0Om5vbmUsXAogICAgbXNnOidPdXRib3VuZCBBbm9tYWx5IFNjb3JlIEV4Y2VlZGVkIChUb3RhbCBTY29yZTogJXtUWC5PVVRCT1VORF9BTk9NQUxZX1NDT1JFfSknLFwKICAgIHRhZzonYW5vbWFseS1ldmFsdWF0aW9uJyxcCiAgICB2ZXI6J09XQVNQX0NSUy8zLjMuNCcsXAogICAgc2V0dmFyOid0eC5hbm9tYWx5X3Njb3JlPSsle3R4Lm91dGJvdW5kX2Fub21hbHlfc2NvcmV9JyIKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAxIiAiaWQ6OTU5MDExLHBoYXNlOjMscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1OS1CTE9DS0lORy1FVkFMVUFUSU9OIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDEiICJpZDo5NTkwMTIscGhhc2U6NCxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTU5LUJMT0NLSU5HLUVWQUxVQVRJT04iCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAxIChkZWZhdWx0KSA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogMSBvciBoaWdoZXIpCiMKCgoKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCAyIiAiaWQ6OTU5MDEzLHBoYXNlOjMscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1OS1CTE9DS0lORy1FVkFMVUFUSU9OIgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDIiICJpZDo5NTkwMTQscGhhc2U6NCxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTU5LUJMT0NLSU5HLUVWQUxVQVRJT04iCiMKIyAtPSBQYXJhbm9pYSBMZXZlbCAyID0tIChhcHBseSBvbmx5IHdoZW4gdHguZXhlY3V0aW5nX3BhcmFub2lhX2xldmVsIGlzIHN1ZmZpY2llbnRseSBoaWdoOiAyIG9yIGhpZ2hlcikKIwoKCgpTZWNSdWxlIFRYOkVYRUNVVElOR19QQVJBTk9JQV9MRVZFTCAiQGx0IDMiICJpZDo5NTkwMTUscGhhc2U6MyxwYXNzLG5vbG9nLHNraXBBZnRlcjpFTkQtUkVTUE9OU0UtOTU5LUJMT0NLSU5HLUVWQUxVQVRJT04iClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgMyIgImlkOjk1OTAxNixwaGFzZTo0LHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTktQkxPQ0tJTkctRVZBTFVBVElPTiIKIwojIC09IFBhcmFub2lhIExldmVsIDMgPS0gKGFwcGx5IG9ubHkgd2hlbiB0eC5leGVjdXRpbmdfcGFyYW5vaWFfbGV2ZWwgaXMgc3VmZmljaWVudGx5IGhpZ2g6IDMgb3IgaGlnaGVyKQojCgoKClNlY1J1bGUgVFg6RVhFQ1VUSU5HX1BBUkFOT0lBX0xFVkVMICJAbHQgNCIgImlkOjk1OTAxNyxwaGFzZTozLHBhc3Msbm9sb2csc2tpcEFmdGVyOkVORC1SRVNQT05TRS05NTktQkxPQ0tJTkctRVZBTFVBVElPTiIKU2VjUnVsZSBUWDpFWEVDVVRJTkdfUEFSQU5PSUFfTEVWRUwgIkBsdCA0IiAiaWQ6OTU5MDE4LHBoYXNlOjQscGFzcyxub2xvZyxza2lwQWZ0ZXI6RU5ELVJFU1BPTlNFLTk1OS1CTE9DS0lORy1FVkFMVUFUSU9OIgojCiMgLT0gUGFyYW5vaWEgTGV2ZWwgNCA9LSAoYXBwbHkgb25seSB3aGVuIHR4LmV4ZWN1dGluZ19wYXJhbm9pYV9sZXZlbCBpcyBzdWZmaWNpZW50bHkgaGlnaDogNCBvciBoaWdoZXIpCiMKCgoKIwojIC09IFBhcmFub2lhIExldmVscyBGaW5pc2hlZCA9LQojClNlY01hcmtlciAiRU5ELVJFU1BPTlNFLTk1OS1CTE9DS0lORy1FVkFMVUFUSU9OIgo=",
	"RESPONSE-980-CORRELATION.conf":                        "",
	"RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example":  "IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IHZlci4zLjMuNAojIENvcHlyaWdodCAoYykgMjAwNi0yMDIwIFRydXN0d2F2ZSBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojIENvcHlyaWdodCAoYykgMjAyMS0yMDIyIENvcmUgUnVsZSBTZXQgcHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoZSBPV0FTUCBNb2RTZWN1cml0eSBDb3JlIFJ1bGUgU2V0IGlzIGRpc3RyaWJ1dGVkIHVuZGVyCiMgQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgKEFTTCkgdmVyc2lvbiAyCiMgUGxlYXNlIHNlZSB0aGUgZW5jbG9zZWQgTElDRU5TRSBmaWxlIGZvciBmdWxsIGRldGFpbHMuCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojCiMgVGhlIHB1cnBvc2Ugb2YgdGhpcyBmaWxlIGlzIHRvIGhvbGQgTE9DQUwgZXhjZXB0aW9ucyBmb3IgeW91ciBzaXRlLgojIFRoZSB0eXBlcyBvZiBydWxlcyB0aGF0IHdvdWxkIGdvIGludG8gdGhpcyBmaWxlIGFyZSBvbmUgd2hlcmUgeW91IHdhbnQKIyB0byB1bmNvbmRpdGlvbmFsbHkgZGlzYWJsZSBydWxlcyBvciBtb2RpZnkgdGhlaXIgYWN0aW9ucyBkdXJpbmcgc3RhcnR1cC4KIwojIFBsZWFzZSBzZWUgdGhlIGZpbGUgUkVRVUVTVC05MDAtRVhDTFVTSU9OLVJVTEVTLUJFRk9SRS1DUlMuY29uZi5leGFtcGxlCiMgZm9yIGEgZGVzY3JpcHRpb24gb2YgdGhlIHJ1bGUgZXhjbHVzaW9ucyBtZWNoYW5pc20gYW5kIHRoZSBjb3JyZWN0CiMgdXNlIG9mIHRoaXMgZmlsZS4KIwoKIwojIEV4YW1wbGUgRXhjbHVzaW9uIFJ1bGU6IFRvIHVuY29uZGl0aW9uYWxseSBkaXNhYmxlIGEgcnVsZSBJRAojCiMgTW9kU2VjdXJpdHkgUnVsZSBFeGNsdXNpb246IDk0MjEwMCBTUUwgSW5qZWN0aW9uIERldGVjdGVkIHZpYSBsaWJpbmplY3Rpb24KIyBTZWNSdWxlUmVtb3ZlQnlJZCA5NDIxMDAKCiMgRXhhbXBsZSBFeGNsdXNpb24gUnVsZTogUmVtb3ZlIGEgZ3JvdXAgb2YgcnVsZXMKIwojIE1vZFNlY3VyaXR5IFJ1bGUgRXhjbHVzaW9uOiBEaXNhYmxlIFBIUCBpbmplY3Rpb24gcnVsZXMKIyBTZWNSdWxlUmVtb3ZlQnlUYWcgImF0dGFjay1pbmplY3Rpb24tcGhwIgoKIwojIEV4YW1wbGUgRXhjbHVzaW9uIFJ1bGU6IFRvIHVuY29uZGl0aW9uYWxseSByZW1vdmUgcGFyYW1ldGVyICJmb28iIGZyb20KIyAgICAgICAgICAgICAgICAgICAgICAgICBpbnNwZWN0aW9uIGZvciBTUUxpIHJ1bGVzCiMKIyBNb2RTZWN1cml0eSBSdWxlIEV4Y2x1c2lvbjogZGlzYWJsZSBzcWxpIHJ1bGVzIGZvciBwYXJhbWV0ZXIgZm9vLgojIFNlY1J1bGVVcGRhdGVUYXJnZXRCeVRhZyAiYXR0YWNrLXNxbGkiICIhQVJHUzpmb28iCgoKIyAtLSBbWyBDaGFuZ2luZyB0aGUgRGlzcnVwdGl2ZSBBY3Rpb24gZm9yIEFub21hbHkgTW9kZSBdXSAtLQojCiMgSW4gQW5vbWFseSBNb2RlIChkZWZhdWx0IGluIENSUzMpLCB0aGUgcnVsZXMgaW4gUkVRVUVTVC05NDktQkxPQ0tJTkctRVZBTFVBVElPTi5jb25mCiMgYW5kIFJFU1BPTlNFLTk1OS1CTE9DS0lORy1FVkFMVUFUSU9OLmNvbmYgY2hlY2sgdGhlIGFjY3VtdWxhdGVkIGF0dGFjayBzY29yZXMKIyBhZ2FpbnN0IHlvdXIgcG9saWN5LiBUbyBhcHBseSBhIGRpc3J1cHRpdmUgYWN0aW9uLCB0aGV5IG92ZXJ3cml0ZSB0aGUgZGVmYXVsdAojIGFjdGlvbnMgc3BlY2lmaWVkIGluIFNlY0RlZmF1bHRBY3Rpb24gKHNldHVwLmNvbmYpIHdpdGggYSAnZGVueScgYWN0aW9uLgojIFRoaXMgJ2RlbnknIGlzIGJ5IGRlZmF1bHQgcGFpcmVkIHdpdGggYSAnc3RhdHVzOjQwMycgYWN0aW9uLgojCiMgSW4gb3JkZXIgdG8gY2hhbmdlIHRoZSBkaXNydXB0aXZlIGFjdGlvbiBmcm9tICdkZW55JyB0byBzb21ldGhpbmcgZWxzZSwKIyB5b3UgbXVzdCB1c2UgU2VjUnVsZVVwZGF0ZUFjdGlvbkJ5SUQgZGlyZWN0aXZlcyBBRlRFUiB0aGUgQ1JTIHJ1bGVzCiMgYXJlIGNvbmZpZ3VyZWQsIGZvciBpbnN0YW5jZSBpbiB0aGUgUkVTUE9OU0UtOTk5LUVYQ0xVU0lPTi1SVUxFUy1BRlRFUi1DUlMuY29uZiBmaWxlLgojCiMgVGhlc2UgYWN0aW9ucyBvbmx5IGFwcGx5IHdoZW4gdXNpbmcgQW5vbWFseSBNb2RlLgojCiMgRGVmYXVsdCBhY3Rpb246IGJsb2NrIHdpdGggZXJyb3IgNDAzCiMgKE5vIGNvbmZpZ3VyYXRpb24gbmVlZGVkIGluIHRoaXMgZmlsZSBpZiB5b3Ugd2FudCB0aGUgZGVmYXVsdCBiZWhhdmlvci4pCiMKCiMgRXhhbXBsZTogcmVkaXJlY3QgYmFjayB0byB0aGUgaG9tZXBhZ2Ugb24gYmxvY2tpbmcKIwojIFNlY1J1bGVVcGRhdGVBY3Rpb25CeUlkIDk0OTExMCAidDpub25lLHJlZGlyZWN0OidodHRwOi8vJXtyZXF1ZXN0X2hlYWRlcnMuaG9zdH0vJyIKIyBTZWNSdWxlVXBkYXRlQWN0aW9uQnlJZCA5NTkxMDAgInQ6bm9uZSxyZWRpcmVjdDonaHR0cDovLyV7cmVxdWVzdF9oZWFkZXJzLmhvc3R9LyciCgojIEV4YW1wbGU6IHJlZGlyZWN0IHRvIGFub3RoZXIgVVJMIG9uIGJsb2NraW5nCiMKIyBTZWNSdWxlVXBkYXRlQWN0aW9uQnlJZCA5NDkxMTAgInQ6bm9uZSxyZWRpcmVjdDonaHR0cDovL2V4YW1wbGUuY29tL3JlcG9ydF9wcm9ibGVtJyIKIyBTZWNSdWxlVXBkYXRlQWN0aW9uQnlJZCA5NTkxMDAgInQ6bm9uZSxyZWRpcmVjdDonaHR0cDovL2V4YW1wbGUuY29tL3JlcG9ydF9wcm9ibGVtJyIKCiMgRXhhbXBsZTogc2VuZCBhbiBlcnJvciA0MDQKIwojIFNlY1J1bGVVcGRhdGVBY3Rpb25CeUlkIDk0OTExMCAidDpub25lLGRlbnksc3RhdHVzOjQwNCIKIyBTZWNSdWxlVXBkYXRlQWN0aW9uQnlJZCA5NTkxMDAgInQ6bm9uZSxkZW55LHN0YXR1czo0MDQiCgojIEV4YW1wbGU6IGRyb3AgdGhlIGNvbm5lY3Rpb24gKGJlc3QgZm9yIERvUyBhdHRhY2tzKQojCiMgU2VjUnVsZVVwZGF0ZUFjdGlvbkJ5SWQgOTQ5MTEwICJ0Om5vbmUsZHJvcCIKIyBTZWNSdWxlVXBkYXRlQWN0aW9uQnlJZCA5NTkxMDAgInQ6bm9uZSxkcm9wIgo=",
	"crawlers-user-agents.data":                            "IyBTZWFyY2ggZW5naW5lIGNyYXdsZXJzIGFuZCBvdGhlciBib3RzCiMgY3Jhd2xlcgojIGh0dHBzOi8vODBsZWdzLmNvbS8KODBsZWdzCiMgc2l0ZSByaXBwZXIKIyBodHRwOi8vd3d3LnNvZnRieXRlbGFicy5jb20vZW4vQmxhY2tXaWRvdy8KYmxhY2sgd2lkb3cKYmxhY2t3aWRvdwojIGNyYXdsZXIKIyAyMDA2CnByb3dlYndhbGtlcgojIGdlbmVyaWMgY3Jhd2xlcgpweW1pbGxzLXNwaWRlci8KIyBTRU8KIyBodHRwczovL2FocmVmcy5jb20vcm9ib3QKQWhyZWZzQm90CiMgcGVvcGxlIGRhdGFiYXNlCiMgaHR0cHM6Ly9waXBsLmNvbS9ib3QvClBpcGxCb3QKIyBhZHZlcnRpc2luZyB0YXJnZXRpbmcKIyBodHRwczovL3d3dy5ncmFwZXNob3QuY29tL2NyYXdsZXIvCkdyYXBlc2hvdENyYXdsZXIvMi4wCmdyYXBlRlgKIyBTRU8KIyBodHRwOi8vd3d3LnNlYXJjaG1ldHJpY3MuY29tL3NlYXJjaG1ldHJpY3Nib3QvClNlYXJjaG1ldHJpY3NCb3QKIyBTRU8KIyBodHRwczovL3d3dy5zZW1ydXNoLmNvbS9ib3QvClNlbXJ1c2hCb3QKIyBTRU8KIyBodHRwczovL21vei5jb20vaGVscC9ndWlkZXMvbW96LXByb2NlZHVyZXMvd2hhdC1pcy1yb2dlcmJvdApyb2dlcmJvdAojIFNFTwojIGh0dHA6Ly93d3cubWFqZXN0aWMxMi5jby51ay9wcm9qZWN0cy9kc2VhcmNoL21qMTJib3QucGhwCk1KMTJib3QKIyBuZXdzIHNlcnZpY2UKT3dsaW4gYm90CiMgbWlzYmVoYXZpbmcgc3BpZGVyCkxpbmdld291ZC01NTAtU3B5ZGVyCiMgaHR0cHM6Ly93d3cud2FwcGFseXplci5jb20vCldhcHBhbHl6ZXIK",
	"crs-setup.conf":                                       "",
	"iis-errors.data":                                      "PGgyIHN0eWxlPSJmb250OjhwdC8xMXB0IHZlcmRhbmE7IGNvbG9yOjAwMDAwMCI+SFRUUCA0MDMuNiAtIEZvcmJpZGRlbjogSVAgYWRkcmVzcyByZWplY3RlZDxicj4KPFRJVExFPjUwMCBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3I8L1RJVExFPgpNaWNyb3NvZnQgVkJTY3JpcHQgcnVudGltZSAoMHg4CmVycm9yICc4MDAKQXBwbGljYXRpb24gdXNlcyBhIHZhbHVlIG9mIHRoZSB3cm9uZyB0eXBlIGZvciB0aGUgY3VycmVudCBvcGVyYXRpb24KTWljcm9zb2Z0IFZCU2NyaXB0IGNvbXBpbGF0aW9uICgweDgKTWljcm9zb2Z0IFZCU2NyaXB0IGNvbXBpbGF0aW9uIGVycm9yCk1pY3Jvc29mdCAuTkVUIEZyYW1ld29yayBWZXJzaW9uOgpBIHRyYXBwYWJsZSBlcnJvciBvY2N1cnJlZCBpbiBhbiBleHRlcm5hbCBvYmplY3QuIFRoZSBzY3JpcHQgY2Fubm90IGNvbnRpbnVlIHJ1bm5pbmcKTWljcm9zb2Z0IFZCU2NyaXB0IHJ1bnRpbWUgRXJyb3IKPlN5bnRheCBlcnJvciBpbiBzdHJpbmcgaW4gcXVlcnkgZXhwcmVzc2lvbgpBRE9EQi5Db21tYW5kCk9iamVjdCByZXF1aXJlZDogJwo=",
	"java-classes.data":                                    "Y29tLm9wZW5zeW1waG9ueS54d29yazIKY29tLnN1bi5vcmcuYXBhY2hlCmphdmEuaW8uQnVmZmVyZWRJbnB1dFN0cmVhbQpqYXZhLmlvLkJ1ZmZlcmVkUmVhZGVyCmphdmEuaW8uQnl0ZUFycmF5SW5wdXRTdHJlYW0KamF2YS5pby5CeXRlQXJyYXlPdXRwdXRTdHJlYW0KamF2YS5pby5DaGFyQXJyYXlSZWFkZXIKamF2YS5pby5EYXRhSW5wdXRTdHJlYW0KamF2YS5pby5GaWxlCmphdmEuaW8uRmlsZU91dHB1dFN0cmVhbQpqYXZhLmlvLkZpbGVQZXJtaXNzaW9uCmphdmEuaW8uRmlsZVdyaXRlcgpqYXZhLmlvLkZpbHRlcklucHV0U3RyZWFtCmphdmEuaW8uRmlsdGVyT3V0cHV0U3RyZWFtCmphdmEuaW8uRmlsdGVyUmVhZGVyCmphdmEuaW8uSW5wdXRTdHJlYW0KamF2YS5pby5JbnB1dFN0cmVhbVJlYWRlcgpqYXZhLmlvLkxpbmVOdW1iZXJSZWFkZXIKamF2YS5pby5PYmplY3RPdXRwdXRTdHJlYW0KamF2YS5pby5PdXRwdXRTdHJlYW0KamF2YS5pby5QaXBlZE91dHB1dFN0cmVhbQpqYXZhLmlvLlBpcGVkUmVhZGVyCmphdmEuaW8uUHJpbnRTdHJlYW0KamF2YS5pby5QdXNoYmFja0lucHV0U3RyZWFtCmphdmEuaW8uUmVhZGVyCmphdmEuaW8uU3RyaW5nUmVhZGVyCmphdmEubGFuZy5DbGFzcwpqYXZhLmxhbmcuSW50ZWdlcgpqYXZhLmxhbmcuTnVtYmVyCmphdmEubGFuZy5PYmplY3QKamF2YS5sYW5nLlByb2Nlc3MKamF2YS5sYW5nLlByb2Nlc3NCdWlsZGVyCmphdmEubGFuZy5yZWZsZWN0CmphdmEubGFuZy5SdW50aW1lCmphdmEubGFuZy5TdHJpbmcKamF2YS5sYW5nLlN0cmluZ0J1aWxkZXIKamF2YS5sYW5nLlN5c3RlbQpqYXZheC5zY3JpcHQuU2NyaXB0RW5naW5lTWFuYWdlcgpvcmcuYXBhY2hlLmNvbW1vbnMKb3JnLmFwYWNoZS5zdHJ1dHMKb3JnLmFwYWNoZS5zdHJ1dHMyCm9yZy5vbWcuQ09SQkEKamF2YS5iZWFucy5YTUxEZWNvZGUK",
	"java-code-leakages.data":                              "PGpzcDoKamF2YXguc2VydmxldAouYWRkaGVhZGVyCi5jcmVhdGV0ZXh0ZmlsZQouZ2V0ZmlsZQoubG9hZGZyb21maWxlCnJlc3BvbnNlLmJpbmFyeXdyaXRlCnJlc3BvbnNlLndyaXRlCnNjcmlwdGluZy5maWxlc3lzdGVtb2JqZWN0CnNlcnZlci5jcmVhdGVvYmplY3QKc2VydmVyLmV4ZWN1dGUKc2VydmVyLmh0bWxlbmNvZGUKc2VydmVyLm1hcHBhdGgKc2VydmVyLnVybGVuY29kZQp2YnNjcmlwdC5lbmNvZGUKd3NjcmlwdC5uZXR3b3JrCndzY3JpcHQuc2hlbGwK",
	"java-errors.data":                                     "W2phdmEubGFuZy4KY2xhc3MgamF2YS5sYW5nLgpqYXZhLmxhbmcuTnVsbFBvaW50ZXJFeGNlcHRpb24KamF2YS5ybWkuU2VydmVyRXhjZXB0aW9uCmF0IGphdmEubGFuZy4Kb25jbGljaz0idG9nZ2xlKCdmdWxsIGV4Y2VwdGlvbiBjaGFpbiBzdGFja3RyYWNlJykiCmF0IG9yZy5hcGFjaGUuY2F0YWxpbmEKYXQgb3JnLmFwYWNoZS5jb3lvdGUuCmF0IG9yZy5hcGFjaGUudG9tY2F0LgphdCBvcmcuYXBhY2hlLmphc3Blci4K",
	"lfi-os-files.data":                                    "",
	"modsecdefault.conf":                                   "CiMgLS0gUnVsZSBlbmdpbmUgaW5pdGlhbGl6YXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKIyBFbmFibGUgTW9kU2VjdXJpdHksIGF0dGFjaGluZyBpdCB0byBldmVyeSB0cmFuc2FjdGlvbi4gVXNlIGRldGVjdGlvbgojIG9ubHkgdG8gc3RhcnQgd2l0aCwgYmVjYXVzZSB0aGF0IG1pbmltaXNlcyB0aGUgY2hhbmNlcyBvZiBwb3N0LWluc3RhbGxhdGlvbgojIGRpc3J1cHRpb24uCiMKI1NlY1J1bGVFbmdpbmUgRGV0ZWN0aW9uT25seQpTZWNSdWxlRW5naW5lIE9uCgoKIyAtLSBSZXF1ZXN0IGJvZHkgaGFuZGxpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojIEFsbG93IE1vZFNlY3VyaXR5IHRvIGFjY2VzcyByZXF1ZXN0IGJvZGllcy4gSWYgeW91IGRvbid0LCBNb2RTZWN1cml0eQojIHdvbid0IGJlIGFibGUgdG8gc2VlIGFueSBQT1NUIHBhcmFtZXRlcnMsIHdoaWNoIG9wZW5zIGEgbGFyZ2Ugc2VjdXJpdHkKIyBob2xlIGZvciBhdHRhY2tlcnMgdG8gZXhwbG9pdC4KIwpTZWNSZXF1ZXN0Qm9keUFjY2VzcyBPbgoKCiMgRW5hYmxlIFhNTCByZXF1ZXN0IGJvZHkgcGFyc2VyLgojIEluaXRpYXRlIFhNTCBQcm9jZXNzb3IgaW4gY2FzZSBvZiB4bWwgY29udGVudC10eXBlCiMKU2VjUnVsZSBSRVFVRVNUX0hFQURFUlM6Q29udGVudC1UeXBlICJ0ZXh0L3htbCIgXAogICAgICJpZDonMjAwMDAwJyxwaGFzZToxLHQ6bm9uZSx0Omxvd2VyY2FzZSxwYXNzLG5vbG9nLGN0bDpyZXF1ZXN0Qm9keVByb2Nlc3Nvcj1YTUwiCgojIEVuYWJsZSBKU09OIHJlcXVlc3QgYm9keSBwYXJzZXIuCiMgSW5pdGlhdGUgSlNPTiBQcm9jZXNzb3IgaW4gY2FzZSBvZiBKU09OIGNvbnRlbnQtdHlwZTsgY2hhbmdlIGFjY29yZGluZ2x5CiMgaWYgeW91ciBhcHBsaWNhdGlvbiBkb2VzIG5vdCB1c2UgJ2FwcGxpY2F0aW9uL2pzb24nCiMKU2VjUnVsZSBSRVFVRVNUX0hFQURFUlM6Q29udGVudC1UeXBlICJhcHBsaWNhdGlvbi9qc29uIiBcCiAgICAgImlkOicyMDAwMDEnLHBoYXNlOjEsdDpub25lLHQ6bG93ZXJjYXNlLHBhc3Msbm9sb2csY3RsOnJlcXVlc3RCb2R5UHJvY2Vzc29yPUpTT04iCgojIE1heGltdW0gcmVxdWVzdCBib2R5IHNpemUgd2Ugd2lsbCBhY2NlcHQgZm9yIGJ1ZmZlcmluZy4gSWYgeW91IHN1cHBvcnQKIyBmaWxlIHVwbG9hZHMgdGhlbiB0aGUgdmFsdWUgZ2l2ZW4gb24gdGhlIGZpcnN0IGxpbmUgaGFzIHRvIGJlIGFzIGxhcmdlCiMgYXMgdGhlIGxhcmdlc3QgZmlsZSB5b3UgYXJlIHdpbGxpbmcgdG8gYWNjZXB0LiBUaGUgc2Vjb25kIHZhbHVlIHJlZmVycwojIHRvIHRoZSBzaXplIG9mIGRhdGEsIHdpdGggZmlsZXMgZXhjbHVkZWQuIFlvdSB3YW50IHRvIGtlZXAgdGhhdCB2YWx1ZSBhcwojIGxvdyBhcyBwcmFjdGljYWwuCiMKCiMgU3RvcmUgdXAgdG8gMTI4IEtCIG9mIHJlcXVlc3QgYm9keSBkYXRhIGluIG1lbW9yeS4gV2hlbiB0aGUgbXVsdGlwYXJ0CiMgcGFyc2VyIHJlYWNoZXJzIHRoaXMgbGltaXQsIGl0IHdpbGwgc3RhcnQgdXNpbmcgeW91ciBoYXJkIGRpc2sgZm9yCiMgc3RvcmFnZS4gVGhhdCBpcyBzbG93LCBidXQgdW5hdm9pZGFibGUuCiMKCiMgV2hhdCBkbyBkbyBpZiB0aGUgcmVxdWVzdCBib2R5IHNpemUgaXMgYWJvdmUgb3VyIGNvbmZpZ3VyZWQgbGltaXQuCiMgS2VlcCBpbiBtaW5kIHRoYXQgdGhpcyBzZXR0aW5nIHdpbGwgYXV0b21hdGljYWxseSBiZSBzZXQgdG8gUHJvY2Vzc1BhcnRpYWwKIyB3aGVuIFNlY1J1bGVFbmdpbmUgaXMgc2V0IHRvIERldGVjdGlvbk9ubHkgbW9kZSBpbiBvcmRlciB0byBtaW5pbWl6ZQojIGRpc3J1cHRpb25zIHdoZW4gaW5pdGlhbGx5IGRlcGxveWluZyBNb2RTZWN1cml0eS4KIwpTZWNSZXF1ZXN0Qm9keUxpbWl0QWN0aW9uIFJlamVjdAoKIyBWZXJpZnkgdGhhdCB3ZSd2ZSBjb3JyZWN0bHkgcHJvY2Vzc2VkIHRoZSByZXF1ZXN0IGJvZHkuCiMgQXMgYSBydWxlIG9mIHRodW1iLCB3aGVuIGZhaWxpbmcgdG8gcHJvY2VzcyBhIHJlcXVlc3QgYm9keQojIHlvdSBzaG91bGQgcmVqZWN0IHRoZSByZXF1ZXN0ICh3aGVuIGRlcGxveWVkIGluIGJsb2NraW5nIG1vZGUpCiMgb3IgbG9nIGEgaGlnaC1zZXZlcml0eSBhbGVydCAod2hlbiBkZXBsb3llZCBpbiBkZXRlY3Rpb24tb25seSBtb2RlKS4KIwpTZWNSdWxlIFJFUUJPRFlfRVJST1IgIiFAZXEgMCIgXAoiaWQ6JzIwMDAwMicsIHBoYXNlOjIsdDpub25lLGxvZyxkZW55LHN0YXR1czo0MDAsbXNnOidGYWlsZWQgdG8gcGFyc2UgcmVxdWVzdCBib2R5LicsbG9nZGF0YTonJXtyZXFib2R5X2Vycm9yX21zZ30nLHNldmVyaXR5OjIiCgojIEJ5IGRlZmF1bHQgYmUgc3RyaWN0IHdpdGggd2hhdCB3ZSBhY2NlcHQgaW4gdGhlIG11bHRpcGFydC9mb3JtLWRhdGEKIyByZXF1ZXN0IGJvZHkuIElmIHRoZSBydWxlIGJlbG93IHByb3ZlcyB0byBiZSB0b28gc3RyaWN0IGZvciB5b3VyCiMgZW52aXJvbm1lbnQgY29uc2lkZXIgY2hhbmdpbmcgaXQgdG8gZGV0ZWN0aW9uLW9ubHkuIFlvdSBhcmUgZW5jb3VyYWdlZAojIF9ub3RfIHRvIHJlbW92ZSBpdCBhbHRvZ2V0aGVyLgojClNlY1J1bGUgTVVMVElQQVJUX1NUUklDVF9FUlJPUiAiIUBlcSAwIiBcCiJpZDonMjAwMDAzJyxwaGFzZToyLHQ6bm9uZSxsb2csZGVueSxzdGF0dXM6NDAwLCBcCm1zZzonTXVsdGlwYXJ0IHJlcXVlc3QgYm9keSBmYWlsZWQgc3RyaWN0IHZhbGlkYXRpb246IFwKUEUgJXtSRVFCT0RZX1BST0NFU1NPUl9FUlJPUn0sIFwKQlEgJXtNVUxUSVBBUlRfQk9VTkRBUllfUVVPVEVEfSwgXApCVyAle01VTFRJUEFSVF9CT1VOREFSWV9XSElURVNQQUNFfSwgXApEQiAle01VTFRJUEFSVF9EQVRBX0JFRk9SRX0sIFwKREEgJXtNVUxUSVBBUlRfREFUQV9BRlRFUn0sIFwKSEYgJXtNVUxUSVBBUlRfSEVBREVSX0ZPTERJTkd9LCBcCkxGICV7TVVMVElQQVJUX0xGX0xJTkV9LCBcClNNICV7TVVMVElQQVJUX01JU1NJTkdfU0VNSUNPTE9OfSwgXApJUSAle01VTFRJUEFSVF9JTlZBTElEX1FVT1RJTkd9LCBcCklQICV7TVVMVElQQVJUX0lOVkFMSURfUEFSVH0sIFwKSUggJXtNVUxUSVBBUlRfSU5WQUxJRF9IRUFERVJfRk9MRElOR30sIFwKRkwgJXtNVUxUSVBBUlRfRklMRV9MSU1JVF9FWENFRURFRH0nIgoKIyBEaWQgd2Ugc2VlIGFueXRoaW5nIHRoYXQgbWlnaHQgYmUgYSBib3VuZGFyeT8KIwpTZWNSdWxlIE1VTFRJUEFSVF9VTk1BVENIRURfQk9VTkRBUlkgIiFAZXEgMCIgXAoiaWQ6JzIwMDAwNCcscGhhc2U6Mix0Om5vbmUsbG9nLGRlbnksbXNnOidNdWx0aXBhcnQgcGFyc2VyIGRldGVjdGVkIGEgcG9zc2libGUgdW5tYXRjaGVkIGJvdW5kYXJ5LiciCgojIFBDUkUgVHVuaW5nCiMgV2Ugd2FudCB0byBhdm9pZCBhIHBvdGVudGlhbCBSZWdFeCBEb1MgY29uZGl0aW9uCiMKU2VjUGNyZU1hdGNoTGltaXQgMTAwMApTZWNQY3JlTWF0Y2hMaW1pdFJlY3Vyc2lvbiAxMDAwCgojIFNvbWUgaW50ZXJuYWwgZXJyb3JzIHdpbGwgc2V0IGZsYWdzIGluIFRYIGFuZCB3ZSB3aWxsIG5lZWQgdG8gbG9vayBmb3IgdGhlc2UuCiMgQWxsIG9mIHRoZXNlIGFyZSBwcmVmaXhlZCB3aXRoICJNU0NfIi4gIFRoZSBmb2xsb3dpbmcgZmxhZ3MgY3VycmVudGx5IGV4aXN0OgojCiMgTVNDX1BDUkVfTElNSVRTX0VYQ0VFREVEOiBQQ1JFIG1hdGNoIGxpbWl0cyB3ZXJlIGV4Y2VlZGVkLgojClNlY1J1bGUgVFg6L15NU0NfLyAiIUBzdHJlcSAwIiBcCiAgICAgICAgImlkOicyMDAwMDUnLHBoYXNlOjIsdDpub25lLGRlbnksbXNnOidNb2RTZWN1cml0eSBpbnRlcm5hbCBlcnJvciBmbGFnZ2VkOiAle01BVENIRURfVkFSX05BTUV9JyIKCgojIC0tIFJlc3BvbnNlIGJvZHkgaGFuZGxpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMgQWxsb3cgTW9kU2VjdXJpdHkgdG8gYWNjZXNzIHJlc3BvbnNlIGJvZGllcy4gCiMgWW91IHNob3VsZCBoYXZlIHRoaXMgZGlyZWN0aXZlIGVuYWJsZWQgaW4gb3JkZXIgdG8gaWRlbnRpZnkgZXJyb3JzCiMgYW5kIGRhdGEgbGVha2FnZSBpc3N1ZXMuCiMgCiMgRG8ga2VlcCBpbiBtaW5kIHRoYXQgZW5hYmxpbmcgdGhpcyBkaXJlY3RpdmUgZG9lcyBpbmNyZWFzZXMgYm90aAojIG1lbW9yeSBjb25zdW1wdGlvbiBhbmQgcmVzcG9uc2UgbGF0ZW5jeS4KIwpTZWNSZXNwb25zZUJvZHlBY2Nlc3MgT24KCiMgV2hpY2ggcmVzcG9uc2UgTUlNRSB0eXBlcyBkbyB5b3Ugd2FudCB0byBpbnNwZWN0PyBZb3Ugc2hvdWxkIGFkanVzdCB0aGUKIyBjb25maWd1cmF0aW9uIGJlbG93IHRvIGNhdGNoIGRvY3VtZW50cyBidXQgYXZvaWQgc3RhdGljIGZpbGVzCiMgKGUuZy4sIGltYWdlcyBhbmQgYXJjaGl2ZXMpLgojClNlY1Jlc3BvbnNlQm9keU1pbWVUeXBlIHRleHQvcGxhaW4gdGV4dC9odG1sIHRleHQveG1sCgojIEJ1ZmZlciByZXNwb25zZSBib2RpZXMgb2YgdXAgdG8gNTEyIEtCIGluIGxlbmd0aC4KU2VjUmVzcG9uc2VCb2R5TGltaXQgNTI0Mjg4CgojIFdoYXQgaGFwcGVucyB3aGVuIHdlIGVuY291bnRlciBhIHJlc3BvbnNlIGJvZHkgbGFyZ2VyIHRoYW4gdGhlIGNvbmZpZ3VyZWQKIyBsaW1pdD8gQnkgZGVmYXVsdCwgd2UgcHJvY2VzcyB3aGF0IHdlIGhhdmUgYW5kIGxldCB0aGUgcmVzdCB0aHJvdWdoLgojIFRoYXQncyBzb21ld2hhdCBsZXNzIHNlY3VyZSwgYnV0IGRvZXMgbm90IGJyZWFrIGFueSBsZWdpdGltYXRlIHBhZ2VzLgojClNlY1Jlc3BvbnNlQm9keUxpbWl0QWN0aW9uIFByb2Nlc3NQYXJ0aWFsCgoKIyAtLSBGaWxlc3lzdGVtIGNvbmZpZ3VyYXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojIFRoZSBsb2NhdGlvbiB3aGVyZSBNb2RTZWN1cml0eSBzdG9yZXMgdGVtcG9yYXJ5IGZpbGVzIChmb3IgZXhhbXBsZSwgd2hlbgojIGl0IG5lZWRzIHRvIGhhbmRsZSBhIGZpbGUgdXBsb2FkIHRoYXQgaXMgbGFyZ2VyIHRoYW4gdGhlIGNvbmZpZ3VyZWQgbGltaXQpLgojIAojIFRoaXMgZGVmYXVsdCBzZXR0aW5nIGlzIGNob3NlbiBkdWUgdG8gYWxsIHN5c3RlbXMgaGF2ZSAvdG1wIGF2YWlsYWJsZSBob3dldmVyLCAKIyB0aGlzIGlzIGxlc3MgdGhhbiBpZGVhbC4gSXQgaXMgcmVjb21tZW5kZWQgdGhhdCB5b3Ugc3BlY2lmeSBhIGxvY2F0aW9uIHRoYXQncyBwcml2YXRlLgojClNlY1RtcERpciAvdG1wLwoKIyBUaGUgbG9jYXRpb24gd2hlcmUgTW9kU2VjdXJpdHkgd2lsbCBrZWVwIGl0cyBwZXJzaXN0ZW50IGRhdGEuICBUaGlzIGRlZmF1bHQgc2V0dGluZyAKIyBpcyBjaG9zZW4gZHVlIHRvIGFsbCBzeXN0ZW1zIGhhdmUgL3RtcCBhdmFpbGFibGUgaG93ZXZlciwgaXQKIyB0b28gc2hvdWxkIGJlIHVwZGF0ZWQgdG8gYSBwbGFjZSB0aGF0IG90aGVyIHVzZXJzIGNhbid0IGFjY2Vzcy4KIwpTZWNEYXRhRGlyIC90bXAvCgoKIyAtLSBGaWxlIHVwbG9hZHMgaGFuZGxpbmcgY29uZmlndXJhdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgojIFRoZSBsb2NhdGlvbiB3aGVyZSBNb2RTZWN1cml0eSBzdG9yZXMgaW50ZXJjZXB0ZWQgdXBsb2FkZWQgZmlsZXMuIFRoaXMKIyBsb2NhdGlvbiBtdXN0IGJlIHByaXZhdGUgdG8gTW9kU2VjdXJpdHkuIFlvdSBkb24ndCB3YW50IG90aGVyIHVzZXJzIG9uCiMgdGhlIHNlcnZlciB0byBhY2Nlc3MgdGhlIGZpbGVzLCBkbyB5b3U/CiMKI1NlY1VwbG9hZERpciAvb3B0L21vZHNlY3VyaXR5L3Zhci91cGxvYWQvCgojIEJ5IGRlZmF1bHQsIG9ubHkga2VlcCB0aGUgZmlsZXMgdGhhdCB3ZXJlIGRldGVybWluZWQgdG8gYmUgdW51c3VhbAojIGluIHNvbWUgd2F5IChieSBhbiBleHRlcm5hbCBpbnNwZWN0aW9uIHNjcmlwdCkuIEZvciB0aGlzIHRvIHdvcmsgeW91CiMgd2lsbCBhbHNvIG5lZWQgYXQgbGVhc3Qgb25lIGZpbGUgaW5zcGVjdGlvbiBydWxlLgojCiNTZWNVcGxvYWRLZWVwRmlsZXMgUmVsZXZhbnRPbmx5CgojIFVwbG9hZGVkIGZpbGVzIGFyZSBieSBkZWZhdWx0IGNyZWF0ZWQgd2l0aCBwZXJtaXNzaW9ucyB0aGF0IGRvIG5vdCBhbGxvdwojIGFueSBvdGhlciB1c2VyIHRvIGFjY2VzcyB0aGVtLiBZb3UgbWF5IG5lZWQgdG8gcmVsYXggdGhhdCBpZiB5b3Ugd2FudCB0bwojIGludGVyZmFjZSBNb2RTZWN1cml0eSB0byBhbiBleHRlcm5hbCBwcm9ncmFtIChlLmcuLCBhbiBhbnRpLXZpcnVzKS4KIwojU2VjVXBsb2FkRmlsZU1vZGUgMDYwMAoKCiMgLS0gRGVidWcgbG9nIGNvbmZpZ3VyYXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKIyBUaGUgZGVmYXVsdCBkZWJ1ZyBsb2cgY29uZmlndXJhdGlvbiBpcyB0byBkdXBsaWNhdGUgdGhlIGVycm9yLCB3YXJuaW5nCiMgYW5kIG5vdGljZSBtZXNzYWdlcyBmcm9tIHRoZSBlcnJvciBsb2cuCiMKI1NlY0RlYnVnTG9nIC9vcHQvbW9kc2VjdXJpdHkvdmFyL2xvZy9kZWJ1Zy5sb2cKI1NlY0RlYnVnTG9nTGV2ZWwgMwpTZWNEZWJ1Z0xvZyAvdG1wL21vZHNlY3VyaXR5X2RlYnVnLmxvZwpTZWNEZWJ1Z0xvZ0xldmVsIDkKCgojIC0tIEF1ZGl0IGxvZyBjb25maWd1cmF0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiMgTG9nIHRoZSB0cmFuc2FjdGlvbnMgdGhhdCBhcmUgbWFya2VkIGJ5IGEgcnVsZSwgYXMgd2VsbCBhcyB0aG9zZSB0aGF0CiMgdHJpZ2dlciBhIHNlcnZlciBlcnJvciAoZGV0ZXJtaW5lZCBieSBhIDV4eCBvciA0eHgsIGV4Y2x1ZGluZyA0MDQsICAKIyBsZXZlbCByZXNwb25zZSBzdGF0dXMgY29kZXMpLgojClNlY0F1ZGl0RW5naW5lIFJlbGV2YW50T25seQpTZWNBdWRpdExvZ1JlbGV2YW50U3RhdHVzICJeKD86NXw0KD8hMDQpKSIKCiMgTG9nIGV2ZXJ5dGhpbmcgd2Uga25vdyBhYm91dCBhIHRyYW5zYWN0aW9uLgpTZWNBdWRpdExvZ1BhcnRzIEFCSUpERUZIWgoKIyBVc2UgYSBzaW5nbGUgZmlsZSBmb3IgbG9nZ2luZy4gVGhpcyBpcyBtdWNoIGVhc2llciB0byBsb29rIGF0LCBidXQKIyBhc3N1bWVzIHRoYXQgeW91IHdpbGwgdXNlIHRoZSBhdWRpdCBsb2cgb25seSBvY2Fzc2lvbmFsbHkuCiMKU2VjQXVkaXRMb2dUeXBlIFNlcmlhbApTZWNBdWRpdExvZyAvdG1wL21vZHNlY19hdWRpdC5sb2cKCiMgU3BlY2lmeSB0aGUgcGF0aCBmb3IgY29uY3VycmVudCBhdWRpdCBsb2dnaW5nLgojU2VjQXVkaXRMb2dTdG9yYWdlRGlyIC9vcHQvbW9kc2VjdXJpdHkvdmFyL2F1ZGl0LwoKCiMgLS0gTWlzY2VsbGFuZW91cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKIyBVc2UgdGhlIG1vc3QgY29tbW9ubHkgdXNlZCBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQgcGFyYW1ldGVyCiMgc2VwYXJhdG9yLiBUaGVyZSdzIHByb2JhYmx5IG9ubHkgb25lIGFwcGxpY2F0aW9uIHNvbWV3aGVyZSB0aGF0IHVzZXMKIyBzb21ldGhpbmcgZWxzZSBzbyBkb24ndCBleHBlY3QgdG8gY2hhbmdlIHRoaXMgdmFsdWUuCiMKU2VjQXJndW1lbnRTZXBhcmF0b3IgJgoKIyBTZXR0bGUgb24gdmVyc2lvbiAwICh6ZXJvKSBjb29raWVzLCBhcyB0aGF0IGlzIHdoYXQgbW9zdCBhcHBsaWNhdGlvbnMKIyB1c2UuIFVzaW5nIGFuIGluY29ycmVjdCBjb29raWUgdmVyc2lvbiBtYXkgb3BlbiB5b3VyIGluc3RhbGxhdGlvbiB0bwojIGV2YXNpb24gYXR0YWNrcyAoYWdhaW5zdCB0aGUgcnVsZXMgdGhhdCBleGFtaW5lIG5hbWVkIGNvb2tpZXMpLgojClNlY0Nvb2tpZUZvcm1hdCAwCgojIFNwZWNpZnkgeW91ciBVbmljb2RlIENvZGUgUG9pbnQuCiMgVGhpcyBtYXBwaW5nIGlzIHVzZWQgYnkgdGhlIHQ6dXJsRGVjb2RlVW5pIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uCiMgdG8gcHJvcGVybHkgbWFwIGVuY29kZWQgZGF0YSB0byB5b3VyIGxhbmd1YWdlLiBQcm9wZXJseSBzZXR0aW5nCiMgdGhlc2UgZGlyZWN0aXZlcyBoZWxwcyB0byByZWR1Y2UgZmFsc2UgcG9zaXRpdmVzIGFuZCBuZWdhdGl2ZXMuCiMKI1NlY1VuaWNvZGVNYXBGaWxlIHVuaWNvZGUubWFwcGluZyAyMDEyNwoKIyBJbXByb3ZlIHRoZSBxdWFsaXR5IG9mIE1vZFNlY3VyaXR5IGJ5IHNoYXJpbmcgaW5mb3JtYXRpb24gYWJvdXQgeW91cgojIGN1cnJlbnQgTW9kU2VjdXJpdHkgdmVyc2lvbiBhbmQgZGVwZW5kZW5jaWVzIHZlcnNpb25zLgojIFRoZSBmb2xsb3dpbmcgaW5mb3JtYXRpb24gd2lsbCBiZSBzaGFyZWQ6IE1vZFNlY3VyaXR5IHZlcnNpb24sCiMgV2ViIFNlcnZlciB2ZXJzaW9uLCBBUFIgdmVyc2lvbiwgUENSRSB2ZXJzaW9uLCBMdWEgdmVyc2lvbiwgTGlieG1sMgojIHZlcnNpb24sIEFub255bW91cyB1bmlxdWUgaWQgZm9yIGhvc3QuClNlY1N0YXR1c0VuZ2luZSBPbgoK",
	"php-config-directives.data":                           "YWxsb3dfY2FsbF90aW1lX3Bhc3NfcmVmZXJlbmNlCmFsbG93X3VybF9mb3BlbgphbGxvd191cmxfaW5jbHVkZQphbHdheXNfcG9wdWxhdGVfcmF3X3Bvc3RfZGF0YQphcmdfc2VwYXJhdG9yLmlucHV0CmFyZ19zZXBhcmF0b3Iub3V0cHV0CmFzcF90YWdzCmFzc2VydC5hY3RpdmUKYXNzZXJ0LmJhaWwKYXNzZXJ0LmNhbGxiYWNrCmFzc2VydC5xdWlldF9ldmFsCmFzc2VydC53YXJuaW5nCmF1dG9fYXBwZW5kX2ZpbGUKYXV0b19kZXRlY3RfbGluZV9lbmRpbmdzCmF1dG9fZ2xvYmFsc19qaXQKYXV0b19wcmVwZW5kX2ZpbGUKYmNtYXRoLnNjYWxlCmJpcmRzdGVwLm1heF9saW5rcwpicm93c2NhcApjZ2kuZml4X3BhdGhpbmZvCmNnaS5mb3JjZV9yZWRpcmVjdApjZ2kubnBoCmNnaS5yZWRpcmVjdF9zdGF0dXNfZW52CmNnaS5yZmMyNjE2X2hlYWRlcnMKY29tLmFsbG93X2Rjb20KY29tLmF1dG9yZWdpc3Rlcl9jYXNlc2Vuc2l0aXZlCmNvbS5hdXRvcmVnaXN0ZXJfdHlwZWxpYgpjb20uYXV0b3JlZ2lzdGVyX3ZlcmJvc2UKY29tLmNvZGVfcGFnZQpjb20udHlwZWxpYl9maWxlCmRhdGUuZGVmYXVsdF9sYXRpdHVkZQpkYXRlLmRlZmF1bHRfbG9uZ2l0dWRlCmRhdGUuc3VucmlzZV96ZW5pdGgKZGF0ZS5zdW5zZXRfemVuaXRoCmRhdGUudGltZXpvbmUKZGJhLmRlZmF1bHRfaGFuZGxlcgpkZWZhdWx0X2NoYXJzZXQKZGVmYXVsdF9taW1ldHlwZQpkZWZhdWx0X3NvY2tldF90aW1lb3V0CmRlZmluZV9zeXNsb2dfdmFyaWFibGVzCmRpc2FibGVfY2xhc3NlcwpkaXNhYmxlX2Z1bmN0aW9ucwpkaXNwbGF5X2Vycm9ycwpkaXNwbGF5X3N0YXJ0dXBfZXJyb3JzCmRvY19yb290CmRvY3JlZl9leHQKZG9jcmVmX3Jvb3QKZW5hYmxlX2RsCmVycm9yX2FwcGVuZF9zdHJpbmcKZXJyb3JfbG9nCmVycm9yX3ByZXBlbmRfc3RyaW5nCmVycm9yX3JlcG9ydGluZwpleGlmLmRlY29kZV9qaXNfaW50ZWwKZXhpZi5kZWNvZGVfamlzX21vdG9yb2xhCmV4aWYuZGVjb2RlX3VuaWNvZGVfaW50ZWwKZXhpZi5kZWNvZGVfdW5pY29kZV9tb3Rvcm9sYQpleGlmLmVuY29kZV9qaXMKZXhpZi5lbmNvZGVfdW5pY29kZQpleHBvc2VfcGhwCmV4dGVuc2lvbl9kaXIKZmFzdGNnaS5pbXBlcnNvbmF0ZQpmYXN0Y2dpLmxvZ2dpbmcKZmlsZV91cGxvYWRzCmZpbHRlci5kZWZhdWx0CmZpbHRlci5kZWZhdWx0X2ZsYWdzCmdkLmpwZWdfaWdub3JlX3dhcm5pbmcKaGlnaGxpZ2h0LmJnCmhpZ2hsaWdodC5jb21tZW50CmhpZ2hsaWdodC5kZWZhdWx0CmhpZ2hsaWdodC5odG1sCmhpZ2hsaWdodC5rZXl3b3JkCmhpZ2hsaWdodC5zdHJpbmcKaHRtbF9lcnJvcnMKaWJhc2UuYWxsb3dfcGVyc2lzdGVudAppYmFzZS5kYXRlZm9ybWF0CmliYXNlLmRlZmF1bHRfY2hhcnNldAppYmFzZS5kZWZhdWx0X2RiCmliYXNlLmRlZmF1bHRfcGFzc3dvcmQKaWJhc2UuZGVmYXVsdF91c2VyCmliYXNlLm1heF9saW5rcwppYmFzZS5tYXhfcGVyc2lzdGVudAppYmFzZS50aW1lZm9ybWF0CmliYXNlLnRpbWVzdGFtcGZvcm1hdAppY29udi5pbnB1dF9lbmNvZGluZwppY29udi5pbnRlcm5hbF9lbmNvZGluZwppY29udi5vdXRwdXRfZW5jb2RpbmcKaWdub3JlX3JlcGVhdGVkX2Vycm9ycwppZ25vcmVfcmVwZWF0ZWRfc291cmNlCmlnbm9yZV91c2VyX2Fib3J0CmltcGxpY2l0X2ZsdXNoCmluY2x1ZGVfcGF0aAppbnRsLmRlZmF1bHRfbG9jYWxlCmludGwuZXJyb3JfbGV2ZWwKbGRhcC5tYXhfbGlua3MKbG9nX2Vycm9ycwpsb2dfZXJyb3JzX21heF9sZW4KbWFnaWNfcXVvdGVzX2dwYwptYWdpY19xdW90ZXNfcnVudGltZQptYWdpY19xdW90ZXNfc3liYXNlCm1haWwuYWRkX3hfaGVhZGVyCm1haWwuZm9yY2VfZXh0cmFfcGFyYW1ldGVycwptYWlsLmxvZwptYXhfZXhlY3V0aW9uX3RpbWUKbWF4X2ZpbGVfdXBsb2FkcwptYXhfaW5wdXRfbmVzdGluZ19sZXZlbAptYXhfaW5wdXRfdGltZQptYnN0cmluZy5kZXRlY3Rfb3JkZXIKbWJzdHJpbmcuZW5jb2RpbmdfdHJhbnNsYXRpb24KbWJzdHJpbmcuZnVuY19vdmVybG9hZAptYnN0cmluZy5odHRwX2lucHV0Cm1ic3RyaW5nLmh0dHBfb3V0cHV0Cm1ic3RyaW5nLmh0dHBfb3V0cHV0X2NvbnZfbWltZXR5cGUKbWJzdHJpbmcuaW50ZXJuYWxfZW5jb2RpbmcKbWJzdHJpbmcubGFuZ3VhZ2UKbWJzdHJpbmcuc2NyaXB0X2VuY29kaW5nCm1ic3RyaW5nLnN0cmljdF9kZXRlY3Rpb24KbWJzdHJpbmcuc3Vic3RpdHV0ZV9jaGFyYWN0ZXIKbWNyeXB0LmFsZ29yaXRobXNfZGlyCm1jcnlwdC5tb2Rlc19kaXIKbWVtb3J5X2xpbWl0Cm1zc3FsLmFsbG93X3BlcnNpc3RlbnQKbXNzcWwuYmF0Y2hzaXplCm1zc3FsLmNoYXJzZXQKbXNzcWwuY29tcGF0YWJpbGl0eV9tb2RlCm1zc3FsLmNvbm5lY3RfdGltZW91dAptc3NxbC5kYXRldGltZWNvbnZlcnQKbXNzcWwubWF4X2xpbmtzCm1zc3FsLm1heF9wZXJzaXN0ZW50Cm1zc3FsLm1heF9wcm9jcwptc3NxbC5taW5fZXJyb3Jfc2V2ZXJpdHkKbXNzcWwubWluX21lc3NhZ2Vfc2V2ZXJpdHkKbXNzcWwuc2VjdXJlX2Nvbm5lY3Rpb24KbXNzcWwudGV4dGxpbWl0Cm1zc3FsLnRleHRzaXplCm1zc3FsLnRpbWVvdXQKbXlzcWwuYWxsb3dfbG9jYWxfaW5maWxlCm15c3FsLmFsbG93X3BlcnNpc3RlbnQKbXlzcWwuY2FjaGVfc2l6ZQpteXNxbC5jb25uZWN0X3RpbWVvdXQKbXlzcWwuZGVmYXVsdF9ob3N0Cm15c3FsLmRlZmF1bHRfcGFzc3dvcmQKbXlzcWwuZGVmYXVsdF9wb3J0Cm15c3FsLmRlZmF1bHRfc29ja2V0Cm15c3FsLmRlZmF1bHRfdXNlcgpteXNxbC5tYXhfbGlua3MKbXlzcWwubWF4X3BlcnNpc3RlbnQKbXlzcWwudHJhY2VfbW9kZQpteXNxbGkuYWxsb3dfbG9jYWxfaW5maWxlCm15c3FsaS5hbGxvd19wZXJzaXN0ZW50Cm15c3FsaS5jYWNoZV9zaXplCm15c3FsaS5kZWZhdWx0X2hvc3QKbXlzcWxpLmRlZmF1bHRfcG9ydApteXNxbGkuZGVmYXVsdF9wdwpteXNxbGkuZGVmYXVsdF9zb2NrZXQKbXlzcWxpLmRlZmF1bHRfdXNlcgpteXNxbGkubWF4X2xpbmtzCm15c3FsaS5tYXhfcGVyc2lzdGVudApteXNxbGkucmVjb25uZWN0Cm15c3FsbmQuY29sbGVjdF9tZW1vcnlfc3RhdGlzdGljcwpteXNxbG5kLmNvbGxlY3Rfc3RhdGlzdGljcwpteXNxbG5kLm5ldF9jbWRfYnVmZmVyX3NpemUKbXlzcWxuZC5uZXRfcmVhZF9idWZmZXJfc2l6ZQpvY2k4LmNvbm5lY3Rpb25fY2xhc3MKb2NpOC5kZWZhdWx0X3ByZWZldGNoCm9jaTguZXZlbnRzCm9jaTgubWF4X3BlcnNpc3RlbnQKb2NpOC5vbGRfb2NpX2Nsb3NlX3NlbWFudGljcwpvY2k4LnBlcnNpc3RlbnRfdGltZW91dApvY2k4LnBpbmdfaW50ZXJ2YWwKb2NpOC5wcml2aWxlZ2VkX2Nvbm5lY3QKb2NpOC5zdGF0ZW1lbnRfY2FjaGVfc2l6ZQpvZGJjLmFsbG93X3BlcnNpc3RlbnQKb2RiYy5jaGVja19wZXJzaXN0ZW50Cm9kYmMuZGVmYXVsdF9kYgpvZGJjLmRlZmF1bHRfcHcKb2RiYy5kZWZhdWx0X3VzZXIKb2RiYy5kZWZhdWx0YmlubW9kZQpvZGJjLmRlZmF1bHRscmwKb2RiYy5tYXhfbGlua3MKb2RiYy5tYXhfcGVyc2lzdGVudApvcGVuX2Jhc2VkaXIKb3V0cHV0X2J1ZmZlcmluZwpvdXRwdXRfaGFuZGxlcgpwY3JlLmJhY2t0cmFja19saW1pdApwY3JlLnJlY3Vyc2lvbl9saW1pdApwZG9fbXlzcWwuY2FjaGVfc2l6ZQpwZG9fbXlzcWwuZGVmYXVsdF9zb2NrZXQKcGRvX29kYmMuY29ubmVjdGlvbl9wb29saW5nCnBnc3FsLmFsbG93X3BlcnNpc3RlbnQKcGdzcWwuYXV0b19yZXNldF9wZXJzaXN0ZW50CnBnc3FsLmlnbm9yZV9ub3RpY2UKcGdzcWwubG9nX25vdGljZQpwZ3NxbC5tYXhfbGlua3MKcGdzcWwubWF4X3BlcnNpc3RlbnQKcGhhci5jYWNoZV9saXN0CnBoYXIucmVhZG9ubHkKcGhhci5yZXF1aXJlX2hhc2gKcG9zdF9tYXhfc2l6ZQpyZWFscGF0aF9jYWNoZV9zaXplCnJlYWxwYXRoX2NhY2hlX3R0bApyZWdpc3Rlcl9hcmdjX2FyZ3YKcmVnaXN0ZXJfZ2xvYmFscwpyZWdpc3Rlcl9sb25nX2FycmF5cwpyZXBvcnRfbWVtbGVha3MKcmVwb3J0X3plbmRfZGVidWcKcmVxdWVzdF9vcmRlcgpzYWZlX21vZGUKc2FmZV9tb2RlX2FsbG93ZWRfZW52X3ZhcnMKc2FmZV9tb2RlX2V4ZWNfZGlyCnNhZmVfbW9kZV9naWQKc2FmZV9tb2RlX2luY2x1ZGVfZGlyCnNhZmVfbW9kZV9wcm90ZWN0ZWRfZW52X3ZhcnMKc2VuZG1haWxfZnJvbQpzZW5kbWFpbF9wYXRoCnNlcmlhbGl6ZV9wcmVjaXNpb24Kc2Vzc2lvbi5hdXRvX3N0YXJ0CnNlc3Npb24uYnVnX2NvbXBhdF80MgpzZXNzaW9uLmJ1Z19jb21wYXRfd2FybgpzZXNzaW9uLmNhY2hlX2V4cGlyZQpzZXNzaW9uLmNhY2hlX2xpbWl0ZXIKc2Vzc2lvbi5jb29raWVfZG9tYWluCnNlc3Npb24uY29va2llX2h0dHBvbmx5CnNlc3Npb24uY29va2llX2xpZmV0aW1lCnNlc3Npb24uY29va2llX3BhdGgKc2Vzc2lvbi5jb29raWVfc2VjdXJlCnNlc3Npb24uZW50cm9weV9maWxlCnNlc3Npb24uZW50cm9weV9sZW5ndGgKc2Vzc2lvbi5nY19kaXZpc29yCnNlc3Npb24uZ2NfbWF4bGlmZXRpbWUKc2Vzc2lvbi5nY19wcm9iYWJpbGl0eQpzZXNzaW9uLmhhc2hfYml0c19wZXJfY2hhcmFjdGVyCnNlc3Npb24uaGFzaF9mdW5jdGlvbgpzZXNzaW9uLm5hbWUKc2Vzc2lvbi5yZWZlcmVyX2NoZWNrCnNlc3Npb24uc2F2ZV9oYW5kbGVyCnNlc3Npb24uc2F2ZV9wYXRoCnNlc3Npb24uc2VyaWFsaXplX2hhbmRsZXIKc2Vzc2lvbi51c2VfY29va2llcwpzZXNzaW9uLnVzZV9vbmx5X2Nvb2tpZXMKc2Vzc2lvbi51c2VfdHJhbnNfc2lkCnNob3J0X29wZW5fdGFnCnNvYXAud3NkbF9jYWNoZV9kaXIKc29hcC53c2RsX2NhY2hlX2VuYWJsZWQKc29hcC53c2RsX2NhY2hlX2xpbWl0CnNvYXAud3NkbF9jYWNoZV90dGwKc3FsLnNhZmVfbW9kZQpzcWxpdGUuYXNzb2NfY2FzZQpzcWxpdGUzLmV4dGVuc2lvbl9kaXIKc3liY3QuYWxsb3dfcGVyc2lzdGVudApzeWJjdC5kZWFkbG9ja19yZXRyeV9jb3VudApzeWJjdC5ob3N0bmFtZQpzeWJjdC5sb2dpbl90aW1lb3V0CnN5YmN0Lm1heF9saW5rcwpzeWJjdC5tYXhfcGVyc2lzdGVudApzeWJjdC5taW5fY2xpZW50X3NldmVyaXR5CnN5YmN0Lm1pbl9zZXJ2ZXJfc2V2ZXJpdHkKc3liY3QudGltZW91dApzeXN2c2htLmluaXRfbWVtCnRpZHkuY2xlYW5fb3V0cHV0CnRpZHkuZGVmYXVsdF9jb25maWcKdHJhY2tfZXJyb3JzCnVuc2VyaWFsaXplX2NhbGxiYWNrX2Z1bmMKdXBsb2FkX21heF9maWxlc2l6ZQp1cGxvYWRfdG1wX2Rpcgp1cmxfcmV3cml0ZXIudGFncwp1c2VyX2FnZW50CnVzZXJfZGlyCnVzZXJfaW5pLmNhY2hlX3R0bAp1c2VyX2luaS5maWxlbmFtZQp2YXJpYWJsZXNfb3JkZXIKeG1scnBjX2Vycm9yX251bWJlcgp4bWxycGNfZXJyb3JzCnkya19jb21wbGlhbmNlCnpsaWIub3V0cHV0X2NvbXByZXNzaW9uCnpsaWIub3V0cHV0X2NvbXByZXNzaW9uX2xldmVsCnpsaWIub3V0cHV0X2hhbmRsZXIK",
	"php-errors.data":                                      "Tm8gcm93IHdpdGggdGhlIGdpdmVuIGlkZW50aWZpZXIKb3Blbl9iYXNlZGlyIHJlc3RyaWN0aW9uIGluIGVmZmVjdApldmFsKCknZCBjb2RlPC9iPiBvbiBsaW5lIDxiPgpDYW5ub3QgZXhlY3V0ZSBhIGJsYW5rIGNvbW1hbmQgaW4KRmF0YWwgZXJyb3I8L2I+OiAgcHJlZ19yZXBsYWNlCnRocm93biBpbiA8Yj4KIzAge21haW59ClN0YWNrIHRyYWNlOgo8L2I+IG9uIGxpbmUgPGI+CigpIGNhbm5vdCBiZSBjYWxsZWQgc3RhdGljYWxseQotIG5vdCBhIENsYXNzOjpNZXRob2QKOjpfX3RvU3RyaW5nKCkgbXVzdCBub3QgdGhyb3cgYW4gZXhjZXB0aW9uCkFjY2VzcyB0byB1bmRlY2xhcmVkIHN0YXRpYyBwcm9wZXJ0eToKQW4gaXRlcmF0b3IgY2Fubm90IGJlIHVzZWQgd2l0aCBmb3JlYWNoIGJ5IHJlZmVyZW5jZQpBcnJheSBjYWxsYmFjayBoYXMgdG8gY29udGFpbiBpbmRpY2VzIDAgYW5kIDEKQXJyaXZlZCBhdCBlbmQgb2YgbWFpbiBsb29wIHdoaWNoIHNob3VsZG4ndCBoYXBwZW4KQXR0ZW1wdCB0byBkZXN0cnVjdCBwZW5kaW5nIGV4Y2VwdGlvbgpBdHRlbXB0IHRvIHVuc2V0IHN0YXRpYyBwcm9wZXJ0eQpCYWxsb2MoKSBhbGxvY2F0aW9uIGV4Y2VlZHMgbGlzdCBib3VuZGFyeQpCYWxsb2MoKSBmYWlsZWQgdG8gYWxsb2NhdGUgbWVtb3J5CkJhc2UgbGFtYmRhIGZ1bmN0aW9uIGZvciBjbG9zdXJlIG5vdCBmb3VuZApDYWxsIHRvIGEgbWVtYmVyIGZ1bmN0aW9uCkNhbGwgdG8gcHJpdmF0ZSAKQ2FsbCB0byBwcm90ZWN0ZWQgCkNhbGwgdG8gdW5kZWZpbmVkIGZ1bmN0aW9uCkNhbGwgdG8gdW5kZWZpbmVkIG1ldGhvZApDYW4gb25seSB0aHJvdyBvYmplY3RzCkNhbm5vdCBhY2Nlc3MgZW1wdHkgcHJvcGVydHkKQ2Fubm90IGFjY2VzcyBwYXJlbnQ6OiB3aGVuIGN1cnJlbnQgY2xhc3Mgc2NvcGUgaGFzIG5vIHBhcmVudApDYW5ub3QgYWNjZXNzIHBhcmVudDo6IHdoZW4gbm8gY2xhc3Mgc2NvcGUgaXMgYWN0aXZlCkNhbm5vdCBhY2Nlc3MgcHJvcGVydHkgc3RhcnRlZCB3aXRoICdcXDAnCkNhbm5vdCBhY2Nlc3Mgc2VsZjo6IHdoZW4gbm8gY2xhc3Mgc2NvcGUgaXMgYWN0aXZlCkNhbm5vdCBhY2Nlc3Mgc3RhdGljOjogd2hlbiBubyBjbGFzcyBzY29wZSBpcyBhY3RpdmUKQ2Fubm90IGFjY2VzcyB1bmRlZmluZWQgcHJvcGVydHkgZm9yIG9iamVjdCB3aXRoIG92ZXJsb2FkZWQgcHJvcGVydHkgYWNjZXNzCkNhbm5vdCBhc3NpZ24gYnkgcmVmZXJlbmNlIHRvIG92ZXJsb2FkZWQgb2JqZWN0CkNhbm5vdCBicmVhay9jb250aW51ZSAlZCBsZXZlbCVzCkNhbm5vdCBjYWxsIGFic3RyYWN0IG1ldGhvZCAKQ2Fubm90IGNhbGwgY29uc3RydWN0b3IKQ2Fubm90IGNhbGwgZm9yd2FyZF9zdGF0aWNfY2FsbCgpIHdoZW4gbm8gY2xhc3Mgc2NvcGUgaXMgYWN0aXZlCkNhbm5vdCBjYWxsIG5vbiBzdGF0aWMgbWV0aG9kCkNhbm5vdCBjYWxsIG92ZXJsb2FkZWQgZnVuY3Rpb24gZm9yIG5vbi1vYmplY3QKQ2Fubm90IGNhbGwgcHJpdmF0ZSAKQ2Fubm90IGNyZWF0ZSByZWZlcmVuY2VzIHRvL2Zyb20gc3RyaW5nIG9mZnNldHMKQ2Fubm90IGNyZWF0ZSByZWZlcmVuY2VzIHRvL2Zyb20gc3RyaW5nIG9mZnNldHMgbm9yIG92ZXJsb2FkZWQgb2JqZWN0cwpDYW5ub3QgZGVjbGFyZSBzZWxmLXJlZmVyZW5jaW5nIGNvbnN0YW50IApDYW5ub3QgZGVzdHJveSBhY3RpdmUgbGFtYmRhIGZ1bmN0aW9uCkNhbm5vdCBnZXQgYXJndW1lbnRzIGZvciAKQ2Fubm90IGluY3JlbWVudC9kZWNyZW1lbnQgb3ZlcmxvYWRlZCBvYmplY3RzIG5vciBzdHJpbmcgb2Zmc2V0cwpDYW5ub3QgaW5zdGFudGlhdGUgYWJzdHJhY3QgY2xhc3MgCkNhbm5vdCBpbnN0YW50aWF0ZSBpbnRlcmZhY2UgCkNhbm5vdCBpbnN0YW50aWF0ZSB0cmFpdCAKQ2Fubm90IG92ZXJyaWRlIGZpbmFsIApDYW5ub3QgcGFzcyBwYXJhbWV0ZXIgCkNhbm5vdCByZWRlY2xhcmUgCkNhbm5vdCByZWRlY2xhcmUgY2xhc3MgCkNhbm5vdCByZWdpc3RlciBhIHJldmVyc2Ugb3V0cHV0IGhhbmRsZXIgY29uZmxpY3Qgb3V0c2lkZSBvZiBNSU5JVApDYW5ub3QgcmVnaXN0ZXIgYW4gb3V0cHV0IGhhbmRsZXIgYWxpYXMgb3V0c2lkZSBvZiBNSU5JVApDYW5ub3QgcmVnaXN0ZXIgYW4gb3V0cHV0IGhhbmRsZXIgY29uZmxpY3Qgb3V0c2lkZSBvZiBNSU5JVApDYW5ub3QgcmVzdW1lIGFuIGFscmVhZHkgcnVubmluZyBnZW5lcmF0b3IKQ2Fubm90IHJldHVybiBzdHJpbmcgb2Zmc2V0cyBieSByZWZlcmVuY2UKQ2Fubm90IHNldCBub24gZXhjZXB0aW9uIGFzIHByZXZpb3VzIGV4Y2VwdGlvbgpDYW5ub3QgdW5zZXQgc3RyaW5nIG9mZnNldHMKQ2Fubm90IHVzZSBbXSBmb3IgcmVhZGluZwpDYW5ub3QgdXNlIGFzc2lnbi1vcCBvcGVyYXRvcnMgd2l0aCBvdmVybG9hZGVkIG9iamVjdHMgbm9yIHN0cmluZyBvZmZzZXRzCkNhbm5vdCB1c2Ugb2JqZWN0IGFzIGFycmF5CkNhbm5vdCB1c2Ugb2JqZWN0IG9mIHR5cGUgCkNhbm5vdCB1c2Ugc3RyaW5nIG9mZnNldCBhcyBhbiBhcnJheQpDYW5ub3QgdXNlIHN0cmluZyBvZmZzZXQgYXMgYW4gb2JqZWN0CkNhbm5vdCB5aWVsZCBmcm9tIGZpbmFsbHkgaW4gYSBmb3JjZS1jbG9zZWQgZ2VuZXJhdG9yCkNhbm5vdCB5aWVsZCBzdHJpbmcgb2Zmc2V0cyBieSByZWZlcmVuY2UKQ2xhc3MgZW50cnkgcmVxdWVzdGVkIGZvciBhbiBvYmplY3Qgd2l0aG91dCBQSFAgY2xhc3MKQ2xhc3MgbmFtZSBtdXN0IGJlIGEgdmFsaWQgb2JqZWN0IG9yIGEgc3RyaW5nCkNvcnJ1cHRlZCBmY2FsbF9pbmZvIHByb3ZpZGVkIHRvIHplbmRfY2FsbF9mdW5jdGlvbigpCkRDT00gaGFzIGJlZW4gZGlzYWJsZWQgYnkgeW91ciBhZG1pbmlzdHJhdG9yIFtjb20uYWxsb3dfZGNvbT0wXQpEYXRlRm9ybWF0IGNsYXNzIG5vdCBkZWZpbmVkCkRhdGVUaW1lSW50ZXJmYWNlIGNhbid0IGJlIGltcGxlbWVudGVkIGJ5IHVzZXIgY2xhc3NlcwpFWFRSRU1FTFkgZmF0YWwgZXJyb3I6IGptcGJ1ZiB1bnJlY292ZXJhYmxlOyB0ZXJtaW5hdGluZwpFWFRSRU1FTFkgZmF0YWwgZXJyb3I6IGptcGJ1ZiB1bnJlY292ZXJhYmxlOyB0ZXJtaW5hdGluZy4KRVhUUkVNRUxZIGZhdGFsIGVycm9yOiBsb25nam1wIHJldHVybmVkIGNvbnRyb2w7IHRlcm1pbmF0aW5nCkVuY29kaW5nOiAnKicgbWF5IG9ubHkgYmUgZmlyc3QgYXJyYXlTaXplIHZhbHVlIGluIGxpc3QKRW5jb2Rpbmc6IEF0dHJpYnV0ZSAKRW5jb2Rpbmc6IENhbid0IGRlY29kZSBhcGFjaGUgbWFwLCBtaXNzaW5nIGtleQpFbmNvZGluZzogQ2FuJ3QgZGVjb2RlIGFwYWNoZSBtYXAsIG1pc3NpbmcgdmFsdWUKRW5jb2Rpbmc6IENhbid0IGRlY29kZSBhcGFjaGUgbWFwLCBvbmx5IFN0cmluZ3Mgb3IgTG9uZ3MgYXJlIGFsbG93ZCBhcyBrZXlzCkVuY29kaW5nOiBDYW5ub3QgZmluZCBlbmNvZGluZwpFbmNvZGluZzogRWxlbWVudCAKRW5jb2Rpbmc6IEVycm9yIGNhbGxpbmcgZnJvbV94bWwgY2FsbGJhY2sKRW5jb2Rpbmc6IEVycm9yIGNhbGxpbmcgdG9feG1sIGNhbGxiYWNrCkVuY29kaW5nOiBFeHRlcm5hbCByZWZlcmVuY2UgCkVuY29kaW5nOiBJbnRlcm5hbCBFcnJvcgpFbmNvZGluZzogSW52YWxpZCB0aW1lc3RhbXAgCkVuY29kaW5nOiBTb2FwVmFyIGhhcyBubyAnZW5jX3R5cGUnIHByb3BlcnR5CkVuY29kaW5nOiBVbnJlc29sdmVkIHJlZmVyZW5jZSAKRW5jb2Rpbmc6IFZpb2xhdGlvbiBvZiBlbmNvZGluZyBydWxlcwpFbmNvZGluZzogVmlvbGF0aW9uIG9mIGlkIGFuZCByZWYgaW5mb3JtYXRpb24gaXRlbXMgCkVuY29kaW5nOiBvYmplY3QgaGFzIG5vICcKRW5jb2Rpbmc6IG9iamVjdCBoYXMgbm8gJ2FueScgcHJvcGVydHkKRW5jb2Rpbmc6IHN0cmluZyAnCkVycm9yIGluc3RhbGxpbmcgc2lnbmFsIGhhbmRsZXIgZm9yIApFeGNlcHRpb24gdGhyb3duIHdpdGhvdXQgYSBzdGFjayBmcmFtZQpFeGNlcHRpb25zIG11c3QgYmUgdmFsaWQgb2JqZWN0cyBkZXJpdmVkIGZyb20gdGhlIEV4Y2VwdGlvbiBiYXNlIGNsYXNzCkZhaWxlZCB0byBjbG9uZSBTcG9vZkNoZWNrZXIgb2JqZWN0CkZhaWxlZCB0byByZWdpc3RlciBJbnRsRGF0ZUZvcm1hdHRlciBjbGFzcwpGYWlsZWQgdG8gcmVnaXN0ZXIgTWVzc2FnZUZvcm1hdHRlciBjbGFzcwpGYWlsZWQgdG8gcmVnaXN0ZXIgTnVtYmVyRm9ybWF0dGVyIGNsYXNzCkZhaWxlZCB0byByZWdpc3RlciBSZXNvdXJjZUJ1bmRsZSBjbGFzcwpGaWVsZCB3aWR0aCAlZCBpcyB0b28gbG9uZwpGaXJzdCBhcnJheSBtZW1iZXIgaXMgbm90IGEgdmFsaWQgY2xhc3MgbmFtZSBvciBvYmplY3QKRnVuY3Rpb24gbmFtZSBtdXN0IGJlIGEgc3RyaW5nCklsbGVnYWwgbGVuZ3RoIG1vZGlmaWVyIHNwZWNpZmllZCAKSWxsZWdhbCBvZmZzZXQgdHlwZQpJbnB1dCBzdHJpbmcgaXMgdG9vIGxvbmcKSW52YWxpZCBSZWxheE5HIFZhbGlkYXRpb24gQ29udGV4dApJbnZhbGlkIFNjaGVtYSBWYWxpZGF0aW9uIENvbnRleHQKSW52YWxpZCBvcGNvZGUKSW52YWxpZCBzZXJpYWxpemF0aW9uIGRhdGEgZm9yIERhdGVQZXJpb2Qgb2JqZWN0CkludmFsaWQgc2VyaWFsaXphdGlvbiBkYXRhIGZvciBEYXRlVGltZSBvYmplY3QKSW52YWxpZCBzZXJpYWxpemF0aW9uIGRhdGEgZm9yIERhdGVUaW1lSW1tdXRhYmxlIG9iamVjdApNYXhpbXVtIGV4ZWN1dGlvbiB0aW1lIG9mCk1ldGhvZCBuYW1lIG11c3QgYmUgYSBzdHJpbmcKTmVlZCB0byBzdXBwbHkgYW4gb2JqZWN0IHdoZW4gdGhyb3dpbmcgYW4gZXhjZXB0aW9uCk5lc3RpbmcgbGV2ZWwgdG9vIGRlZXAgLSByZWN1cnNpdmUgZGVwZW5kZW5jeT8KTnVtYmVyRm9ybWF0dGVyIGNsYXNzIG5vdCBkZWZpbmVkCk9iamVjdCBkb2VzIG5vdCBzdXBwb3J0IG1ldGhvZCBjYWxscwpPbmx5IHZhcmlhYmxlcyBjYW4gYmUgcGFzc2VkIGJ5IHJlZmVyZW5jZQpQRE86IGRyaXZlciAKUGFyc2luZyBTY2hlbWE6IDxyZXN0cmljdGlvbj4gb3IgPGV4dGVuc2lvbj4gZXhwZWN0ZWQgaW4gY29tcGxleENvbnRlbnQKUGFyc2luZyBTY2hlbWE6IGF0dHJpYnV0ZQpQYXJzaW5nIFNjaGVtYTogYXR0cmlidXRlIGhhcyBib3RoICdyZWYnIGFuZCAndHlwZScgYXR0cmlidXRlcwpQYXJzaW5nIFNjaGVtYTogYXR0cmlidXRlIGhhcyBib3RoICdyZWYnIGF0dHJpYnV0ZSBhbmQgc3VidHlwZQpQYXJzaW5nIFNjaGVtYTogYXR0cmlidXRlIGhhcyBib3RoICd0eXBlJyBhdHRyaWJ1dGUgYW5kIHN1YnR5cGUKUGFyc2luZyBTY2hlbWE6IGF0dHJpYnV0ZSBoYXMgbm8gJ25hbWUnIG5vciAncmVmJyBhdHRyaWJ1dGVzClBhcnNpbmcgU2NoZW1hOiBhdHRyaWJ1dGVHcm91cCAKUGFyc2luZyBTY2hlbWE6IGF0dHJpYnV0ZUdyb3VwIGhhcyBib3RoICdyZWYnIGF0dHJpYnV0ZSBhbmQgc3ViYXR0cmlidXRlClBhcnNpbmcgU2NoZW1hOiBhdHRyaWJ1dGVHcm91cCBoYXMgbm8gJ25hbWUnIG5vciAncmVmJyBhdHRyaWJ1dGVzClBhcnNpbmcgU2NoZW1hOiBjYW4ndCBpbXBvcnQgc2NoZW1hIGZyb20gClBhcnNpbmcgU2NoZW1hOiBjb21wbGV4VHlwZSBoYXMgbm8gJ25hbWUnIGF0dHJpYnV0ZQpQYXJzaW5nIFNjaGVtYTogZWxlbWVudCBoYXMgYm90aCAnZGVmYXVsdCcgYW5kICdmaXhlZCcgYXR0cmlidXRlcwpQYXJzaW5nIFNjaGVtYTogZWxlbWVudCBoYXMgYm90aCAnaXRlbVR5cGUnIGF0dHJpYnV0ZSBhbmQgc3VidHlwZQpQYXJzaW5nIFNjaGVtYTogZWxlbWVudCBoYXMgYm90aCAncmVmJyBhbmQgJ2ZpeGVkJyBhdHRyaWJ1dGVzClBhcnNpbmcgU2NoZW1hOiBlbGVtZW50IGhhcyBib3RoICdyZWYnIGFuZCAnbmlsbGFibGUnIGF0dHJpYnV0ZXMKUGFyc2luZyBTY2hlbWE6IGVsZW1lbnQgaGFzIGJvdGggJ3JlZicgYW5kICd0eXBlJyBhdHRyaWJ1dGVzClBhcnNpbmcgU2NoZW1hOiBlbGVtZW50IGhhcyBib3RoICdyZWYnIGF0dHJpYnV0ZSBhbmQgc3VidHlwZQpQYXJzaW5nIFNjaGVtYTogZWxlbWVudCBoYXMgYm90aCAndHlwZScgYXR0cmlidXRlIGFuZCBzdWJ0eXBlClBhcnNpbmcgU2NoZW1hOiBlbGVtZW50IGhhcyBubyAnbmFtZScgbm9yICdyZWYnIGF0dHJpYnV0ZXMKUGFyc2luZyBTY2hlbWE6IGV4cGVjdGVkIDxyZXN0cmljdGlvbj4gb3IgPGV4dGVuc2lvbj4gaW4gc2ltcGxlQ29udGVudApQYXJzaW5nIFNjaGVtYTogZXhwZWN0ZWQgPHJlc3RyaWN0aW9uPiwgPGxpc3Q+IG9yIDx1bmlvbj4gaW4gc2ltcGxlVHlwZQpQYXJzaW5nIFNjaGVtYTogZXh0ZW5zaW9uIGhhcyBubyAnYmFzZScgYXR0cmlidXRlClBhcnNpbmcgU2NoZW1hOiBncm91cCBoYXMgYm90aCAncmVmJyBhdHRyaWJ1dGUgYW5kIHN1YmNvbnRlbnQKUGFyc2luZyBTY2hlbWE6IGdyb3VwIGhhcyBubyAnbmFtZScgbm9yICdyZWYnIGF0dHJpYnV0ZXMKUGFyc2luZyBTY2hlbWE6IGluY2x1ZGUgaGFzIG5vICdzY2hlbWFMb2NhdGlvbicgYXR0cmlidXRlClBhcnNpbmcgU2NoZW1hOiBtaXNzaW5nIHJlc3RyaWN0aW9uIHZhbHVlClBhcnNpbmcgU2NoZW1hOiByZWRlZmluZSBoYXMgbm8gJ3NjaGVtYUxvY2F0aW9uJyBhdHRyaWJ1dGUKUGFyc2luZyBTY2hlbWE6IHJlc3RyaWN0aW9uIGhhcyBubyAnYmFzZScgYXR0cmlidXRlClBhcnNpbmcgU2NoZW1hOiBzaW1wbGVUeXBlIGhhcyBubyAnbmFtZScgYXR0cmlidXRlClBhcnNpbmcgU2NoZW1hOiB1bmV4cGVjdGVkClBhcnNpbmcgU2NoZW1hOiB1bnJlc29sdmVkIGVsZW1lbnQgJ3JlZicgYXR0cmlidXRlIApQYXJzaW5nIFNjaGVtYTogdW5yZXNvbHZlZCBncm91cCAncmVmJyBhdHRyaWJ1dGUgClBhcnNpbmcgV1NETDogPGJpbmRpbmc+IApQYXJzaW5nIFdTREw6IDxiaW5kaW5nPiBoYXMgbm8gbmFtZSBhdHRyaWJ1dGUKUGFyc2luZyBXU0RMOiA8ZmF1bHQ+IHdpdGggbmFtZSAKUGFyc2luZyBXU0RMOiA8bWVzc2FnZT4gaGFzIG5vIG5hbWUgYXR0cmlidXRlClBhcnNpbmcgV1NETDogPHBvcnRUeXBlPiAKUGFyc2luZyBXU0RMOiA8cG9ydFR5cGU+IGhhcyBubyBuYW1lIGF0dHJpYnV0ZQpQYXJzaW5nIFdTREw6IDxzZXJ2aWNlPiAKUGFyc2luZyBXU0RMOiA8c2VydmljZT4gaGFzIG5vIG5hbWUgYXR0cmlidXRlClBhcnNpbmcgV1NETDogQ291bGQgbm90IGZpbmQgYW55IHVzYWJsZSBiaW5kaW5nIHNlcnZpY2VzIGluIFdTREwuClBhcnNpbmcgV1NETDogQ291bGRuJ3QgYmluZCB0byBzZXJ2aWNlClBhcnNpbmcgV1NETDogQ291bGRuJ3QgZmluZCA8ZGVmaW5pdGlvbnM+IGluIApQYXJzaW5nIFdTREw6IENvdWxkbid0IGxvYWQgZnJvbSAKUGFyc2luZyBXU0RMOiBNaXNzaW5nICduYW1lJyBhdHRyaWJ1dGUgZm9yIDxiaW5kaW5nPgpQYXJzaW5nIFdTREw6IE1pc3NpbmcgJ25hbWUnIGF0dHJpYnV0ZSBmb3IgPG9wZXJhdGlvbj4KUGFyc2luZyBXU0RMOiBNaXNzaW5nICd0eXBlJyBhdHRyaWJ1dGUgZm9yIDxiaW5kaW5nPgpQYXJzaW5nIFdTREw6IE1pc3NpbmcgPG1lc3NhZ2U+IHdpdGggbmFtZSAKUGFyc2luZyBXU0RMOiBNaXNzaW5nIDxwb3J0VHlwZT4gd2l0aCBuYW1lIApQYXJzaW5nIFdTREw6IE1pc3NpbmcgPHBvcnRUeXBlPi88b3BlcmF0aW9uPiB3aXRoIG5hbWUgClBhcnNpbmcgV1NETDogTWlzc2luZyBtZXNzYWdlIGF0dHJpYnV0ZSBmb3IgPGhlYWRlcj4KUGFyc2luZyBXU0RMOiBNaXNzaW5nIG5hbWUgZm9yIDxmYXVsdD4gb2YgClBhcnNpbmcgV1NETDogTWlzc2luZyBuYW1lIGZvciA8aW5wdXQ+IG9mIApQYXJzaW5nIFdTREw6IE1pc3NpbmcgbmFtZSBmb3IgPG91dHB1dD4gb2YgClBhcnNpbmcgV1NETDogTWlzc2luZyBwYXJ0ICclcycgaW4gPG1lc3NhZ2U+ClBhcnNpbmcgV1NETDogTWlzc2luZyBwYXJ0IGF0dHJpYnV0ZSBmb3IgPGhlYWRlcj4KUGFyc2luZyBXU0RMOiBObyA8YmluZGluZz4gZWxlbWVudCB3aXRoIG5hbWUgClBhcnNpbmcgV1NETDogTm8gYWRkcmVzcyBhc3NvY2lhdGVkIHdpdGggPHBvcnQ+ClBhcnNpbmcgV1NETDogTm8gYmluZGluZyBhc3NvY2lhdGVkIHdpdGggPHBvcnQ+ClBhcnNpbmcgV1NETDogTm8gbG9jYXRpb24gYXNzb2NpYXRlZCB3aXRoIDxwb3J0PgpQYXJzaW5nIFdTREw6IE5vIG5hbWUgYXNzb2NpYXRlZCB3aXRoIDxwYXJ0PiAKUGFyc2luZyBXU0RMOiBUaGUgZmF1bHQgbWVzc2FnZSAKUGFyc2luZyBXU0RMOiBVbmV4cGVjdGVkIFdTREwgZWxlbWVudCA8ClBhcnNpbmcgV1NETDogVW5leHBlY3RlZCBleHRlbnNpYmlsaXR5IGVsZW1lbnQgPApQYXJzaW5nIFdTREw6IFVua25vd24gZW5jb2RpbmdTdHlsZSAnClBhcnNpbmcgV1NETDogVW5rbm93biByZXF1aXJlZCBXU0RMIGV4dGVuc2lvbiAnClBhcnNpbmcgV1NETDogVW5zcGVjaWZpZWQgZW5jb2RpbmdTdHlsZQpQb3NzaWJsZSBpbnRlZ2VyIG92ZXJmbG93IGluIG1lbW9yeSBhbGxvY2F0aW9uICgKU2Vjb25kIGFycmF5IG1lbWJlciBpcyBub3QgYSB2YWxpZCBtZXRob2QKU3Bvb2ZjaGVja2VyIGNsYXNzIG5vdCBkZWZpbmVkClN0cmluZyBzaXplIG92ZXJmbG93ClRoZSBvYmplY3QgdG8gYmUgaXRlcmF0ZWQgaXMgaW4gYW4gaW52YWxpZCBzdGF0ZTogIgpUcnlpbmcgdG8gY2xvbmUgYW4gdW5jbG9uZWFibGUgb2JqZWN0ClRyeWluZyB0byBjbG9uZSBhbiB1bmNsb25lYWJsZSBvYmplY3Qgb2YgY2xhc3MgClVuYWJsZSB0byBjYWxsIApVbmFibGUgdG8gY2FzdCBub2RlIHRvIHN0cmluZwpVbmRlZmluZWQgY2xhc3MgY29uc3RhbnQgJwpVbmRlZmluZWQgY29uc3RhbnQgJwpVbmRlZmluZWQgb2Zmc2V0IGZvciBvYmplY3Qgb2YgdHlwZSAKVW5leHBlY3RlZCBpbmNvbnNpc3RlbmN5IGluIGNyZWF0ZV9mdW5jdGlvbigpClVua25vd24gU09BUCB2ZXJzaW9uClVua25vd24gdHlwZWhpbnQKVW5zdXBwb3J0ZWQgb3BlcmFuZCB0eXBlcwpVc2luZyAkdGhpcyB3aGVuIG5vdCBpbiBvYmplY3QgY29udGV4dApXcm9uZyBwYXJhbWV0ZXJzIGZvciBFcnJvckV4Y2VwdGlvbigKV3JvbmcgcGFyYW1ldGVycyBmb3IgRXhjZXB0aW9uKApZb3UgTVVTVCBsb2FkIFBETyBiZWZvcmUgbG9hZGluZyBhbnkgUERPIGRyaXZlcnMKW10gb3BlcmF0b3Igbm90IHN1cHBvcnRlZCBmb3Igc3RyaW5ncwphbmQgbXVzdCB0aGVyZWZvcmUgYmUgZGVjbGFyZWQgYWJzdHJhY3Qgb3IgaW1wbGVtZW50IHRoZSByZW1haW5pbmcgbWV0aG9kcwpuYW1lc3BhY2UgbXVzdCBub3QgbWF0Y2ggdGhlIGVuY2xvc2luZyBzY2hlbWEgJ3RhcmdldE5hbWVzcGFjZScKcmVxdWlyZXMgUERPIEFQSSB2ZXJzaW9uIApQRE8gQ29ubmVjdGlvbiBFcnJvcjogU1FMU1RBVEVbSFkwMDBdIAooSFkwMDAvMjAwMik6IENvbm5lY3Rpb24gcmVmdXNlZCAK",
	"php-function-names-933150.data":                       "X19oYWx0X2NvbXBpbGVyCmFwYWNoZV9jaGlsZF90ZXJtaW5hdGUKYmFzZTY0X2RlY29kZQpiemRlY29tcHJlc3MKY2FsbF91c2VyX2Z1bmMKY2FsbF91c2VyX2Z1bmNfYXJyYXkKY2FsbF91c2VyX21ldGhvZApjYWxsX3VzZXJfbWV0aG9kX2FycmF5CmNvbnZlcnRfdXVkZWNvZGUKZmlsZV9nZXRfY29udGVudHMKZmlsZV9wdXRfY29udGVudHMKZnNvY2tvcGVuCmdldF9jbGFzc19tZXRob2RzCmdldF9jbGFzc192YXJzCmdldF9kZWZpbmVkX2NvbnN0YW50cwpnZXRfZGVmaW5lZF9mdW5jdGlvbnMKZ2V0X2RlZmluZWRfdmFycwpnemRlY29kZQpnemluZmxhdGUKZ3p1bmNvbXByZXNzCmluY2x1ZGVfb25jZQppbnZva2VhcmdzCnBjbnRsX2V4ZWMKcGNudGxfZm9yawpwZnNvY2tvcGVuCnBvc2l4X2dldGN3ZApwb3NpeF9nZXRwd3VpZApwb3NpeF9nZXR1aWQKcG9zaXhfdW5hbWUKUmVmbGVjdGlvbkZ1bmN0aW9uCnJlcXVpcmVfb25jZQpzaGVsbF9leGVjCnN0cl9yb3QxMwpzeXNfZ2V0X3RlbXBfZGlyCndwX3JlbW90ZV9mb3Blbgp3cF9yZW1vdGVfZ2V0CndwX3JlbW90ZV9oZWFkCndwX3JlbW90ZV9wb3N0CndwX3JlbW90ZV9yZXF1ZXN0CndwX3NhZmVfcmVtb3RlX2dldAp3cF9zYWZlX3JlbW90ZV9oZWFkCndwX3NhZmVfcmVtb3RlX3Bvc3QKd3Bfc2FmZV9yZW1vdGVfcmVxdWVzdAp6bGliX2RlY29kZQo=",
	"php-function-names-933151.data":                       "",
	"php-variables.data":                                   "JEdMT0JBTFMKJEhUVFBfQ09PS0lFX1ZBUlMKJEhUVFBfRU5WX1ZBUlMKJEhUVFBfR0VUX1ZBUlMKJEhUVFBfUE9TVF9GSUxFUwokSFRUUF9QT1NUX1ZBUlMKJEhUVFBfUkFXX1BPU1RfREFUQQokSFRUUF9SRVFVRVNUX1ZBUlMKJEhUVFBfU0VSVkVSX1ZBUlMKJF9DT09LSUUKJF9FTlYKJF9GSUxFUwokX0dFVAokX1BPU1QKJF9SRVFVRVNUCiRfU0VSVkVSCiRfU0VTU0lPTgokYXJnYwokYXJndgo=",
	"restricted-files.data":                                "IyBBcGFjaGUKIyAobm8gc2xhc2g7IGFsc28gZ3VhcmRzIGFnYWluc3Qgb2xkLmh0YWNjZXNzLCBvbGQuaHRwYXNzd2QsIGV0Yy4pCi5odGFjY2VzcwouaHRkaWdlc3QKLmh0cGFzc3dkCiMgaG9tZSBsZXZlbCBkb3RmaWxlcyAoa2VlcCBpbiBzeW5jIHdpdGggbGZpLW9zLWZpbGVzLmRhdGEpCi5hcHRpdHVkZS9jb25maWcKLmJhc2hfY29uZmlnCi5iYXNoX2hpc3RvcnkKLmJhc2hfbG9nb3V0Ci5iYXNoX3Byb2ZpbGUKLmJhc2hyYwouY2FjaGUvbm90aWZ5LW9zZC5sb2cKLmNvbmZpZy9vZGVzay9vZGVzayB0ZWFtLmNvbmYKLmNzaHJjCi5kcnVzaC8KLmdpdGNvbmZpZwouZ251cGcvCi5ocGxpcC9ocGxpcC5jb25mCi5rc2hfaGlzdG9yeQoubGVzc2hzdAoubGZ0cC8KLmxoaXN0b3J5Ci5sbGRiLWhpc3RvcnkKLmxvY2FsL3NoYXJlL21jLwoubXkuY25mCi5teXNxbF9oaXN0b3J5Ci5uYW5vX2hpc3RvcnkKLm5vZGVfcmVwbF9oaXN0b3J5Ci5uc3IKLnBlYXJyYwoucGhwX2hpc3RvcnkKLnBraS8KLnByb2ZpbGUKLnBzcWxfaGlzdG9yeQoucHl0aG9uX2hpc3RvcnkKLnJlZGlzY2xpX2hpc3RvcnkKLlJoaXN0b3J5Ci5zaF9oaXN0b3J5Ci5zcWxpdGVfaGlzdG9yeQouc3NoL2F1dGhvcml6ZWRfa2V5cwouc3NoL2NvbmZpZwouc3NoL2lkX2RzYQouc3NoL2lkX2RzYS5wdWIKLnNzaC9pZF9yc2EKLnNzaC9pZF9yc2EucHViCi5zc2gvaWRlbnRpdHkKLnNzaC9pZGVudGl0eS5wdWIKLnNzaC9rbm93bl9ob3N0cwouc3VidmVyc2lvbi9hdXRoCi5zdWJ2ZXJzaW9uL2NvbmZpZwouc3VidmVyc2lvbi9zZXJ2ZXJzCi50Y29ubi90Y29ubi5jb25mCi50Y3NocmMKLnZpZGFsaWEvdmlkYWxpYS5jb25mCi52aW1pbmZvCi52aW1yYwoueGF1dGhvcml0eQouemhpc3RvcnkKLnpzaHJjCi56c2hfaGlzdG9yeQoubnNjb25maWcKIyBWZXJzaW9uIGNvbnRyb2wKLy5naXQvCi8uZ2l0aWdub3JlCi8uaGcvCi8uaGdpZ25vcmUKLy5zdm4vCiMgV29yZHByZXNzCndwLWNvbmZpZy5waHAKd3AtY29uZmlnLmJhawp3cC1jb25maWcub2xkCndwLWNvbmZpZy50ZW1wCndwLWNvbmZpZy50bXAKd3AtY29uZmlnLnR4dAojIFN5bWZvbnkKL2NvbmZpZy9jb25maWcueW1sCi9jb25maWcvY29uZmlnX2Rldi55bWwKL2NvbmZpZy9jb25maWdfcHJvZC55bWwKL2NvbmZpZy9jb25maWdfdGVzdC55bWwKL2NvbmZpZy9wYXJhbWV0ZXJzLnltbAovY29uZmlnL3JvdXRpbmcueW1sCi9jb25maWcvc2VjdXJpdHkueW1sCi9jb25maWcvc2VydmljZXMueW1sCiMgRHJ1cGFsCi9zaXRlcy9kZWZhdWx0L2RlZmF1bHQuc2V0dGluZ3MucGhwCi9zaXRlcy9kZWZhdWx0L3NldHRpbmdzLnBocAovc2l0ZXMvZGVmYXVsdC9zZXR0aW5ncy5sb2NhbC5waHAKIyBNYWdlbnRvCi9hcHAvZXRjL2xvY2FsLnhtbAojIFN1YmxpbWUgVGV4dAovc2Z0cC1jb25maWcuanNvbgojIEFTUC5ORVQKL1dlYi5jb25maWcKIyBOb2RlCi9wYWNrYWdlLmpzb24KL3BhY2thZ2UtbG9jay5qc29uCi9ncnVudGZpbGUuanMKL25wbS1kZWJ1Zy5sb2cKL29ybWNvbmZpZy5qc29uCi90c2NvbmZpZy5qc29uCi93ZWJwYWNrLmNvbmZpZy5qcwoveWFybi5sb2NrCiMgQ29tcG9zZXIKL2NvbXBvc2VyLmpzb24KL2NvbXBvc2VyLmxvY2sKL3BhY2thZ2VzLmpzb24KIyBkb3RlbnYKLy5lbnYKIyBPU1gKLy5EU19TdG9yZQojIFdTIEZUUAovLndzX2Z0cC5pbmkKIyBjb21tb24sIG9sZCBuZXR3b3JrIGNvbmZpZyBmaWxlCi5uZXRyYwojIE5ldyBUb3AgTGV2ZWwgZG90ZmlsZXMKLnRodW5kZXJiaXJkLwoudm13YXJlLwoua3ViZS8KLmphdmEvCi5hbnlkZXNrLwouZG9ja2VyLwoubnBtLwoubnZtLwoubWluaWt1YmUvCi5hdG9tLwouYXdzL2NvbmZpZwouYXdzL2NyZWRlbnRpYWxzCi5jdXBzLwouZGJ1cy8KLmJvdG8KLmdlbS8KLmdub25tZS8KLmdzdXRpbC8KIyBOZXcgUGVyLVByb2plY3QgRmlsZXMKLmlkZWEKbmJwcm9qZWN0Lwpib3dlci5qc29uCi5ib3dlcnJjCi5lc2xpbnRyYwouanNoaW50cmMKLmdpdGxhYi1jaS55bWwKLnRyYXZpcy55bWwKZGF0YWJhc2UueW1sCkRvY2tlcmZpbGUK",
	"restricted-upload.data":                               "IyBBcGFjaGUgd2Vic2VydmVyCi5odGFjY2VzcwouaHRkaWdlc3QKLmh0cGFzc3dkCiMgV29yZFByZXNzIGNvbmZpZ3VyYXRpb24gZmlsZQp3cC1jb25maWcucGhwCiMgU3ltZm9ueSBjb25maWd1cmF0aW9uIGZpbGVzCmNvbmZpZy55bWwKY29uZmlnX2Rldi55bWwKY29uZmlnX3Byb2QueW1sCmNvbmZpZ190ZXN0LnltbApwYXJhbWV0ZXJzLnltbApyb3V0aW5nLnltbApzZWN1cml0eS55bWwKc2VydmljZXMueW1sCiMgRHJ1cGFsIGNvbmZpZ3VyYXRpb24gZmlsZXMKZGVmYXVsdC5zZXR0aW5ncy5waHAKc2V0dGluZ3MucGhwCnNldHRpbmdzLmxvY2FsLnBocAojIE1hZ2VudG8gY29uZmlndXJhdGlvbiBmaWxlcwpsb2NhbC54bWwKIyBkb3RlbnYgY29uZmlndXJhdGlvbiBmaWxlCi5lbnYK",
	"scanners-headers.data":                                "YWN1bmV0aXgtcHJvZHVjdAooYWN1bmV0aXggd2ViIHZ1bG5lcmFiaWxpdHkgc2Nhbm5lcgphY3VuZXRpeC1zY2FubmluZy1hZ3JlZW1lbnQKYWN1bmV0aXgtdXNlci1hZ3JlZW1lbnQKbXl2YXI9MTIzNAp4LXJhdHByb3h5LWxvb3AKYnl0ZXM9MC0sNS0wLDUtMSw1LTIsNS0zLDUtNCw1LTUsNS02LDUtNyw1LTgsNS05LDUtMTAsNS0xMSw1LTEyLDUtMTMsNS0xNAp4LXNjYW5uZXIK",
	"scanners-urls.data":                                   "Ly5hZFNlbnNlcG9zdG5vdHRoZXJlbm9ub2Jvb2sKLzxpbnZhbGlkPmhlbGxvLmh0bWwKL2FjdFNlbnNlcG9zdG5vdHRoZXJlbm9ub3RpdmUKL2FjdW5ldGl4LXd2cy10ZXN0LWZvci1zb21lLWluZXhpc3RlbnQtZmlsZQovYW50aWRpc2VzdGFibGlzaG1lbnRhcmlhbmlzbQovYXBwc2Nhbl9maW5nZXJwcmludC9tYWNfYWRkcmVzcwovYXJhY2huaS0KL2N5YmVyY29wCi9uZXNzdXNfaXNfcHJvYmluZ195b3VfCi9uZXNzdXN0ZXN0Ci9uZXRzcGFya2VyLQovcmZpaW5jLnR4dAovdGhlcmVpc25vd2F5dGhhdC15b3UtY2FuYmV0aGVyZQovdzNhZi9yZW1vdGVmaWxlaW5jbHVkZS5odG1sCmFwcHNjYW5fZmluZ2VycHJpbnQKdzAwdHcwMHQuYXQuSVNDLlNBTlMuREZpbmQKdzAwdHcwMHQuYXQuYmxhY2toYXRzLnJvbWFuaWFuLmFudGktc2VjCg==",
	"scanners-user-agents.data":                            "IyBWdWxuZXJhYmlsaXR5IHNjYW5uZXJzLCBicnV0ZWZvcmNlIHBhc3N3b3JkIGNyYWNrZXJzIGFuZCBleHBsb2l0YXRpb24gdG9vbHMKCiMgcGFzc3dvcmQgY3JhY2tlcgojIGh0dHA6Ly9zZWN0b29scy5vcmcvdG9vbC9oeWRyYS8KKGh5ZHJhKQojIHZ1bG4gc2Nhbm5lcgojIGh0dHA6Ly92aXJ0dWFsYmx1ZW5lc3MubmV0L25hc2wuaHRtbAoubmFzbAojIHNxbCBpbmplY3Rpb24KIyBodHRwczovL3NvdXJjZWZvcmdlLm5ldC9wcm9qZWN0cy9hYnNpbnRoZS8KYWJzaW50aGUKIyBlbWFpbCBoYXJ2ZXN0aW5nCiMgZGVhZD8gMjAwNAphZHZhbmNlZCBlbWFpbCBleHRyYWN0b3IKIyB2dWxuIHNjYW5uZXIKIyBodHRwOi8vd3d3LmFyYWNobmktc2Nhbm5lci5jb20vCmFyYWNobmkvCmF1dG9nZXRjb250ZW50CiMgbmVzc3VzIGZyb250ZW5kCiMgaHR0cDovL3d3dy5jcm9zc2xleS1uaWxzZW4uY29tL0xpbnV4L0JpbGJvXy1fTmVzc3VzX1dFQi9iaWxib18tX25lc3N1c193ZWIuaHRtbAojIGRlYWQ/IDIwMDMKYmlsYm8KIyBCYWNrdXAgRmlsZSBBcnRpZmFjdHMgQ2hlY2tlcgojIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXplbjE2MC9iZmFjCkJGQUMKIyBwYXNzd29yZCBjcmFja2VyCiMgaHR0cDovL3NlY3Rvb2xzLm9yZy90b29sL2JydXR1cy8KYnJ1dHVzCmJydXR1cy9hZXQKIyBzcWwgaW5qZWN0aW9uCiMgaHR0cHM6Ly93d3cubm90c29zZWN1cmUuY29tL2JzcWxiZi12Mi1ibGluZC1zcWwtaW5qZWN0aW9uLWJydXRlLWZvcmNlci8KYnNxbGJmCiMgdnVsbiBzY2FubmVyCiMgaHR0cDovL2ZyZWVjb2RlLmNvbS9wcm9qZWN0cy9jZ2ljaGsgZGVhZD8gMjAwMQpjZ2ljaGsKIyB2dWxuIHNjYW5uZXIKIyBodHRwczovL3NvdXJjZWZvcmdlLm5ldC9wcm9qZWN0cy9jaXNjby10b3JjaC8KY2lzY28tdG9yY2gKIyB2dWxuIHNjYW5uZXIKIyBodHRwczovL2dpdGh1Yi5jb20vc3Rhc2lub3BvdWxvcy9jb21taXgKY29tbWl4CiMgTVMgRnJvbnRQYWdlIHZ1bG4gc2Nhbm5lcj8KY29yZS1wcm9qZWN0LzEuMAojIHZ1bG4gc2Nhbm5lcj8KY3JpbXNjYW5uZXIvCiMgdnVsbiBzY2FubmVyCmRhdGFjaGEwcwojIGhpZGRlbiBwYWdlIHNjYW5uZXIKIyBodHRwczovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL0NhdGVnb3J5Ok9XQVNQX0RpckJ1c3Rlcl9Qcm9qZWN0CmRpcmJ1c3RlcgojIHZ1bG4gc2Nhbm5lcgojIGh0dHBzOi8vc291cmNlZm9yZ2UubmV0L3Byb2plY3RzL2RvbWlub2h1bnRlci8KZG9taW5vIGh1bnRlcgojIHZ1bG4gc2Nhbm5lciAtIGRpcmVjdG9yeSB0cmF2ZXJzYWwgZnV6emVyCiMgaHR0cHM6Ly9naXRodWIuY29tL3dpcmVnaG91bC9kb3Rkb3Rwd24KZG90ZG90cHduCmVtYWlsIGV4dHJhY3RvcgojIHZ1bG4gc2Nhbm5lcgpmaHNjYW4gY29yZSAxLgpmbG9vZGdhdGUKIyAiRi1TZWN1cmUgUmFkYXIgaXMgYSB0dXJua2V5IHZ1bG5lcmFiaWxpdHkgc2Nhbm5pbmcgYW5kIG1hbmFnZW1lbnQgcGxhdGZvcm0uIgpGLVNlY3VyZSBSYWRhcgpnZXQtbWluaW1hbAojIFNjYW5uZXIgdGhhdCBsb29rcyBmb3IgZXhpc3Rpbmcgb3IgaGlkZGVuIHdlYiBvYmplY3RzCiMgaHR0cHM6Ly9naXRodWIuY29tL09KL2dvYnVzdGVyCmdvYnVzdGVyCiMgdnVsbiBzY2FubmVyCmdvb3RraXQgYXV0by1yb290ZXIgc2Nhbm5lcgpncmFiYmVyCiMgdnVsbiBzY2FubmVyCiMgaHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvZ3JlbmRlbC8KZ3JlbmRlbC1zY2FuCiMgc3FsIGluamVjdGlvbgpoYXZpagojIHZ1bG4gc2Nhbm5lciAtIHBhdGggZGlzY2xvc3VyZSBmaW5kZXIKIyBodHRwOi8vc2VjbGlzdHMub3JnL2Z1bGxkaXNjbG9zdXJlLzIwMTAvU2VwLzM3NQppbnNwYXRoCmludGVybmV0IG5pbmphCiMgdnVsbiBzY2FubmVyCmphYXNjb2lzCiMgdnVsbiBzY2FubmVyCnptZXUKIyAiTW96aWxsYS81LjAgSm9yZ2VlIiwgdnVsbiBzY2FubmVyCkpvcmdlZQojIHBvcnQgc2Nhbm5lcgojIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2JlcnRkYXZpZGdyYWhhbS9tYXNzY2FuCm1hc3NjYW4KIyB2dWxuIHNjYW5uZXIKIyBodHRwOi8vd3d3LnNldmVydXMub3JnL3NhY2hhL21ldGlzLwptZXRpcwojIHZ1bG4gc2Nhbm5lcgptb3JmZXVzIGZ1Y2tpbmcgc2Nhbm5lcgojIHNxbCBpbmplY3Rpb24KIyBodHRwczovL2dpdGh1Yi5jb20vZHRyaXAvbXlzcWxvaXQKbXlzcWxvaXQKIyB2dWxuIHNjYW5uZXIKIyBodHRwOi8vd3d3Lm5zdGFsa2VyLmNvbS8Kbi1zdGVhbHRoCiMgdnVsbiBzY2FubmVyCiMgaHR0cDovL3d3dy50ZW5hYmxlLmNvbS9wcm9kdWN0cy9uZXNzdXMtdnVsbmVyYWJpbGl0eS1zY2FubmVyCm5lc3N1cwojIHZ1bG4gc2Nhbm5lcgojIGh0dHBzOi8vd3d3Lm5ldHNwYXJrZXIuY29tL3dlYi12dWxuZXJhYmlsaXR5LXNjYW5uZXIvCm5ldHNwYXJrZXIKIyB2dWxuIHNjYW5uZXIKIyBodHRwczovL2NpcnQubmV0L05pa3RvMgpuaWt0bwojIHZ1bG4gc2Nhbm5lcgpubWFwIG5zZQpubWFwIHNjcmlwdGluZyBlbmdpbmUKbm1hcC1uc2UKIyB2dWxuIHNjYW5uZXIKIyBodHRwOi8vd3d3Lm5zYXVkaXRvci5jb20vCm5zYXVkaXRvcgojIHZ1bG4gc2Nhbm5lcgojIGh0dHBzOi8vZ2l0aHViLmNvbS9wcm9qZWN0ZGlzY292ZXJ5L251Y2xlaQpOdWNsZWkKIyB2dWxuIHNjYW5uZXIKIyBodHRwOi8vd3d3Lm9wZW52YXMub3JnLwpvcGVudmFzCiMgc3FsIGluamVjdGlvbgojIGh0dHA6Ly93d3cudmVhbHRlbC5jb20vc29mdHdhcmUvbm9zZWMvcGFuZ29saW4vCnBhbmdvbGluCiMgd2ViIHByb3h5ICYgdnVsbiBzY2FubmVyCiMgaHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvcGFyb3MvCnBhcm9zCiMgcGhwbXlhZG1pbiB2dWxuIHNjYW5uZXIKIyBkZWFkIDIwMDU/CnBtYWZpbmQKcHJvZy5jdXN0b21jcmF3bGVyCiMgUVFHYW1lSGFsbCBEb1MvVmlydXMvTWFsd2FyZS9BZHdhcmUKIyBodHRwczovL3R3aXR0ZXIuY29tL2JhZ2Rlci9zdGF0dXMvMTI0NDk4MjU1Njk1ODgyNjQ5Nj9zPTIwClFRR2FtZUhhbGwKIyB2dWxuIHNjYW5uZXIKIyBodHRwczovL3d3dy5xdWFseXMuY29tL3N1aXRlL3dlYi1hcHBsaWNhdGlvbi1zY2FubmluZy8KcXVhbHlzIHdhcwpzLnQuYS5sLmsuZS5yLgpzZWN1cml0eSBzY2FuCiMgdnVsbiBzY2FubmVyCiMgaHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvc3ByaW5nZW53ZXJrLwpzcHJpbmdlbndlcmsKIyBzcWwgaW5qZWN0aW9uCiMgaHR0cDovL3d3dy5zcWxwb3dlcmluamVjdG9yLmNvbS8Kc3FsIHBvd2VyIGluamVjdG9yCiMgc3FsIGluamVjdGlvbgojIGh0dHA6Ly9zcWxtYXAub3JnLwpzcWxtYXAKIyBzcWwgaW5qZWN0aW9uCiMgaHR0cDovL3NxbG5pbmphLnNvdXJjZWZvcmdlLm5ldC8Kc3FsbmluamEKIyBodHRwczovL3d3dy5jeWJlci5uai5nb3YvdGhyZWF0LXByb2ZpbGVzL3Ryb2phbi12YXJpYW50cy9zeXNzY2FuCnN5c3NjYW4KIyBwYXNzd29yZCBjcmFja2VyCiMgaHR0cDovL2Zvb2Z1cy5uZXQvZ29vbnMvam1rL21lZHVzYS9tZWR1c2EuaHRtbAp0ZWggZm9yZXN0IGxvYnN0ZXIKdGhpcyBpcyBhbiBleHBsb2l0CiMgdnVsbiBzY2FubmVyPwp0b2F0YSBkcmFnb3N0ZWEKdG9hdGEgZHJhZ29zdGVhIG1lYSBwZW50cnUgZGlhdm9sYQojIFNRTCBib3QKIyBodHRwOi8vdG9vbHMuY2lzY28uY29tL3NlY3VyaXR5L2NlbnRlci92aWV3SXBzU2lnbmF0dXJlLng/c2lnbmF0dXJlSWQ9MjIxNDImc2lnbmF0dXJlU3ViSWQ9MAp1aWwycG4KIyBiYWRseSBzY3JpcHRlZCBVQXMgKGUuZy4gVXNlci1BZ2VudDogVXNlci1BZ2VudDogZm9vKQp1c2VyLWFnZW50OgojIHZ1bG4gc2Nhbm5yCiMgaHR0cHM6Ly9zdWJncmFwaC5jb20vdmVnYS8KdmVnYS8KIyB2dWxuIHNjYW5uZXIKIyBkZWFkPwp2b2lkZXllCiMgdnVsbiBzY2FubmVyCiMgaHR0cDovL3czYWYub3JnLwp3M2FmLnNmLm5ldAp3M2FmLnNvdXJjZWZvcmdlLm5ldAp3M2FmLm9yZwojIHNpdGUgc2Nhbm5lciAobGVnYWN5KQojIGh0dHA6Ly93d3cucm9ib3RzdHh0Lm9yZy9kYi93ZWJiYW5kaXQuaHRtbAp3ZWJiYW5kaXQKIyB2dWxuIHNjYW5uZXIKIyBodHRwOi8vd3d3OC5ocC5jb20vdXMvZW4vc29mdHdhcmUtc29sdXRpb25zL3dlYmluc3BlY3QtZHluYW1pYy1hbmFseXNpcy1kYXN0Lwp3ZWJpbnNwZWN0CiMgc2l0ZSBzY2FubmVyCiMgaHR0cDovL3d3dy5zY3J0LmNoL2VuL2F0dGFjay9kb3dubG9hZHMvd2Vic2hhZwp3ZWJzaGFnCiMgdnVsbiBzY2FubmVyCiMgZGVhZD8Kd2VidHJlbmRzIHNlY3VyaXR5IGFuYWx5emVyCiMgdnVsbiBzY2FubmVyCiMgaHR0cHM6Ly9naXRodWIuY29tL2hodWNuL3dlYnZ1bG5zY2FuCndlYnZ1bG5zY2FuCiMgdnVsbiBzY2FubmVyCiMgaHR0cHM6Ly9naXRodWIuY29tL3htZW5kZXovd2Z1enoKV2Z1enoKIyB2dWxuIHNjYW5uZXIKIyBodHRwczovL2dpdGh1Yi5jb20vZmZ1Zi9mZnVmCkZ1enogRmFzdGVyIFUgRm9vbAojIHdlYiB0ZWNobm9sb2d5IHNjYW5uZXIKIyBodHRwczovL3d3dy5tb3JuaW5nc3RhcnNlY3VyaXR5LmNvbS9yZXNlYXJjaC93aGF0d2ViCndoYXR3ZWIKIyB2dWxuIHNjYW5uZXIKd2hjYy8KIyBleHBsb2l0IHBvYwp3b3JkcHJlc3MgaGFzaCBncmFiYmVyCiMgZXhwbG9pdAp4bWxycGMgZXhwbG9pdAojIHdvcmRwcmVzcyB2dWxuIHNjYW5uZXIKIyBodHRwczovL3dwc2Nhbi5vcmcvCldQU2NhbgojIHZ1bG4gc2Nhbm5lcgojIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXplbjE2MC9zdHJ1dHMtcHduCnN0cnV0cy1wd24KIyBEZXRlY3RpZnkgd2Vic2l0ZSB2dWxuZXJhYmlsaXR5IHNjYW5uZXIKIyBodHRwczovL2RldGVjdGlmeS5jb20vCkRldGVjdGlmeQojIFpHcmFiIHNjYW5uZXIgKE1vemlsbGEvNS4wIHpncmFiLzAueCkKIyBodHRwczovL3ptYXAuaW8KemdyYWIK",
	"scripting-user-agents.data":                           "IyBHZW5lcmljIEhUVFAgY2xpZW50cyAocG9wdWxhciBsaWJyYXJpZXMpCgojIGh0dHAgbGlicmFyeQojIGh0dHA6Ly9zZWFyY2guY3Bhbi5vcmcvfm9wZXJhL0hUVFAtREFWL0RBVi5wbQpkYXYucG0vdgojIGh0dHAgbGlicmFyeQojIGh0dHA6Ly9zZWFyY2guY3Bhbi5vcmcvZGlzdC9saWJ3d3ctcGVybC9saWIvTFdQLnBtCmxpYnd3dy1wZXJsCiMgZ2VuZXJpYwptb3ppbGxhLzQuMCAoY29tcGF0aWJsZSkKbW96aWxsYS80LjAgKGNvbXBhdGlibGU7IG1zaWUgNi4wOyB3aW4zMikKbW96aWxsYS81LjAgc2YvCm1vemlsbGEvNS4wIHNmLy8KIyBodHRwIGxpYnJhcnkKIyBodHRwczovL3B5cGkucHl0aG9uLm9yZy9weXBpL2h0dHBsaWIyCnB5dGhvbi1odHRwbGliMgojIGh0dHAgbGlicmFyeQojIGh0dHA6Ly9kb2NzLnB5dGhvbi1yZXF1ZXN0cy5vcmcvZW4vbWFzdGVyLwpweXRob24tcmVxdWVzdHMKIyBodHRwIGxpYnJhcnkKIyBodHRwczovL2RvY3MucHl0aG9uLm9yZy8yL2xpYnJhcnkvdXJsbGliLmh0bWwKUHl0aG9uLXVybGxpYgojIGh0dHAgbGlicmFyeQojIGh0dHBzOi8vZ2l0aHViLmNvbS90eXBob2V1cy90eXBob2V1cwp0eXBob2V1cwojIGh0dHAgbGlicmFyeQojIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvd2luZG93cy9kZXNrdG9wL2FhMzgyOTI1JTI4dj12cy44NSUyOS5hc3B4Cndpbmh0dHAud2luaHR0cHJlcXVlc3QK",
	"sql-errors.data":                                      "TXlTcWxDbGllbnQuClNlcnZlciBtZXNzYWdlClNRTCBlcnJvcgpPcmFjbGUgZXJyb3IKSkVUIERhdGFiYXNlIEVuZ2luZQpQcm9jZWR1cmUgb3IgZnVuY3Rpb24gClNRTGl0ZS5FeGNlcHRpb24KW0lCTV1bQ0xJIERyaXZlcl1bREIyLzYwMDBdCnRoZSB1c2VkIHNlbGVjdCBzdGF0ZW1lbnRzIGhhdmUgZGlmZmVyZW50IG51bWJlciBvZiBjb2x1bW5zCm9yZy5wb3N0Z3Jlc3FsLnV0aWwuUFNRTEV4Y2VwdGlvbgpBY2Nlc3MgRGF0YWJhc2UgRW5naW5lCkluY29ycmVjdCBzeW50YXggbmVhcgpTeW50YXggZXJyb3IgaW4gc3RyaW5nIGluIHF1ZXJ5IGV4cHJlc3Npb24KU1FMaXRlRXhjZXB0aW9uCicgZG9lc24ndCBleGlzdApDTEkgRHJpdmVyCm9uIE15U1FMIHJlc3VsdCBpbmRleApzeWJhc2UKY29tLmluZm9ybWl4LmpkYmMKW015U1FMXVtPREJDCkVycm9yCmhhcyBvY2N1cnJlZCBpbiB0aGUgdmljaW5pdHkgb2Y6ClNpbnRheGlzIGluY29ycmVjdGEgY2VyY2EgZGUKTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlCmNvbS5teXNxbC5qZGJjLmV4Y2VwdGlvbnMKWW91IGhhdmUgYW4gZXJyb3IgaW4geW91ciBTUUwgc3ludGF4IG5lYXIKWW91IGhhdmUgYW4gZXJyb3IgaW4geW91ciBTUUwgc3ludGF4OwpBbiBpbGxlZ2FsIGNoYXJhY3RlciBoYXMgYmVlbiBmb3VuZCBpbiB0aGUgc3RhdGVtZW50CnBnX3F1ZXJ5KCkgWzoKc3VwcGxpZWQgYXJndW1lbnQgaXMgbm90IGEgdmFsaWQgTXlTUUwKbXNzcWxfcXVlcnkoKQpteXNxbF9mZXRjaF9hcnJheSgpCkV4Y2VwdGlvbgpqYXZhLnNxbC5TUUxFeGNlcHRpb24KQ29sdW1uIGNvdW50IGRvZXNuJ3QgbWF0Y2ggdmFsdWUgY291bnQgYXQgcm93ClN5YmFzZSBtZXNzYWdlCiBTUUwgU2VydmVyClBvc3RncmVTUUwgcXVlcnkgZmFpbGVkOgpEeW5hbWljIFNRTCBFcnJvcgpTeXN0ZW0uRGF0YS5TUUxpdGUuU1FMaXRlRXhjZXB0aW9uClNRTGl0ZS9KREJDRHJpdmVyClVuY2xvc2VkIHF1b3RhdGlvbiBtYXJrIGJlZm9yZSB0aGUgY2hhcmFjdGVyIHN0cmluZwpTeXN0ZW0uRGF0YS5TcWxDbGllbnQuClVuY2xvc2VkIHF1b3RhdGlvbiBtYXJrIGFmdGVyIHRoZSBjaGFyYWN0ZXIgc3RyaW5nClN5c3RlbS5EYXRhLk9sZURiLk9sZURiRXhjZXB0aW9uCltETV9RVUVSWV9FX1NZTlRBWF0KW1NxbEV4Y2VwdGlvbgpVbmV4cGVjdGVkIGVuZCBvZiBjb21tYW5kIGluIHN0YXRlbWVudAp2YWxpZCBQb3N0Z3JlU1FMIHJlc3VsdApwZ19leGVjKCkgWzoKU1FMIFNlcnZlcgpbU1FMSVRFX0VSUk9SXQpNaWNyb3NvZnQgT0xFIERCIFByb3ZpZGVyIGZvciBPREJDIERyaXZlcnMKUG9zdGdyZVNRTApvcmcuaHNxbGRiLmpkYmMKQURPREIuRmllbGQgKDB4ODAwQTBCQ0QpClNRTCBzeW50YXgKRXhjZXB0aW9uIApTeXN0ZW0uRGF0YS5TcWxDbGllbnQuU3FsRXhjZXB0aW9uCkRhdGEgdHlwZSBtaXNtYXRjaCBpbiBjcml0ZXJpYSBleHByZXNzaW9uLgpEcml2ZXIKREIyIFNRTCBlcnJvcgpTeWJhc2UgbWVzc2FnZToKT1JBLQpbTWljcm9zb2Z0XVtPREJDIFNRTCBTZXJ2ZXIgRHJpdmVyXQonODAwNDBlMTQnCk1pY3Jvc29mdCBPTEUgREIgUHJvdmlkZXIgZm9yIFNRTCBTZXJ2ZXIKIGluIHF1ZXJ5IGV4cHJlc3Npb24KTnBnc3FsLgp2YWxpZCBNeVNRTCByZXN1bHQKc3VwcGxpZWQgYXJndW1lbnQgaXMgbm90IGEgdmFsaWQgUG9zdGdyZVNRTCByZXN1bHQKZGIyXwpJbmdyZXMgU1FMU1RBVEUKQ29sdW1uIGNvdW50IGRvZXNuJ3QgbWF0Y2gKV2FybmluZwpbTWljcm9zb2Z0XVtPREJDIE1pY3Jvc29mdCBBY2Nlc3MgRHJpdmVyXQpbTWFjcm9tZWRpYV1bU1FMU2VydmVyIEpEQkMgRHJpdmVyXQo8Yj5XYXJuaW5nPC9iPjogaWJhc2VfClJvYWRob3VzZS5DbXMuCkRCMiBTUUwgZXJyb3I6Cg==",
	"unix-shell.data":                                      "JHtDRFBBVEh9CiR7RElSU1RBQ0t9CiR7SE9NRX0KJHtIT1NUTkFNRX0KJHtJRlN9CiR7T0xEUFdEfQoke09TVFlQRX0KJHtQQVRIfQoke1BXRH0KJENEUEFUSAokRElSU1RBQ0sKJEhPTUUKJEhPU1ROQU1FCiRJRlMKJE9MRFBXRAokT1NUWVBFCiRQQVRICiRQV0QKYmluL2Jhc2gKYmluL2NhdApiaW4vY3NoCmJpbi9kYXNoCmJpbi9kdQpiaW4vZWNobwpiaW4vZ3JlcApiaW4vbGVzcwpiaW4vbHMKYmluL21rbm9kCmJpbi9tb3JlCmJpbi9uYwpiaW4vcHMKYmluL3JiYXNoCmJpbi9zaApiaW4vc2xlZXAKYmluL3N1CmJpbi90Y3NoCmJpbi91bmFtZQpkZXYvZmQvCmRldi9udWxsCmRldi9zdGRlcnIKZGV2L3N0ZGluCmRldi9zdGRvdXQKZGV2L3RjcC8KZGV2L3VkcC8KZGV2L3plcm8KZXRjL2dyb3VwCmV0Yy9tYXN0ZXIucGFzc3dkCmV0Yy9wYXNzd2QKZXRjL3B3ZC5kYgpldGMvc2hhZG93CmV0Yy9zaGVsbHMKZXRjL3Nwd2QuZGIKcHJvYy9zZWxmLwp1c3IvYmluL2F3awp1c3IvYmluL2Jhc2U2NAp1c3IvYmluL2NhdAp1c3IvYmluL2NjCnVzci9iaW4vY2xhbmcKdXNyL2Jpbi9jbGFuZysrCnVzci9iaW4vY3VybAp1c3IvYmluL2RpZmYKdXNyL2Jpbi9lbnYKdXNyL2Jpbi9mZXRjaAp1c3IvYmluL2ZpbGUKdXNyL2Jpbi9maW5kCnVzci9iaW4vZnRwCnVzci9iaW4vZ2F3awp1c3IvYmluL2djYwp1c3IvYmluL2hlYWQKdXNyL2Jpbi9oZXhkdW1wCnVzci9iaW4vaWQKdXNyL2Jpbi9sZXNzCnVzci9iaW4vbG4KdXNyL2Jpbi9ta2ZpZm8KdXNyL2Jpbi9tb3JlCnVzci9iaW4vbmMKdXNyL2Jpbi9uY2F0CnVzci9iaW4vbmljZQp1c3IvYmluL25tYXAKdXNyL2Jpbi9wZXJsCnVzci9iaW4vcGhwCnVzci9iaW4vcGhwNQp1c3IvYmluL3BocDcKdXNyL2Jpbi9waHAtY2dpCnVzci9iaW4vcHJpbnRmCnVzci9iaW4vcHNlZAp1c3IvYmluL3B5dGhvbgp1c3IvYmluL3B5dGhvbjIKdXNyL2Jpbi9weXRob24zCnVzci9iaW4vcnVieQp1c3IvYmluL3NlZAp1c3IvYmluL3NvY2F0CnVzci9iaW4vdGFpbAp1c3IvYmluL3RlZQp1c3IvYmluL3RlbG5ldAp1c3IvYmluL3RvcAp1c3IvYmluL3VuYW1lCnVzci9iaW4vd2dldAp1c3IvYmluL3dobwp1c3IvYmluL3dob2FtaQp1c3IvYmluL3hhcmdzCnVzci9iaW4veHhkCnVzci9iaW4veWVzCnVzci9sb2NhbC9iaW4vYmFzaAp1c3IvbG9jYWwvYmluL2N1cmwKdXNyL2xvY2FsL2Jpbi9uY2F0CnVzci9sb2NhbC9iaW4vbm1hcAp1c3IvbG9jYWwvYmluL3BlcmwKdXNyL2xvY2FsL2Jpbi9waHAKdXNyL2xvY2FsL2Jpbi9weXRob24KdXNyL2xvY2FsL2Jpbi9weXRob24yCnVzci9sb2NhbC9iaW4vcHl0aG9uMwp1c3IvbG9jYWwvYmluL3JiYXNoCnVzci9sb2NhbC9iaW4vcnVieQp1c3IvbG9jYWwvYmluL3dnZXQK",
	"windows-powershell-commands.data":                     "cG93ZXJzaGVsbC5leGUKQWRkLUJpdHNGaWxlCkFkZC1Db21wdXRlcgpBZGQtQ29udGVudApBZGQtSGlzdG9yeQpBZGQtTWVtYmVyCkFkZC1QU1NuYXBpbgpBZGQtVHlwZQpDaGVja3BvaW50LUNvbXB1dGVyCkNsZWFyLUNvbnRlbnQKQ2xlYXItRXZlbnRMb2cKQ2xlYXItSGlzdG9yeQpDbGVhci1JdGVtCkNsZWFyLUl0ZW1Qcm9wZXJ0eQpDbGVhci1WYXJpYWJsZQpDb21wYXJlLU9iamVjdApDb21wbGV0ZS1CaXRzVHJhbnNmZXIKQ29tcGxldGUtVHJhbnNhY3Rpb24KQ29ubmVjdC1XU01hbgpDb252ZXJ0RnJvbS1DU1YKQ29udmVydEZyb20tU2VjdXJlU3RyaW5nCkNvbnZlcnRGcm9tLVN0cmluZ0RhdGEKQ29udmVydC1QYXRoCkNvbnZlcnRUby1DU1YKQ29udmVydFRvLUh0bWwKQ29udmVydFRvLVNlY3VyZVN0cmluZwpDb252ZXJ0VG8tWE1MCkNvcHktSXRlbQpDb3B5LUl0ZW1Qcm9wZXJ0eQpEZWJ1Zy1Qcm9jZXNzCkRpc2FibGUtQ29tcHV0ZXJSZXN0b3JlCkRpc2FibGUtUFNCcmVha3BvaW50CkRpc2FibGUtUFNTZXNzaW9uQ29uZmlndXJhdGlvbgpEaXNhYmxlLVdTTWFuQ3JlZFNTUApEaXNjb25uZWN0LVdTTWFuCkVuYWJsZS1Db21wdXRlclJlc3RvcmUKRW5hYmxlLVBTQnJlYWtwb2ludApFbmFibGUtUFNSZW1vdGluZwpFbmFibGUtUFNTZXNzaW9uQ29uZmlndXJhdGlvbgpFbmFibGUtV1NNYW5DcmVkU1NQCkVudGVyLVBTU2Vzc2lvbgpFeGl0LVBTU2Vzc2lvbgpFeHBvcnQtQWxpYXMKRXhwb3J0LUNsaXhtbApFeHBvcnQtQ29uc29sZQpFeHBvcnQtQ291bnRlcgpFeHBvcnQtQ1NWCkV4cG9ydC1Gb3JtYXREYXRhCkV4cG9ydC1Nb2R1bGVNZW1iZXIKRXhwb3J0LVBTU2Vzc2lvbgpGb3JFYWNoLU9iamVjdApGb3JtYXQtQ3VzdG9tCkZvcm1hdC1MaXN0CkZvcm1hdC1UYWJsZQpGb3JtYXQtV2lkZQpHZXQtQWNsCkdldC1BbGlhcwpHZXQtQXBwTG9ja2VyRmlsZUluZm9ybWF0aW9uCkdldC1BcHBMb2NrZXJQb2xpY3kKR2V0LUF1dGhlbnRpY29kZVNpZ25hdHVyZQpHZXQtQml0c1RyYW5zZmVyCkdldC1DaGlsZEl0ZW0KR2V0LUNvbW1hbmQKR2V0LUNvbXB1dGVyUmVzdG9yZVBvaW50CkdldC1Db250ZW50CkdldC1Db3VudGVyCkdldC1DcmVkZW50aWFsCkdldC1DdWx0dXJlCkdldC1FdmVudApHZXQtRXZlbnRMb2cKR2V0LUV2ZW50U3Vic2NyaWJlcgpHZXQtRXhlY3V0aW9uUG9saWN5CkdldC1Gb3JtYXREYXRhCkdldC1IaXN0b3J5CkdldC1Ib3N0CkdldC1Ib3RGaXgKR2V0LUl0ZW0KR2V0LUl0ZW1Qcm9wZXJ0eQpHZXQtSm9iCkdldC1Mb2NhdGlvbgpHZXQtTWVtYmVyCkdldC1Nb2R1bGUKR2V0LVBmeENlcnRpZmljYXRlCkdldC1Qcm9jZXNzCkdldC1QU0JyZWFrcG9pbnQKR2V0LVBTQ2FsbFN0YWNrCkdldC1QU0RyaXZlCkdldC1QU1Byb3ZpZGVyCkdldC1QU1Nlc3Npb24KR2V0LVBTU2Vzc2lvbkNvbmZpZ3VyYXRpb24KR2V0LVBTU25hcGluCkdldC1SYW5kb20KR2V0LVNlcnZpY2UKR2V0LVRyYWNlU291cmNlCkdldC1UcmFuc2FjdGlvbgpHZXQtVHJvdWJsZXNob290aW5nUGFjawpHZXQtVUlDdWx0dXJlCkdldC1VbmlxdWUKR2V0LVZhcmlhYmxlCkdldC1XaW5FdmVudApHZXQtV21pT2JqZWN0CkdldC1XU01hbkNyZWRTU1AKR2V0LVdTTWFuSW5zdGFuY2UKR3JvdXAtT2JqZWN0CkltcG9ydC1BbGlhcwpJbXBvcnQtQ2xpeG1sCkltcG9ydC1Db3VudGVyCkltcG9ydC1DU1YKSW1wb3J0LUxvY2FsaXplZERhdGEKSW1wb3J0LU1vZHVsZQpJbXBvcnQtUFNTZXNzaW9uCkludm9rZS1Db21tYW5kCkludm9rZS1FeHByZXNzaW9uCkludm9rZS1IaXN0b3J5Ckludm9rZS1JdGVtCkludm9rZS1Ucm91Ymxlc2hvb3RpbmdQYWNrCkludm9rZS1XbWlNZXRob2QKSW52b2tlLVdTTWFuQWN0aW9uCkpvaW4tUGF0aApMaW1pdC1FdmVudExvZwpNZWFzdXJlLUNvbW1hbmQKTWVhc3VyZS1PYmplY3QKTW92ZS1JdGVtCk1vdmUtSXRlbVByb3BlcnR5Ck5ldy1BbGlhcwpOZXctQXBwTG9ja2VyUG9saWN5Ck5ldy1FdmVudApOZXctRXZlbnRMb2cKTmV3LUl0ZW0KTmV3LUl0ZW1Qcm9wZXJ0eQpOZXctTW9kdWxlCk5ldy1Nb2R1bGVNYW5pZmVzdApOZXctT2JqZWN0Ck5ldy1QU0RyaXZlCk5ldy1QU1Nlc3Npb24KTmV3LVBTU2Vzc2lvbk9wdGlvbgpOZXctU2VydmljZQpOZXctVGltZVNwYW4KTmV3LVZhcmlhYmxlCk5ldy1XZWJTZXJ2aWNlUHJveHkKTmV3LVdTTWFuSW5zdGFuY2UKTmV3LVdTTWFuU2Vzc2lvbk9wdGlvbgpPdXQtRGVmYXVsdApPdXQtRmlsZQpPdXQtR3JpZFZpZXcKT3V0LUhvc3QKT3V0LU51bGwKT3V0LVByaW50ZXIKT3V0LVN0cmluZwpQb3AtTG9jYXRpb24KUHVzaC1Mb2NhdGlvbgpSZWFkLUhvc3QKUmVjZWl2ZS1Kb2IKUmVnaXN0ZXItRW5naW5lRXZlbnQKUmVnaXN0ZXItT2JqZWN0RXZlbnQKUmVnaXN0ZXItUFNTZXNzaW9uQ29uZmlndXJhdGlvbgpSZWdpc3Rlci1XbWlFdmVudApSZW1vdmUtQml0c1RyYW5zZmVyClJlbW92ZS1Db21wdXRlcgpSZW1vdmUtRXZlbnQKUmVtb3ZlLUV2ZW50TG9nClJlbW92ZS1JdGVtClJlbW92ZS1JdGVtUHJvcGVydHkKUmVtb3ZlLUpvYgpSZW1vdmUtTW9kdWxlClJlbW92ZS1QU0JyZWFrcG9pbnQKUmVtb3ZlLVBTRHJpdmUKUmVtb3ZlLVBTU2Vzc2lvbgpSZW1vdmUtUFNTbmFwaW4KUmVtb3ZlLVZhcmlhYmxlClJlbW92ZS1XbWlPYmplY3QKUmVtb3ZlLVdTTWFuSW5zdGFuY2UKUmVuYW1lLUl0ZW0KUmVuYW1lLUl0ZW1Qcm9wZXJ0eQpSZXNldC1Db21wdXRlck1hY2hpbmVQYXNzd29yZApSZXNvbHZlLVBhdGgKUmVzdGFydC1Db21wdXRlcgpSZXN0YXJ0LVNlcnZpY2UKUmVzdG9yZS1Db21wdXRlcgpSZXN1bWUtQml0c1RyYW5zZmVyClJlc3VtZS1TZXJ2aWNlClNlbGVjdC1PYmplY3QKU2VsZWN0LVN0cmluZwpTZWxlY3QtWE1MClNlbmQtTWFpbE1lc3NhZ2UKU2V0LUFjbApTZXQtQWxpYXMKU2V0LUFwcExvY2tlclBvbGljeQpTZXQtQXV0aGVudGljb2RlU2lnbmF0dXJlClNldC1CaXRzVHJhbnNmZXIKU2V0LUNvbnRlbnQKU2V0LURhdGUKU2V0LUV4ZWN1dGlvblBvbGljeQpTZXQtSXRlbQpTZXQtSXRlbVByb3BlcnR5ClNldC1Mb2NhdGlvbgpTZXQtUFNCcmVha3BvaW50ClNldC1QU0RlYnVnClNldC1QU1Nlc3Npb25Db25maWd1cmF0aW9uClNldC1TZXJ2aWNlClNldC1TdHJpY3RNb2RlClNldC1UcmFjZVNvdXJjZQpTZXQtVmFyaWFibGUKU2V0LVdtaUluc3RhbmNlClNldC1XU01hbkluc3RhbmNlClNldC1XU01hblF1aWNrQ29uZmlnClNob3ctRXZlbnRMb2cKU29ydC1PYmplY3QKU3BsaXQtUGF0aApTdGFydC1CaXRzVHJhbnNmZXIKU3RhcnQtSm9iClN0YXJ0LVByb2Nlc3MKU3RhcnQtU2VydmljZQpTdGFydC1TbGVlcApTdGFydC1UcmFuc2FjdGlvbgpTdGFydC1UcmFuc2NyaXB0ClN0b3AtQ29tcHV0ZXIKU3RvcC1Kb2IKU3RvcC1Qcm9jZXNzClN0b3AtU2VydmljZQpTdG9wLVRyYW5zY3JpcHQKU3VzcGVuZC1CaXRzVHJhbnNmZXIKU3VzcGVuZC1TZXJ2aWNlClRlZS1PYmplY3QKVGVzdC1BcHBMb2NrZXJQb2xpY3kKVGVzdC1Db21wdXRlclNlY3VyZUNoYW5uZWwKVGVzdC1Db25uZWN0aW9uClRlc3QtTW9kdWxlTWFuaWZlc3QKVGVzdC1QYXRoClRlc3QtV1NNYW4KVHJhY2UtQ29tbWFuZApVbmRvLVRyYW5zYWN0aW9uClVucmVnaXN0ZXItRXZlbnQKVW5yZWdpc3Rlci1QU1Nlc3Npb25Db25maWd1cmF0aW9uClVwZGF0ZS1Gb3JtYXREYXRhClVwZGF0ZS1MaXN0ClVwZGF0ZS1UeXBlRGF0YQpVc2UtVHJhbnNhY3Rpb24KV2FpdC1FdmVudApXYWl0LUpvYgpXYWl0LVByb2Nlc3MKV2hlcmUtT2JqZWN0CldyaXRlLURlYnVnCldyaXRlLUVycm9yCldyaXRlLUV2ZW50TG9nCldyaXRlLUhvc3QKV3JpdGUtT3V0cHV0CldyaXRlLVByb2dyZXNzCldyaXRlLVZlcmJvc2UKV3JpdGUtV2FybmluZwotRW5jb2RlZENvbW1hbmQKLUV4ZWN1dGlvblBvbGljeQotUFNDb25zb2xlRmlsZQo=",
}
