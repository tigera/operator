// Copyright (c) 2025 Tigera, Inc. All rights reserved.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package render

import (
	operatorv1 "github.com/tigera/operator/api/v1"
	rmeta "github.com/tigera/operator/pkg/render/common/meta"
	"sigs.k8s.io/controller-runtime/pkg/client"

	"github.com/tigera/operator/pkg/render/tigeraistio"
)

type TigeraIstioConfig struct {
	Installation *operatorv1.InstallationSpec
	TigeraIstio  *operatorv1.TigeraIstio
	Resources    *tigeraistio.TigeraIstioResources // Resources generated by helm.
}

type tigeraIstioComponent struct {
	cfg *TigeraIstioConfig
}

const (
	TigeraIstioNamespace            = "tigera-istio"
	TigeraIstioReleaseName          = "tigera-istio"
	TigeraIstioIstiodDeploymentName = "istiod"
	TigeraIstioCNIDaemonSetName     = "istio-cni-node"
	TigeraIstioZTunnelDaemonSetName = "ztunnel"
)

func TigeraIstioComponent(cfg *TigeraIstioConfig) Component {
	return &tigeraIstioComponent{
		cfg: cfg,
	}
}

// Objects implements the Component interface.
func (c *tigeraIstioComponent) Objects() ([]client.Object, []client.Object) {

	// Tigera Istio Namespace
	objs := make([]client.Object, 1+len(c.cfg.Resources.Base)+len(c.cfg.Resources.Istiod)+
		len(c.cfg.Resources.CNI)+len(c.cfg.Resources.ZTunnel))
	objs[0] = CreateNamespace(
		TigeraIstioNamespace,
		c.cfg.Installation.KubernetesProvider,
		PSSPrivileged,
		c.cfg.Installation.Azure,
	)

	// Append Istio resources in order: Base, Istiod, CNI, ZTunnel
	idx := 1
	for _, res := range [][]client.Object{
		c.cfg.Resources.Base,
		c.cfg.Resources.Istiod,
		c.cfg.Resources.CNI,
		c.cfg.Resources.ZTunnel,
	} {
		for _, obj := range res {
			objs[idx] = obj
			idx++
		}
	}

	return objs, nil
}

func (c *tigeraIstioComponent) Ready() bool {
	return true
}

func (c *tigeraIstioComponent) ResolveImages(_ *operatorv1.ImageSet) error {
	// TODO: Implement image resolution logic if needed.
	return nil
}

func (c *tigeraIstioComponent) SupportedOSType() rmeta.OSType {
	return rmeta.OSTypeLinux
}
